// Code generated by MockGen. DO NOT EDIT.
// Source: jsonld/interface.go

// Package jsonld is a generated GoMock package.
package jsonld

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vc "github.com/nuts-foundation/go-did/vc"
	ld "github.com/piprate/json-gold/ld"
)

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// DocumentLoader mocks base method.
func (m *MockContextManager) DocumentLoader() ld.DocumentLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocumentLoader")
	ret0, _ := ret[0].(ld.DocumentLoader)
	return ret0
}

// DocumentLoader indicates an expected call of DocumentLoader.
func (mr *MockContextManagerMockRecorder) DocumentLoader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocumentLoader", reflect.TypeOf((*MockContextManager)(nil).DocumentLoader))
}

// Transformer mocks base method.
func (m *MockContextManager) Transformer() Transformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transformer")
	ret0, _ := ret[0].(Transformer)
	return ret0
}

// Transformer indicates an expected call of Transformer.
func (mr *MockContextManagerMockRecorder) Transformer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transformer", reflect.TypeOf((*MockContextManager)(nil).Transformer))
}

// MockTransformer is a mock of Transformer interface.
type MockTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer.
type MockTransformerMockRecorder struct {
	mock *MockTransformer
}

// NewMockTransformer creates a new mock instance.
func NewMockTransformer(ctrl *gomock.Controller) *MockTransformer {
	mock := &MockTransformer{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformer) EXPECT() *MockTransformerMockRecorder {
	return m.recorder
}

// FromBytes mocks base method.
func (m *MockTransformer) FromBytes(asJSON []byte) (Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromBytes", asJSON)
	ret0, _ := ret[0].(Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromBytes indicates an expected call of FromBytes.
func (mr *MockTransformerMockRecorder) FromBytes(asJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromBytes", reflect.TypeOf((*MockTransformer)(nil).FromBytes), asJSON)
}

// FromVC mocks base method.
func (m *MockTransformer) FromVC(credential vc.VerifiableCredential) (Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromVC", credential)
	ret0, _ := ret[0].(Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromVC indicates an expected call of FromVC.
func (mr *MockTransformerMockRecorder) FromVC(credential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromVC", reflect.TypeOf((*MockTransformer)(nil).FromVC), credential)
}
