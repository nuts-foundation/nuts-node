// Code generated by MockGen. DO NOT EDIT.
// Source: jsonld/interface.go

// Package jsonld is a generated GoMock package.
package jsonld

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ld "github.com/piprate/json-gold/ld"
)

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// DocumentLoader mocks base method.
func (m *MockContextManager) DocumentLoader() ld.DocumentLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocumentLoader")
	ret0, _ := ret[0].(ld.DocumentLoader)
	return ret0
}

// DocumentLoader indicates an expected call of DocumentLoader.
func (mr *MockContextManagerMockRecorder) DocumentLoader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocumentLoader", reflect.TypeOf((*MockContextManager)(nil).DocumentLoader))
}

// Reader mocks base method.
func (m *MockContextManager) Reader() Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(Reader)
	return ret0
}

// Reader indicates an expected call of Reader.
func (mr *MockContextManagerMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockContextManager)(nil).Reader))
}
