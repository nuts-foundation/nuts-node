services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ] # this makes sure the container only reports healthy it can be connected to
      interval: 1s
      timeout: 5s
      retries: 20
  nodeA:
    user: "$USER:$USER"
    image: "${IMAGE_NODE_A:-nutsfoundation/nuts-node:master}"
    depends_on:
      db:
        condition: service_healthy
    environment:
      NUTS_CONFIGFILE: /opt/nuts/nuts.yaml
      NUTS_NETWORK_NODEDID: "${NODE_A_DID}"
      NUTS_STORAGE_SQL_CONNECTION: postgres://postgres:postgres@db:5432/node_a?sslmode=disable
    ports:
      - "18081:8081"
    volumes:
      - "./node-A/data:/opt/nuts/data"
      - "./node-A/nuts.yaml:/opt/nuts/nuts.yaml:ro"
      - "../../tls-certs/nodeA-certificate.pem:/opt/nuts/certificate-and-key.pem:ro"
      - "../../tls-certs/truststore.pem:/opt/nuts/truststore.pem:ro"
    mem_limit: 512m
    command: ["server","--cpuprofile=/opt/nuts/data/profile.dmp"]
    healthcheck:
      interval: 1s # Make test run quicker by checking health status more often
  nodeB:
    user: "$USER:$USER"
    image: "${IMAGE_NODE_B:-nutsfoundation/nuts-node:master}"
    depends_on:
      db:
        condition: service_healthy
    environment:
      NUTS_CONFIGFILE: /opt/nuts/nuts.yaml
      NUTS_NETWORK_NODEDID: "${NODE_B_DID}"
      NUTS_NETWORK_BOOTSTRAPNODES: ${BOOTSTRAP_NODES}
      NUTS_STORAGE_SQL_CONNECTION: postgres://postgres:postgres@db:5432/node_b?sslmode=disable
    ports:
      - "28081:8081"
    volumes:
      - "./node-B/data:/opt/nuts/data"
      - "./node-B/nuts.yaml:/opt/nuts/nuts.yaml:ro"
      - "../../tls-certs/nodeB-certificate.pem:/opt/nuts/certificate-and-key.pem:ro"
      - "../../tls-certs/truststore.pem:/opt/nuts/truststore.pem:ro"
    mem_limit: 512m
    healthcheck:
      interval: 1s # Make test run quicker by checking health status more often