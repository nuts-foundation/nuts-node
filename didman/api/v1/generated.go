// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// EnableBoltJSONBody defines parameters for EnableBolt.
type EnableBoltJSONBody map[string]interface{}

// EnableBoltRequestBody defines body for EnableBolt for application/json ContentType.
type EnableBoltJSONRequestBody EnableBoltJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DisableBolt request
	DisableBolt(ctx context.Context, did string, name string) (*http.Response, error)

	// EnableBolt request  with any body
	EnableBoltWithBody(ctx context.Context, did string, name string, contentType string, body io.Reader) (*http.Response, error)

	EnableBolt(ctx context.Context, did string, name string, body EnableBoltJSONRequestBody) (*http.Response, error)
}

func (c *Client) DisableBolt(ctx context.Context, did string, name string) (*http.Response, error) {
	req, err := NewDisableBoltRequest(c.Server, did, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EnableBoltWithBody(ctx context.Context, did string, name string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEnableBoltRequestWithBody(c.Server, did, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EnableBolt(ctx context.Context, did string, name string, body EnableBoltJSONRequestBody) (*http.Response, error) {
	req, err := NewEnableBoltRequest(c.Server, did, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewDisableBoltRequest generates requests for DisableBolt
func NewDisableBoltRequest(server string, did string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "did", did)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/internal/didman/v1/%s/bolt/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnableBoltRequest calls the generic EnableBolt builder with application/json body
func NewEnableBoltRequest(server string, did string, name string, body EnableBoltJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableBoltRequestWithBody(server, did, name, "application/json", bodyReader)
}

// NewEnableBoltRequestWithBody generates requests for EnableBolt with any type of body
func NewEnableBoltRequestWithBody(server string, did string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "did", did)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/internal/didman/v1/%s/bolt/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DisableBolt request
	DisableBoltWithResponse(ctx context.Context, did string, name string) (*DisableBoltResponse, error)

	// EnableBolt request  with any body
	EnableBoltWithBodyWithResponse(ctx context.Context, did string, name string, contentType string, body io.Reader) (*EnableBoltResponse, error)

	EnableBoltWithResponse(ctx context.Context, did string, name string, body EnableBoltJSONRequestBody) (*EnableBoltResponse, error)
}

type DisableBoltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DisableBoltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableBoltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableBoltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnableBoltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableBoltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DisableBoltWithResponse request returning *DisableBoltResponse
func (c *ClientWithResponses) DisableBoltWithResponse(ctx context.Context, did string, name string) (*DisableBoltResponse, error) {
	rsp, err := c.DisableBolt(ctx, did, name)
	if err != nil {
		return nil, err
	}
	return ParseDisableBoltResponse(rsp)
}

// EnableBoltWithBodyWithResponse request with arbitrary body returning *EnableBoltResponse
func (c *ClientWithResponses) EnableBoltWithBodyWithResponse(ctx context.Context, did string, name string, contentType string, body io.Reader) (*EnableBoltResponse, error) {
	rsp, err := c.EnableBoltWithBody(ctx, did, name, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableBoltResponse(rsp)
}

func (c *ClientWithResponses) EnableBoltWithResponse(ctx context.Context, did string, name string, body EnableBoltJSONRequestBody) (*EnableBoltResponse, error) {
	rsp, err := c.EnableBolt(ctx, did, name, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableBoltResponse(rsp)
}

// ParseDisableBoltResponse parses an HTTP response from a DisableBoltWithResponse call
func ParseDisableBoltResponse(rsp *http.Response) (*DisableBoltResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DisableBoltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseEnableBoltResponse parses an HTTP response from a EnableBoltWithResponse call
func ParseEnableBoltResponse(rsp *http.Response) (*EnableBoltResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EnableBoltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Disables a Bolt for a DID
	// (DELETE /internal/didman/v1/{did}/bolt/{name})
	DisableBolt(ctx echo.Context, did string, name string) error
	// Enables a Bolt for a DID
	// (POST /internal/didman/v1/{did}/bolt/{name})
	EnableBolt(ctx echo.Context, did string, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DisableBolt converts echo context to params.
func (w *ServerInterfaceWrapper) DisableBolt(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameter("simple", false, "did", ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DisableBolt(ctx, did, name)
	return err
}

// EnableBolt converts echo context to params.
func (w *ServerInterfaceWrapper) EnableBolt(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameter("simple", false, "did", ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EnableBolt(ctx, did, name)
	return err
}

// PATCH: This template file was taken from pkg/codegen/templates/register.tmpl

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	Add(method string, path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.Add(http.MethodDelete, baseURL+"/internal/didman/v1/:did/bolt/:name", wrapper.DisableBolt)
	router.Add(http.MethodPost, baseURL+"/internal/didman/v1/:did/bolt/:name", wrapper.EnableBolt)

}

