// Code generated by MockGen. DO NOT EDIT.
// Source: vcr/holder/openid.go
//
// Generated by this command:
//
//	mockgen -destination=vcr/holder/openid_mock.go -package=holder -source=vcr/holder/openid.go
//
// Package holder is a generated GoMock package.
package holder

import (
	context "context"
	reflect "reflect"

	openid4vci "github.com/nuts-foundation/nuts-node/vcr/openid4vci"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenIDHandler is a mock of OpenIDHandler interface.
type MockOpenIDHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOpenIDHandlerMockRecorder
}

// MockOpenIDHandlerMockRecorder is the mock recorder for MockOpenIDHandler.
type MockOpenIDHandlerMockRecorder struct {
	mock *MockOpenIDHandler
}

// NewMockOpenIDHandler creates a new mock instance.
func NewMockOpenIDHandler(ctrl *gomock.Controller) *MockOpenIDHandler {
	mock := &MockOpenIDHandler{ctrl: ctrl}
	mock.recorder = &MockOpenIDHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenIDHandler) EXPECT() *MockOpenIDHandlerMockRecorder {
	return m.recorder
}

// HandleCredentialOffer mocks base method.
func (m *MockOpenIDHandler) HandleCredentialOffer(ctx context.Context, offer openid4vci.CredentialOffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCredentialOffer", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCredentialOffer indicates an expected call of HandleCredentialOffer.
func (mr *MockOpenIDHandlerMockRecorder) HandleCredentialOffer(ctx, offer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCredentialOffer", reflect.TypeOf((*MockOpenIDHandler)(nil).HandleCredentialOffer), ctx, offer)
}

// Metadata mocks base method.
func (m *MockOpenIDHandler) Metadata() openid4vci.OAuth2ClientMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(openid4vci.OAuth2ClientMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockOpenIDHandlerMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockOpenIDHandler)(nil).Metadata))
}
