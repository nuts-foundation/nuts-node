// Code generated by MockGen. DO NOT EDIT.
// Source: vcr/holder/interface.go

// Package holder is a generated GoMock package.
package holder

import (
	context "context"
	reflect "reflect"

	did "github.com/nuts-foundation/go-did/did"
	vc "github.com/nuts-foundation/go-did/vc"
	gomock "go.uber.org/mock/gomock"
)

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// Present mocks base method.
func (m *MockWallet) Present(ctx context.Context, credentials []vc.VerifiableCredential, options PresentationOptions, signerDID *did.DID, validateVC bool) (*vc.VerifiablePresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Present", ctx, credentials, options, signerDID, validateVC)
	ret0, _ := ret[0].(*vc.VerifiablePresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Present indicates an expected call of Present.
func (mr *MockWalletMockRecorder) Present(ctx, credentials, options, signerDID, validateVC interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockWallet)(nil).Present), ctx, credentials, options, signerDID, validateVC)
}
