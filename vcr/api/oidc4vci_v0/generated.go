// Package oidc4vci_v0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oidc4vci_v0

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OAuth2 Client Metadata
	// (GET /identity/{did}/.well-known/oauth2-client-metadata)
	GetOAuth2ClientMetadata(ctx echo.Context, did string) error
	// Get the OIDC Provider metadata
	// (GET /identity/{did}/.well-known/openid-configuration)
	GetOIDCProviderMetadata(ctx echo.Context, did string) error
	// Get the OIDC4VCI Credential Issuer Metadata
	// (GET /identity/{did}/.well-known/openid-credential-issuer)
	GetOIDC4VCIIssuerMetadata(ctx echo.Context, did string) error
	// Credential offer (OIDC4VCI) endpoint
	// (GET /identity/{did}/holder/oidc4vci/credential_offer)
	CredentialOffer(ctx echo.Context, did string, params CredentialOfferParams) error
	// Credential endpoint
	// (POST /identity/{did}/issuer/oidc4vci/credential)
	GetCredential(ctx echo.Context, did string, params GetCredentialParams) error
	// Token endpoint
	// (POST /identity/{did}/oidc/token)
	RequestAccessToken(ctx echo.Context, did string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOAuth2ClientMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetOAuth2ClientMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOAuth2ClientMetadata(ctx, did)
	return err
}

// GetOIDCProviderMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetOIDCProviderMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOIDCProviderMetadata(ctx, did)
	return err
}

// GetOIDC4VCIIssuerMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetOIDC4VCIIssuerMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOIDC4VCIIssuerMetadata(ctx, did)
	return err
}

// CredentialOffer converts echo context to params.
func (w *ServerInterfaceWrapper) CredentialOffer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CredentialOfferParams
	// ------------- Required query parameter "credential_offer" -------------

	err = runtime.BindQueryParameter("form", true, true, "credential_offer", ctx.QueryParams(), &params.CredentialOffer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credential_offer: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CredentialOffer(ctx, did, params)
	return err
}

// GetCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCredentialParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = &Authorization
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredential(ctx, did, params)
	return err
}

// RequestAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestAccessToken(ctx, did)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/identity/:did/.well-known/oauth2-client-metadata", wrapper.GetOAuth2ClientMetadata)
	router.GET(baseURL+"/identity/:did/.well-known/openid-configuration", wrapper.GetOIDCProviderMetadata)
	router.GET(baseURL+"/identity/:did/.well-known/openid-credential-issuer", wrapper.GetOIDC4VCIIssuerMetadata)
	router.GET(baseURL+"/identity/:did/holder/oidc4vci/credential_offer", wrapper.CredentialOffer)
	router.POST(baseURL+"/identity/:did/issuer/oidc4vci/credential", wrapper.GetCredential)
	router.POST(baseURL+"/identity/:did/oidc/token", wrapper.RequestAccessToken)

}

type GetOAuth2ClientMetadataRequestObject struct {
	Did string `json:"did"`
}

type GetOAuth2ClientMetadataResponseObject interface {
	VisitGetOAuth2ClientMetadataResponse(w http.ResponseWriter) error
}

type GetOAuth2ClientMetadata200JSONResponse OAuth2ClientMetadata

func (response GetOAuth2ClientMetadata200JSONResponse) VisitGetOAuth2ClientMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOIDCProviderMetadataRequestObject struct {
	Did string `json:"did"`
}

type GetOIDCProviderMetadataResponseObject interface {
	VisitGetOIDCProviderMetadataResponse(w http.ResponseWriter) error
}

type GetOIDCProviderMetadata200JSONResponse OIDCProviderMetadata

func (response GetOIDCProviderMetadata200JSONResponse) VisitGetOIDCProviderMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOIDC4VCIIssuerMetadataRequestObject struct {
	Did string `json:"did"`
}

type GetOIDC4VCIIssuerMetadataResponseObject interface {
	VisitGetOIDC4VCIIssuerMetadataResponse(w http.ResponseWriter) error
}

type GetOIDC4VCIIssuerMetadata200JSONResponse CredentialIssuerMetadata

func (response GetOIDC4VCIIssuerMetadata200JSONResponse) VisitGetOIDC4VCIIssuerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CredentialOfferRequestObject struct {
	Did    string `json:"did"`
	Params CredentialOfferParams
}

type CredentialOfferResponseObject interface {
	VisitCredentialOfferResponse(w http.ResponseWriter) error
}

type CredentialOffer202TextResponse string

func (response CredentialOffer202TextResponse) VisitCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(202)

	_, err := w.Write([]byte(response))
	return err
}

type CredentialOffer400TextResponse string

func (response CredentialOffer400TextResponse) VisitCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(400)

	_, err := w.Write([]byte(response))
	return err
}

type CredentialOffer500TextResponse string

func (response CredentialOffer500TextResponse) VisitCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(500)

	_, err := w.Write([]byte(response))
	return err
}

type GetCredentialRequestObject struct {
	Did    string `json:"did"`
	Params GetCredentialParams
	Body   *GetCredentialJSONRequestBody
}

type GetCredentialResponseObject interface {
	VisitGetCredentialResponse(w http.ResponseWriter) error
}

type GetCredential200JSONResponse CredentialResponse

func (response GetCredential200JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestAccessTokenRequestObject struct {
	Did  string `json:"did"`
	Body *RequestAccessTokenFormdataRequestBody
}

type RequestAccessTokenResponseObject interface {
	VisitRequestAccessTokenResponse(w http.ResponseWriter) error
}

type RequestAccessToken200JSONResponse OIDCTokenResponse

func (response RequestAccessToken200JSONResponse) VisitRequestAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OAuth2 Client Metadata
	// (GET /identity/{did}/.well-known/oauth2-client-metadata)
	GetOAuth2ClientMetadata(ctx context.Context, request GetOAuth2ClientMetadataRequestObject) (GetOAuth2ClientMetadataResponseObject, error)
	// Get the OIDC Provider metadata
	// (GET /identity/{did}/.well-known/openid-configuration)
	GetOIDCProviderMetadata(ctx context.Context, request GetOIDCProviderMetadataRequestObject) (GetOIDCProviderMetadataResponseObject, error)
	// Get the OIDC4VCI Credential Issuer Metadata
	// (GET /identity/{did}/.well-known/openid-credential-issuer)
	GetOIDC4VCIIssuerMetadata(ctx context.Context, request GetOIDC4VCIIssuerMetadataRequestObject) (GetOIDC4VCIIssuerMetadataResponseObject, error)
	// Credential offer (OIDC4VCI) endpoint
	// (GET /identity/{did}/holder/oidc4vci/credential_offer)
	CredentialOffer(ctx context.Context, request CredentialOfferRequestObject) (CredentialOfferResponseObject, error)
	// Credential endpoint
	// (POST /identity/{did}/issuer/oidc4vci/credential)
	GetCredential(ctx context.Context, request GetCredentialRequestObject) (GetCredentialResponseObject, error)
	// Token endpoint
	// (POST /identity/{did}/oidc/token)
	RequestAccessToken(ctx context.Context, request RequestAccessTokenRequestObject) (RequestAccessTokenResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetOAuth2ClientMetadata operation middleware
func (sh *strictHandler) GetOAuth2ClientMetadata(ctx echo.Context, did string) error {
	var request GetOAuth2ClientMetadataRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOAuth2ClientMetadata(ctx.Request().Context(), request.(GetOAuth2ClientMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOAuth2ClientMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOAuth2ClientMetadataResponseObject); ok {
		return validResponse.VisitGetOAuth2ClientMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetOIDCProviderMetadata operation middleware
func (sh *strictHandler) GetOIDCProviderMetadata(ctx echo.Context, did string) error {
	var request GetOIDCProviderMetadataRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOIDCProviderMetadata(ctx.Request().Context(), request.(GetOIDCProviderMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOIDCProviderMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOIDCProviderMetadataResponseObject); ok {
		return validResponse.VisitGetOIDCProviderMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetOIDC4VCIIssuerMetadata operation middleware
func (sh *strictHandler) GetOIDC4VCIIssuerMetadata(ctx echo.Context, did string) error {
	var request GetOIDC4VCIIssuerMetadataRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOIDC4VCIIssuerMetadata(ctx.Request().Context(), request.(GetOIDC4VCIIssuerMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOIDC4VCIIssuerMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOIDC4VCIIssuerMetadataResponseObject); ok {
		return validResponse.VisitGetOIDC4VCIIssuerMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CredentialOffer operation middleware
func (sh *strictHandler) CredentialOffer(ctx echo.Context, did string, params CredentialOfferParams) error {
	var request CredentialOfferRequestObject

	request.Did = did
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CredentialOffer(ctx.Request().Context(), request.(CredentialOfferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CredentialOffer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CredentialOfferResponseObject); ok {
		return validResponse.VisitCredentialOfferResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCredential operation middleware
func (sh *strictHandler) GetCredential(ctx echo.Context, did string, params GetCredentialParams) error {
	var request GetCredentialRequestObject

	request.Did = did
	request.Params = params

	var body GetCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredential(ctx.Request().Context(), request.(GetCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCredentialResponseObject); ok {
		return validResponse.VisitGetCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RequestAccessToken operation middleware
func (sh *strictHandler) RequestAccessToken(ctx echo.Context, did string) error {
	var request RequestAccessTokenRequestObject

	request.Did = did

	if form, err := ctx.FormParams(); err == nil {
		var body RequestAccessTokenFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestAccessToken(ctx.Request().Context(), request.(RequestAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestAccessTokenResponseObject); ok {
		return validResponse.VisitRequestAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
