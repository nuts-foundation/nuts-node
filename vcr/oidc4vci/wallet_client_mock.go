// Code generated by MockGen. DO NOT EDIT.
// Source: vcr/oidc4vci/wallet_client.go

// Package oidc4vci is a generated GoMock package.
package oidc4vci

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWalletAPIClient is a mock of WalletAPIClient interface.
type MockWalletAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockWalletAPIClientMockRecorder
}

// MockWalletAPIClientMockRecorder is the mock recorder for MockWalletAPIClient.
type MockWalletAPIClientMockRecorder struct {
	mock *MockWalletAPIClient
}

// NewMockWalletAPIClient creates a new mock instance.
func NewMockWalletAPIClient(ctrl *gomock.Controller) *MockWalletAPIClient {
	mock := &MockWalletAPIClient{ctrl: ctrl}
	mock.recorder = &MockWalletAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletAPIClient) EXPECT() *MockWalletAPIClientMockRecorder {
	return m.recorder
}

// Metadata mocks base method.
func (m *MockWalletAPIClient) Metadata() OAuth2ClientMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(OAuth2ClientMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockWalletAPIClientMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockWalletAPIClient)(nil).Metadata))
}

// OfferCredential mocks base method.
func (m *MockWalletAPIClient) OfferCredential(ctx context.Context, offer CredentialOffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferCredential", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferCredential indicates an expected call of OfferCredential.
func (mr *MockWalletAPIClientMockRecorder) OfferCredential(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferCredential", reflect.TypeOf((*MockWalletAPIClient)(nil).OfferCredential), ctx, offer)
}
