// Code generated by MockGen. DO NOT EDIT.
// Source: vcr/vcr.go

// Package vcr is a generated GoMock package.
package vcr

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ssi "github.com/nuts-foundation/go-did"
	vc "github.com/nuts-foundation/go-did/vc"
	concept "github.com/nuts-foundation/nuts-node/vcr/concept"
	credential "github.com/nuts-foundation/nuts-node/vcr/credential"
	issuer "github.com/nuts-foundation/nuts-node/vcr/issuer"
)

// MockVCR is a mock of VCR interface.
type MockVCR struct {
	ctrl     *gomock.Controller
	recorder *MockVCRMockRecorder
}

// MockVCRMockRecorder is the mock recorder for MockVCR.
type MockVCRMockRecorder struct {
	mock *MockVCR
}

// NewMockVCR creates a new mock instance.
func NewMockVCR(ctrl *gomock.Controller) *MockVCR {
	mock := &MockVCR{ctrl: ctrl}
	mock.recorder = &MockVCRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCR) EXPECT() *MockVCRMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVCR) Get(conceptName string, allowUntrusted bool, subject string) (concept.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", conceptName, allowUntrusted, subject)
	ret0, _ := ret[0].(concept.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVCRMockRecorder) Get(conceptName, allowUntrusted, subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVCR)(nil).Get), conceptName, allowUntrusted, subject)
}

// Issue mocks base method.
func (m *MockVCR) Issue(vcToIssue vc.VerifiableCredential) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", vcToIssue)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockVCRMockRecorder) Issue(vcToIssue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockVCR)(nil).Issue), vcToIssue)
}

// Issuer mocks base method.
func (m *MockVCR) Issuer() issuer.Issuer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issuer")
	ret0, _ := ret[0].(issuer.Issuer)
	return ret0
}

// Issuer indicates an expected call of Issuer.
func (mr *MockVCRMockRecorder) Issuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issuer", reflect.TypeOf((*MockVCR)(nil).Issuer))
}

// Registry mocks base method.
func (m *MockVCR) Registry() concept.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(concept.Reader)
	return ret0
}

// Registry indicates an expected call of Registry.
func (mr *MockVCRMockRecorder) Registry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockVCR)(nil).Registry))
}

// Resolve mocks base method.
func (m *MockVCR) Resolve(ID ssi.URI, resolveTime *time.Time) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ID, resolveTime)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockVCRMockRecorder) Resolve(ID, resolveTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockVCR)(nil).Resolve), ID, resolveTime)
}

// Revoke mocks base method.
func (m *MockVCR) Revoke(ID ssi.URI) (*credential.Revocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ID)
	ret0, _ := ret[0].(*credential.Revocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockVCRMockRecorder) Revoke(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockVCR)(nil).Revoke), ID)
}

// Search mocks base method.
func (m *MockVCR) Search(ctx context.Context, conceptName string, allowUntrusted bool, query map[string]string) ([]concept.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, conceptName, allowUntrusted, query)
	ret0, _ := ret[0].([]concept.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockVCRMockRecorder) Search(ctx, conceptName, allowUntrusted, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVCR)(nil).Search), ctx, conceptName, allowUntrusted, query)
}

// StoreCredential mocks base method.
func (m *MockVCR) StoreCredential(vc vc.VerifiableCredential, validAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredential", vc, validAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCredential indicates an expected call of StoreCredential.
func (mr *MockVCRMockRecorder) StoreCredential(vc, validAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredential", reflect.TypeOf((*MockVCR)(nil).StoreCredential), vc, validAt)
}

// StoreRevocation mocks base method.
func (m *MockVCR) StoreRevocation(r credential.Revocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRevocation", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRevocation indicates an expected call of StoreRevocation.
func (mr *MockVCRMockRecorder) StoreRevocation(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRevocation", reflect.TypeOf((*MockVCR)(nil).StoreRevocation), r)
}

// Trust mocks base method.
func (m *MockVCR) Trust(credentialType, issuer ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trust", credentialType, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trust indicates an expected call of Trust.
func (mr *MockVCRMockRecorder) Trust(credentialType, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trust", reflect.TypeOf((*MockVCR)(nil).Trust), credentialType, issuer)
}

// Trusted mocks base method.
func (m *MockVCR) Trusted(credentialType ssi.URI) ([]ssi.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trusted", credentialType)
	ret0, _ := ret[0].([]ssi.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trusted indicates an expected call of Trusted.
func (mr *MockVCRMockRecorder) Trusted(credentialType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trusted", reflect.TypeOf((*MockVCR)(nil).Trusted), credentialType)
}

// Untrust mocks base method.
func (m *MockVCR) Untrust(credentialType, issuer ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untrust", credentialType, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Untrust indicates an expected call of Untrust.
func (mr *MockVCRMockRecorder) Untrust(credentialType, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrust", reflect.TypeOf((*MockVCR)(nil).Untrust), credentialType, issuer)
}

// Untrusted mocks base method.
func (m *MockVCR) Untrusted(credentialType ssi.URI) ([]ssi.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untrusted", credentialType)
	ret0, _ := ret[0].([]ssi.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untrusted indicates an expected call of Untrusted.
func (mr *MockVCRMockRecorder) Untrusted(credentialType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrusted", reflect.TypeOf((*MockVCR)(nil).Untrusted), credentialType)
}

// Validate mocks base method.
func (m *MockVCR) Validate(credential vc.VerifiableCredential, allowUntrusted, checkSignature bool, validAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", credential, allowUntrusted, checkSignature, validAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockVCRMockRecorder) Validate(credential, allowUntrusted, checkSignature, validAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockVCR)(nil).Validate), credential, allowUntrusted, checkSignature, validAt)
}
