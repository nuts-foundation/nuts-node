// Code generated by MockGen. DO NOT EDIT.
// Source: vcr/issuer/interface.go
//
// Generated by this command:
//
//	mockgen -destination=vcr/issuer/mock.go -package=issuer -source=vcr/issuer/interface.go
//
// Package issuer is a generated GoMock package.
package issuer

import (
	context "context"
	reflect "reflect"

	ssi "github.com/nuts-foundation/go-did"
	did "github.com/nuts-foundation/go-did/did"
	vc "github.com/nuts-foundation/go-did/vc"
	core "github.com/nuts-foundation/nuts-node/core"
	crypto "github.com/nuts-foundation/nuts-node/crypto"
	credential "github.com/nuts-foundation/nuts-node/vcr/credential"
	gomock "go.uber.org/mock/gomock"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishCredential mocks base method.
func (m *MockPublisher) PublishCredential(ctx context.Context, verifiableCredential vc.VerifiableCredential, public bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishCredential", ctx, verifiableCredential, public)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishCredential indicates an expected call of PublishCredential.
func (mr *MockPublisherMockRecorder) PublishCredential(ctx, verifiableCredential, public any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCredential", reflect.TypeOf((*MockPublisher)(nil).PublishCredential), ctx, verifiableCredential, public)
}

// PublishRevocation mocks base method.
func (m *MockPublisher) PublishRevocation(ctx context.Context, revocation credential.Revocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRevocation", ctx, revocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRevocation indicates an expected call of PublishRevocation.
func (mr *MockPublisherMockRecorder) PublishRevocation(ctx, revocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRevocation", reflect.TypeOf((*MockPublisher)(nil).PublishRevocation), ctx, revocation)
}

// MockkeyResolver is a mock of keyResolver interface.
type MockkeyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockkeyResolverMockRecorder
}

// MockkeyResolverMockRecorder is the mock recorder for MockkeyResolver.
type MockkeyResolverMockRecorder struct {
	mock *MockkeyResolver
}

// NewMockkeyResolver creates a new mock instance.
func NewMockkeyResolver(ctrl *gomock.Controller) *MockkeyResolver {
	mock := &MockkeyResolver{ctrl: ctrl}
	mock.recorder = &MockkeyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeyResolver) EXPECT() *MockkeyResolverMockRecorder {
	return m.recorder
}

// ResolveAssertionKey mocks base method.
func (m *MockkeyResolver) ResolveAssertionKey(ctx context.Context, issuerDID did.DID) (crypto.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAssertionKey", ctx, issuerDID)
	ret0, _ := ret[0].(crypto.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveAssertionKey indicates an expected call of ResolveAssertionKey.
func (mr *MockkeyResolverMockRecorder) ResolveAssertionKey(ctx, issuerDID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAssertionKey", reflect.TypeOf((*MockkeyResolver)(nil).ResolveAssertionKey), ctx, issuerDID)
}

// MockIssuer is a mock of Issuer interface.
type MockIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockIssuerMockRecorder
}

// MockIssuerMockRecorder is the mock recorder for MockIssuer.
type MockIssuerMockRecorder struct {
	mock *MockIssuer
}

// NewMockIssuer creates a new mock instance.
func NewMockIssuer(ctrl *gomock.Controller) *MockIssuer {
	mock := &MockIssuer{ctrl: ctrl}
	mock.recorder = &MockIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuer) EXPECT() *MockIssuerMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockIssuer) Issue(ctx context.Context, template vc.VerifiableCredential, options CredentialOptions) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", ctx, template, options)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockIssuerMockRecorder) Issue(ctx, template, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockIssuer)(nil).Issue), ctx, template, options)
}

// Revoke mocks base method.
func (m *MockIssuer) Revoke(ctx context.Context, credentialID ssi.URI) (*credential.Revocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, credentialID)
	ret0, _ := ret[0].(*credential.Revocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockIssuerMockRecorder) Revoke(ctx, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockIssuer)(nil).Revoke), ctx, credentialID)
}

// SearchCredential mocks base method.
func (m *MockIssuer) SearchCredential(credentialType ssi.URI, issuer did.DID, subject *ssi.URI) ([]vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCredential", credentialType, issuer, subject)
	ret0, _ := ret[0].([]vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCredential indicates an expected call of SearchCredential.
func (mr *MockIssuerMockRecorder) SearchCredential(credentialType, issuer, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCredential", reflect.TypeOf((*MockIssuer)(nil).SearchCredential), credentialType, issuer, subject)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Diagnostics mocks base method.
func (m *MockStore) Diagnostics() []core.DiagnosticResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diagnostics")
	ret0, _ := ret[0].([]core.DiagnosticResult)
	return ret0
}

// Diagnostics indicates an expected call of Diagnostics.
func (mr *MockStoreMockRecorder) Diagnostics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diagnostics", reflect.TypeOf((*MockStore)(nil).Diagnostics))
}

// GetCredential mocks base method.
func (m *MockStore) GetCredential(id ssi.URI) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", id)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockStoreMockRecorder) GetCredential(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockStore)(nil).GetCredential), id)
}

// GetRevocation mocks base method.
func (m *MockStore) GetRevocation(id ssi.URI) (*credential.Revocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevocation", id)
	ret0, _ := ret[0].(*credential.Revocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevocation indicates an expected call of GetRevocation.
func (mr *MockStoreMockRecorder) GetRevocation(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevocation", reflect.TypeOf((*MockStore)(nil).GetRevocation), id)
}

// SearchCredential mocks base method.
func (m *MockStore) SearchCredential(credentialType ssi.URI, issuer did.DID, subject *ssi.URI) ([]vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCredential", credentialType, issuer, subject)
	ret0, _ := ret[0].([]vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCredential indicates an expected call of SearchCredential.
func (mr *MockStoreMockRecorder) SearchCredential(credentialType, issuer, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCredential", reflect.TypeOf((*MockStore)(nil).SearchCredential), credentialType, issuer, subject)
}

// StoreCredential mocks base method.
func (m *MockStore) StoreCredential(vc vc.VerifiableCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredential", vc)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCredential indicates an expected call of StoreCredential.
func (mr *MockStoreMockRecorder) StoreCredential(vc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredential", reflect.TypeOf((*MockStore)(nil).StoreCredential), vc)
}

// StoreRevocation mocks base method.
func (m *MockStore) StoreRevocation(r credential.Revocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRevocation", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRevocation indicates an expected call of StoreRevocation.
func (mr *MockStoreMockRecorder) StoreRevocation(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRevocation", reflect.TypeOf((*MockStore)(nil).StoreRevocation), r)
}

// MockCredentialSearcher is a mock of CredentialSearcher interface.
type MockCredentialSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialSearcherMockRecorder
}

// MockCredentialSearcherMockRecorder is the mock recorder for MockCredentialSearcher.
type MockCredentialSearcherMockRecorder struct {
	mock *MockCredentialSearcher
}

// NewMockCredentialSearcher creates a new mock instance.
func NewMockCredentialSearcher(ctrl *gomock.Controller) *MockCredentialSearcher {
	mock := &MockCredentialSearcher{ctrl: ctrl}
	mock.recorder = &MockCredentialSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialSearcher) EXPECT() *MockCredentialSearcherMockRecorder {
	return m.recorder
}

// SearchCredential mocks base method.
func (m *MockCredentialSearcher) SearchCredential(credentialType ssi.URI, issuer did.DID, subject *ssi.URI) ([]vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCredential", credentialType, issuer, subject)
	ret0, _ := ret[0].([]vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCredential indicates an expected call of SearchCredential.
func (mr *MockCredentialSearcherMockRecorder) SearchCredential(credentialType, issuer, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCredential", reflect.TypeOf((*MockCredentialSearcher)(nil).SearchCredential), credentialType, issuer, subject)
}
