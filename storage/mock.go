// Code generated by MockGen. DO NOT EDIT.
// Source: storage/interface.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_stoabs "github.com/nuts-foundation/go-stoabs"
	core "github.com/nuts-foundation/nuts-node/core"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockEngine) Configure(config core.ServerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockEngineMockRecorder) Configure(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockEngine)(nil).Configure), config)
}

// GetProvider mocks base method.
func (m *MockEngine) GetProvider(moduleName string) Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider", moduleName)
	ret0, _ := ret[0].(Provider)
	return ret0
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockEngineMockRecorder) GetProvider(moduleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockEngine)(nil).GetProvider), moduleName)
}

// Shutdown mocks base method.
func (m *MockEngine) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockEngineMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockEngine)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockEngine) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEngineMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEngine)(nil).Start))
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetKVStore mocks base method.
func (m *MockProvider) GetKVStore(name string, class Class) (go_stoabs.KVStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKVStore", name, class)
	ret0, _ := ret[0].(go_stoabs.KVStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKVStore indicates an expected call of GetKVStore.
func (mr *MockProviderMockRecorder) GetKVStore(name, class interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKVStore", reflect.TypeOf((*MockProvider)(nil).GetKVStore), name, class)
}

// Mockdatabase is a mock of database interface.
type Mockdatabase struct {
	ctrl     *gomock.Controller
	recorder *MockdatabaseMockRecorder
}

// MockdatabaseMockRecorder is the mock recorder for Mockdatabase.
type MockdatabaseMockRecorder struct {
	mock *Mockdatabase
}

// NewMockdatabase creates a new mock instance.
func NewMockdatabase(ctrl *gomock.Controller) *Mockdatabase {
	mock := &Mockdatabase{ctrl: ctrl}
	mock.recorder = &MockdatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdatabase) EXPECT() *MockdatabaseMockRecorder {
	return m.recorder
}

// close mocks base method.
func (m *Mockdatabase) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MockdatabaseMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*Mockdatabase)(nil).close))
}

// createStore mocks base method.
func (m *Mockdatabase) createStore(moduleName, storeName string) (go_stoabs.KVStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createStore", moduleName, storeName)
	ret0, _ := ret[0].(go_stoabs.KVStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createStore indicates an expected call of createStore.
func (mr *MockdatabaseMockRecorder) createStore(moduleName, storeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createStore", reflect.TypeOf((*Mockdatabase)(nil).createStore), moduleName, storeName)
}

// getClass mocks base method.
func (m *Mockdatabase) getClass() Class {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getClass")
	ret0, _ := ret[0].(Class)
	return ret0
}

// getClass indicates an expected call of getClass.
func (mr *MockdatabaseMockRecorder) getClass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getClass", reflect.TypeOf((*Mockdatabase)(nil).getClass))
}
