package didx509

import (
	"crypto/sha1"
	"encoding/base64"
	"errors"
	"fmt"
	"github.com/minio/sha256-simd"
	"github.com/nuts-foundation/go-did/did"
	"github.com/nuts-foundation/nuts-node/pki"
	resolver2 "github.com/nuts-foundation/nuts-node/vdr/resolver"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.uber.org/mock/gomock"
	"testing"
)

func TestManager_Resolve(t *testing.T) {
	ctrl := gomock.NewController(t)
	validator := pki.NewMockValidator(ctrl)
	resolver := NewResolver(validator)
	metadata := resolver2.ResolveMetadata{}

	otherNameValue := "A_BIG_STRING"
	_, certChain, rootCertificate, _, signingCert, err := BuildCertChain(otherNameValue)
	require.NoError(t, err)
	metadata.X509CertChain = certChain
	metadata.X509CertThumbprint = sha1Sum(signingCert.Raw)
	metadata.X509CertThumbprintS256 = sha256Sum(signingCert.Raw)

	rootDID := did.MustParseDID(fmt.Sprintf("did:x509:0:%s:%s::san:otherName:%s", "sha256", sha256Sum(rootCertificate.Raw), otherNameValue))

	t.Run("test nulls", func(t *testing.T) {
		chain := metadata.X509CertChain
		metadata.X509CertChain = nil
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), errors.New("x509 rootCert chain is missing").Error())
		metadata.X509CertChain = chain

	})
	t.Run("happy flow", func(t *testing.T) {
		validator.EXPECT().Validate(gomock.Any()).Return(nil)
		resolve, documentMetadata, err := resolver.Resolve(rootDID, &metadata)
		require.NoError(t, err)
		assert.NotNil(t, resolve)
		assert.NotNil(t, documentMetadata)
	})
	t.Run("happy flow 2", func(t *testing.T) {
		metadata.X509CertThumbprintS256 = ""
		validator.EXPECT().Validate(gomock.Any()).Return(nil)
		resolve, documentMetadata, err := resolver.Resolve(rootDID, &metadata)
		require.NoError(t, err)
		assert.NotNil(t, resolve)
		assert.NotNil(t, documentMetadata)
		metadata.X509CertThumbprintS256 = sha256Sum(signingCert.Raw)
	})
	t.Run("happy flow 2", func(t *testing.T) {
		metadata.X509CertThumbprint = ""
		validator.EXPECT().Validate(gomock.Any()).Return(nil)
		resolve, documentMetadata, err := resolver.Resolve(rootDID, &metadata)
		require.NoError(t, err)
		assert.NotNil(t, resolve)
		assert.NotNil(t, documentMetadata)
		metadata.X509CertThumbprint = sha1Sum(signingCert.Raw)
	})
	t.Run("broken chain", func(t *testing.T) {
		expectedErr := errors.New("broken chain")
		validator.EXPECT().Validate(gomock.Any()).Return(expectedErr)
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), expectedErr.Error())
	})
	t.Run("wrong otherName value", func(t *testing.T) {
		rootDID := did.MustParseDID(fmt.Sprintf("did:x509:0:%s:%s::san:otherName:%s", "sha256", sha256Sum(rootCertificate.Raw), "ANOTHER_BIG_STRING"))
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), ErrWrongSanOtherName.Error())
	})
	t.Run("wrong hash type value", func(t *testing.T) {
		rootDID := did.MustParseDID(fmt.Sprintf("did:x509:0:%s:%s::san:otherName:%s", "kaas", sha256Sum(rootCertificate.Raw), "ANOTHER_BIG_STRING"))
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), errors.New("unsupported hash algorithm: kaas").Error())
	})
	t.Run("wrong hash value", func(t *testing.T) {
		rootDID := did.MustParseDID(fmt.Sprintf("did:x509:0:%s:%s::san:otherName:%s", "sha256", "kaas", "ANOTHER_BIG_STRING"))
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), errors.New("cannot find a certificate with alg: sha256 hash: kaas").Error())
	})
	t.Run("wrong DID type", func(t *testing.T) {
		rootDID := did.MustParseDID("did:kaas:gouda.nl:jonge")
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), fmt.Errorf("unsupported DID method: %s", "kaas").Error())
	})
	t.Run("wrong x509 did version", func(t *testing.T) {
		rootDID := did.MustParseDID(fmt.Sprintf("did:x509:1:%s:%s::san:otherName:%s", "sha256", sha256Sum(rootCertificate.Raw), "ANOTHER_BIG_STRING"))
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), ErrDidVersion.Error())
	})
	t.Run("missing x509 did version", func(t *testing.T) {
		rootDID := did.MustParseDID(fmt.Sprintf("did:x509:%s:%s::san:otherName:%s", "sha256Sum", sha256Sum(rootCertificate.Raw), "ANOTHER_BIG_STRING"))
		_, _, err := resolver.Resolve(rootDID, &metadata)
		require.Error(t, err)
		assert.Equal(t, err.Error(), ErrDidMalformed.Error())
	})
}

func sha1Sum(raw []byte) string {
	sum := sha1.Sum(raw)
	return base64.RawURLEncoding.EncodeToString(sum[:])
}

func sha256Sum(bytes []byte) string {
	rootHash := sha256.Sum256(bytes)
	rootHashStr := base64.RawURLEncoding.EncodeToString(rootHash[:])
	return rootHashStr
}

const CREDENTIAL = `.eyJleHAiOjQ4ODIyMzAxMjAsImlzcyI6ImRpZDp4NTA5OjA6c2hhNTEyOjV3Z05uUnFpMkVCNGNJZzRhczZPUWZJd19CVHk3SUd5VHlXYlR4THlpdTduZ05PVkNqSUNDSzNxX1pwYWthV3JOV0N0QUM5WkF6ZXNtcklUNTFLY2RBOjpzYW46b3RoZXJOYW1lOjIuMTYuNTI4LjEuMTAwNy45OS4yMTEwLTEtOTAwMDMwNzg3LVMtOTAwMDAzODAtMDAuMDAwLTExMjIzMzQ0IiwianRpIjoiZDZiYjFmYjEtZjQzMC00M2QwLWIyYjAtMWQ5MTg5ODA3MjgxIiwibmJmIjoxNzI4NjMwMTIwLCJzdWIiOiJkaWQ6d2ViOnRlc3QuY29tOngiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJjcmVkZW50aWFsU3ViamVjdCI6W3siaWQiOiJkaWQ6d2ViOnRlc3QuY29tOngiLCJuYW1lIjoiS2xhYXMgdmFhayIsIm90aGVyTmFtZSI6IjIuMTYuNTI4LjEuMTAwNy45OS4yMTEwLTEtOTAwMDMwNzg3LVMtOTAwMDAzODAtMDAuMDAwLTExMjIzMzQ0IiwidXJhTnVtYmVyIjoiOTAwMDAzODAiLCJ1emlOdW1iZXIiOiI5MDAwMzA3ODcifV0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVemlTZXJ2ZXJDZXJ0aWZpY2F0ZUNyZWRlbnRpYWwiXX19.H0qwWR8Ea4K9aGKsEUuTKup2gzzwnuWD9gLCHRpUTp6zUTbBjFUfoaQTZFo8RL39aHQaHgPqG305weTR1FnVyGSWnX_JuM9wYgq0akkEcUUQ-6vDunPa5Fv1LyCpWgfZ-wq0HqXlhPNdoGqxMibq1YEYctXfpaTf8EAv2fu8v3oRLIRBwtZoosChXSHoxIOls9RK-MyqvPfImY1nuu6Q56OblHV5CokKb6-1RgagT6g_sCtaZmnDoYhqsfvemyWyb_bz2y0u6H3yjY-xMF5IC9tfu4uSNIZce06xQP9DY_MX_K7Al4d37i0cMpP1qHTe_yxx9hvbowVa2aWirMdhwVXocWVaXkwgyUxF1pHujj--AG_Iqj6ksMloBmsa-7qi7wGSKfgd4mTa0oudARLRHfoPgp_djAb6VpP0D5PxSxXjEvcctHeSK9wlWs6CeSXMs5eGr-mkCPW-icpSKXJ8gHtArh3wJLbTQ-OACHz76anNMsKC_2t_khFldSqQPWBdJ3d5trr4kfUWiuCDFd4hdouOg2Fr2MZEIwZtlXoNm4PFdU-ciXZNr4Ol3eMnQpMRQQPMNMjhAs9rwBFUtPjQidOavdbrTQvPppoxN0l_0ox_srL6YuL9Kk1zPBsA1UK0at8erdOQdzASpsWdfA_hrlhW6n4oci4kIiWD92Vcreo`
