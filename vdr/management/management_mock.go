// Code generated by MockGen. DO NOT EDIT.
// Source: vdr/management/management.go
//
// Generated by this command:
//
//	mockgen -destination=vdr/management/management_mock.go -package=management -source=vdr/management/management.go
//

// Package management is a generated GoMock package.
package management

import (
	context "context"
	reflect "reflect"

	ssi "github.com/nuts-foundation/go-did"
	did "github.com/nuts-foundation/go-did/did"
	crypto "github.com/nuts-foundation/nuts-node/crypto"
	resolver "github.com/nuts-foundation/nuts-node/vdr/resolver"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentManager is a mock of DocumentManager interface.
type MockDocumentManager struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentManagerMockRecorder
}

// MockDocumentManagerMockRecorder is the mock recorder for MockDocumentManager.
type MockDocumentManagerMockRecorder struct {
	mock *MockDocumentManager
}

// NewMockDocumentManager creates a new mock instance.
func NewMockDocumentManager(ctrl *gomock.Controller) *MockDocumentManager {
	mock := &MockDocumentManager{ctrl: ctrl}
	mock.recorder = &MockDocumentManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentManager) EXPECT() *MockDocumentManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocumentManager) Create(ctx context.Context, options CreationOptions) (*did.Document, crypto.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, options)
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(crypto.Key)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDocumentManagerMockRecorder) Create(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentManager)(nil).Create), ctx, options)
}

// CreateService mocks base method.
func (m *MockDocumentManager) CreateService(ctx context.Context, subjectDID did.DID, service did.Service) (*did.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, subjectDID, service)
	ret0, _ := ret[0].(*did.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockDocumentManagerMockRecorder) CreateService(ctx, subjectDID, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockDocumentManager)(nil).CreateService), ctx, subjectDID, service)
}

// Deactivate mocks base method.
func (m *MockDocumentManager) Deactivate(ctx context.Context, id did.DID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockDocumentManagerMockRecorder) Deactivate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockDocumentManager)(nil).Deactivate), ctx, id)
}

// DeleteService mocks base method.
func (m *MockDocumentManager) DeleteService(ctx context.Context, subjectDID did.DID, serviceID ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, subjectDID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockDocumentManagerMockRecorder) DeleteService(ctx, subjectDID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockDocumentManager)(nil).DeleteService), ctx, subjectDID, serviceID)
}

// IsOwner mocks base method.
func (m *MockDocumentManager) IsOwner(arg0 context.Context, arg1 did.DID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockDocumentManagerMockRecorder) IsOwner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockDocumentManager)(nil).IsOwner), arg0, arg1)
}

// ListOwned mocks base method.
func (m *MockDocumentManager) ListOwned(ctx context.Context) ([]did.DID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOwned", ctx)
	ret0, _ := ret[0].([]did.DID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwned indicates an expected call of ListOwned.
func (mr *MockDocumentManagerMockRecorder) ListOwned(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwned", reflect.TypeOf((*MockDocumentManager)(nil).ListOwned), ctx)
}

// Resolve mocks base method.
func (m *MockDocumentManager) Resolve(id did.DID, metadata *resolver.ResolveMetadata) (*did.Document, *resolver.DocumentMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", id, metadata)
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(*resolver.DocumentMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resolve indicates an expected call of Resolve.
func (mr *MockDocumentManagerMockRecorder) Resolve(id, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockDocumentManager)(nil).Resolve), id, metadata)
}

// UpdateService mocks base method.
func (m *MockDocumentManager) UpdateService(ctx context.Context, subjectDID did.DID, serviceID ssi.URI, service did.Service) (*did.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, subjectDID, serviceID, service)
	ret0, _ := ret[0].(*did.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockDocumentManagerMockRecorder) UpdateService(ctx, subjectDID, serviceID, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockDocumentManager)(nil).UpdateService), ctx, subjectDID, serviceID, service)
}

// MockDocCreator is a mock of DocCreator interface.
type MockDocCreator struct {
	ctrl     *gomock.Controller
	recorder *MockDocCreatorMockRecorder
}

// MockDocCreatorMockRecorder is the mock recorder for MockDocCreator.
type MockDocCreatorMockRecorder struct {
	mock *MockDocCreator
}

// NewMockDocCreator creates a new mock instance.
func NewMockDocCreator(ctrl *gomock.Controller) *MockDocCreator {
	mock := &MockDocCreator{ctrl: ctrl}
	mock.recorder = &MockDocCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocCreator) EXPECT() *MockDocCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocCreator) Create(ctx context.Context, options CreationOptions) (*did.Document, crypto.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, options)
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(crypto.Key)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDocCreatorMockRecorder) Create(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocCreator)(nil).Create), ctx, options)
}

// MockDocUpdater is a mock of DocUpdater interface.
type MockDocUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDocUpdaterMockRecorder
}

// MockDocUpdaterMockRecorder is the mock recorder for MockDocUpdater.
type MockDocUpdaterMockRecorder struct {
	mock *MockDocUpdater
}

// NewMockDocUpdater creates a new mock instance.
func NewMockDocUpdater(ctrl *gomock.Controller) *MockDocUpdater {
	mock := &MockDocUpdater{ctrl: ctrl}
	mock.recorder = &MockDocUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocUpdater) EXPECT() *MockDocUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockDocUpdater) Update(ctx context.Context, id did.DID, next did.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, next)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDocUpdaterMockRecorder) Update(ctx, id, next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDocUpdater)(nil).Update), ctx, id, next)
}

// MockDocManipulator is a mock of DocManipulator interface.
type MockDocManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockDocManipulatorMockRecorder
}

// MockDocManipulatorMockRecorder is the mock recorder for MockDocManipulator.
type MockDocManipulatorMockRecorder struct {
	mock *MockDocManipulator
}

// NewMockDocManipulator creates a new mock instance.
func NewMockDocManipulator(ctrl *gomock.Controller) *MockDocManipulator {
	mock := &MockDocManipulator{ctrl: ctrl}
	mock.recorder = &MockDocManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocManipulator) EXPECT() *MockDocManipulatorMockRecorder {
	return m.recorder
}

// AddVerificationMethod mocks base method.
func (m *MockDocManipulator) AddVerificationMethod(ctx context.Context, id did.DID, keyUsage DIDKeyFlags) (*did.VerificationMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVerificationMethod", ctx, id, keyUsage)
	ret0, _ := ret[0].(*did.VerificationMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVerificationMethod indicates an expected call of AddVerificationMethod.
func (mr *MockDocManipulatorMockRecorder) AddVerificationMethod(ctx, id, keyUsage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVerificationMethod", reflect.TypeOf((*MockDocManipulator)(nil).AddVerificationMethod), ctx, id, keyUsage)
}

// CreateService mocks base method.
func (m *MockDocManipulator) CreateService(ctx context.Context, subjectDID did.DID, service did.Service) (*did.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, subjectDID, service)
	ret0, _ := ret[0].(*did.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockDocManipulatorMockRecorder) CreateService(ctx, subjectDID, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockDocManipulator)(nil).CreateService), ctx, subjectDID, service)
}

// Deactivate mocks base method.
func (m *MockDocManipulator) Deactivate(ctx context.Context, id did.DID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockDocManipulatorMockRecorder) Deactivate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockDocManipulator)(nil).Deactivate), ctx, id)
}

// DeleteService mocks base method.
func (m *MockDocManipulator) DeleteService(ctx context.Context, subjectDID did.DID, serviceID ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, subjectDID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockDocManipulatorMockRecorder) DeleteService(ctx, subjectDID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockDocManipulator)(nil).DeleteService), ctx, subjectDID, serviceID)
}

// RemoveVerificationMethod mocks base method.
func (m *MockDocManipulator) RemoveVerificationMethod(ctx context.Context, id did.DID, keyID did.DIDURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVerificationMethod", ctx, id, keyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVerificationMethod indicates an expected call of RemoveVerificationMethod.
func (mr *MockDocManipulatorMockRecorder) RemoveVerificationMethod(ctx, id, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVerificationMethod", reflect.TypeOf((*MockDocManipulator)(nil).RemoveVerificationMethod), ctx, id, keyID)
}

// UpdateService mocks base method.
func (m *MockDocManipulator) UpdateService(ctx context.Context, subjectDID did.DID, serviceID ssi.URI, service did.Service) (*did.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, subjectDID, serviceID, service)
	ret0, _ := ret[0].(*did.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockDocManipulatorMockRecorder) UpdateService(ctx, subjectDID, serviceID, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockDocManipulator)(nil).UpdateService), ctx, subjectDID, serviceID, service)
}

// MockCreationOptions is a mock of CreationOptions interface.
type MockCreationOptions struct {
	ctrl     *gomock.Controller
	recorder *MockCreationOptionsMockRecorder
}

// MockCreationOptionsMockRecorder is the mock recorder for MockCreationOptions.
type MockCreationOptionsMockRecorder struct {
	mock *MockCreationOptions
}

// NewMockCreationOptions creates a new mock instance.
func NewMockCreationOptions(ctrl *gomock.Controller) *MockCreationOptions {
	mock := &MockCreationOptions{ctrl: ctrl}
	mock.recorder = &MockCreationOptionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreationOptions) EXPECT() *MockCreationOptionsMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockCreationOptions) All() []CreationOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]CreationOption)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockCreationOptionsMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCreationOptions)(nil).All))
}

// Method mocks base method.
func (m *MockCreationOptions) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method.
func (mr *MockCreationOptionsMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockCreationOptions)(nil).Method))
}

// With mocks base method.
func (m *MockCreationOptions) With(option CreationOption) CreationOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", option)
	ret0, _ := ret[0].(CreationOptions)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockCreationOptionsMockRecorder) With(option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockCreationOptions)(nil).With), option)
}

// MockCreationOption is a mock of CreationOption interface.
type MockCreationOption struct {
	ctrl     *gomock.Controller
	recorder *MockCreationOptionMockRecorder
}

// MockCreationOptionMockRecorder is the mock recorder for MockCreationOption.
type MockCreationOptionMockRecorder struct {
	mock *MockCreationOption
}

// NewMockCreationOption creates a new mock instance.
func NewMockCreationOption(ctrl *gomock.Controller) *MockCreationOption {
	mock := &MockCreationOption{ctrl: ctrl}
	mock.recorder = &MockCreationOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreationOption) EXPECT() *MockCreationOptionMockRecorder {
	return m.recorder
}

// MockDocumentOwner is a mock of DocumentOwner interface.
type MockDocumentOwner struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentOwnerMockRecorder
}

// MockDocumentOwnerMockRecorder is the mock recorder for MockDocumentOwner.
type MockDocumentOwnerMockRecorder struct {
	mock *MockDocumentOwner
}

// NewMockDocumentOwner creates a new mock instance.
func NewMockDocumentOwner(ctrl *gomock.Controller) *MockDocumentOwner {
	mock := &MockDocumentOwner{ctrl: ctrl}
	mock.recorder = &MockDocumentOwnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentOwner) EXPECT() *MockDocumentOwnerMockRecorder {
	return m.recorder
}

// IsOwner mocks base method.
func (m *MockDocumentOwner) IsOwner(arg0 context.Context, arg1 did.DID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockDocumentOwnerMockRecorder) IsOwner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockDocumentOwner)(nil).IsOwner), arg0, arg1)
}

// ListOwned mocks base method.
func (m *MockDocumentOwner) ListOwned(ctx context.Context) ([]did.DID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOwned", ctx)
	ret0, _ := ret[0].([]did.DID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwned indicates an expected call of ListOwned.
func (mr *MockDocumentOwnerMockRecorder) ListOwned(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwned", reflect.TypeOf((*MockDocumentOwner)(nil).ListOwned), ctx)
}
