// Code generated by MockGen. DO NOT EDIT.
// Source: vdr/resolver/key.go
//
// Generated by this command:
//
//	mockgen -destination=vdr/resolver/key_mock.go -package=resolver -source=vdr/resolver/key.go
//

// Package resolver is a generated GoMock package.
package resolver

import (
	crypto "crypto"
	reflect "reflect"
	time "time"

	ssi "github.com/nuts-foundation/go-did"
	did "github.com/nuts-foundation/go-did/did"
	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyResolver is a mock of KeyResolver interface.
type MockKeyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockKeyResolverMockRecorder
}

// MockKeyResolverMockRecorder is the mock recorder for MockKeyResolver.
type MockKeyResolverMockRecorder struct {
	mock *MockKeyResolver
}

// NewMockKeyResolver creates a new mock instance.
func NewMockKeyResolver(ctrl *gomock.Controller) *MockKeyResolver {
	mock := &MockKeyResolver{ctrl: ctrl}
	mock.recorder = &MockKeyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyResolver) EXPECT() *MockKeyResolverMockRecorder {
	return m.recorder
}

// ResolveKey mocks base method.
func (m *MockKeyResolver) ResolveKey(id did.DID, validAt *time.Time, relationType RelationType) (ssi.URI, crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveKey", id, validAt, relationType)
	ret0, _ := ret[0].(ssi.URI)
	ret1, _ := ret[1].(crypto.PublicKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveKey indicates an expected call of ResolveKey.
func (mr *MockKeyResolverMockRecorder) ResolveKey(id, validAt, relationType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveKey", reflect.TypeOf((*MockKeyResolver)(nil).ResolveKey), id, validAt, relationType)
}

// ResolveKeyByID mocks base method.
func (m *MockKeyResolver) ResolveKeyByID(keyID string, validAt *time.Time, relationType RelationType) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveKeyByID", keyID, validAt, relationType)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveKeyByID indicates an expected call of ResolveKeyByID.
func (mr *MockKeyResolverMockRecorder) ResolveKeyByID(keyID, validAt, relationType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveKeyByID", reflect.TypeOf((*MockKeyResolver)(nil).ResolveKeyByID), keyID, validAt, relationType)
}

// MockNutsKeyResolver is a mock of NutsKeyResolver interface.
type MockNutsKeyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNutsKeyResolverMockRecorder
}

// MockNutsKeyResolverMockRecorder is the mock recorder for MockNutsKeyResolver.
type MockNutsKeyResolverMockRecorder struct {
	mock *MockNutsKeyResolver
}

// NewMockNutsKeyResolver creates a new mock instance.
func NewMockNutsKeyResolver(ctrl *gomock.Controller) *MockNutsKeyResolver {
	mock := &MockNutsKeyResolver{ctrl: ctrl}
	mock.recorder = &MockNutsKeyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNutsKeyResolver) EXPECT() *MockNutsKeyResolverMockRecorder {
	return m.recorder
}

// ResolvePublicKey mocks base method.
func (m *MockNutsKeyResolver) ResolvePublicKey(kid string, sourceTransactionsRefs []hash.SHA256Hash) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePublicKey", kid, sourceTransactionsRefs)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolvePublicKey indicates an expected call of ResolvePublicKey.
func (mr *MockNutsKeyResolverMockRecorder) ResolvePublicKey(kid, sourceTransactionsRefs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePublicKey", reflect.TypeOf((*MockNutsKeyResolver)(nil).ResolvePublicKey), kid, sourceTransactionsRefs)
}
