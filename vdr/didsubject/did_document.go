/*
 * Copyright (C) 2024 Nuts community
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

package didsubject

import (
	"encoding/json"
	"errors"
	"github.com/google/uuid"
	ssi "github.com/nuts-foundation/go-did"
	"github.com/nuts-foundation/go-did/did"
	"github.com/nuts-foundation/nuts-node/jsonld"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
	"time"
)

// DIDDocument is the gorm representation of the did_document_version table
type DIDDocument struct {
	ID        string `gorm:"primaryKey"`
	DidID     string `gorm:"column:did"`
	DID       DID    `gorm:"foreignKey:DidID;references:ID"`
	CreatedAt int64  `gorm:"autoCreateTime:false"`
	// UpdatedAt is the (unix) timestamp when the document was updated (and this version was thus created)
	// Also used to purge DID document changes that haven't been committed within a certain time frame
	UpdatedAt           int64 `gorm:"autoUpdateTime:false"`
	Version             int
	VerificationMethods []VerificationMethod `gorm:"foreignKey:DIDDocumentID;references:ID"`
	Services            []SqlService         `gorm:"foreignKey:DIDDocumentID;references:ID"`
	// Raw contains the DID Document as generated by the specific method, important for hashing.
	Raw string
}

func (d DIDDocument) TableName() string {
	return "did_document_version"
}

var _ DIDDocumentManager = (*SqlDIDDocumentManager)(nil)
var _ schema.Tabler = (*DID)(nil)

// DIDDocumentManager is the interface to change data for the did_document table
type DIDDocumentManager interface {
	// CreateOrUpdate adds a new version of a DID document, starts at 1
	// If the DID does not exist yet, it will be created
	// It adds all verification methods, services, alsoKnownAs to the DID document
	// Not passing any verification methods will create an empty DID document, deactivation checking should be done by the caller
	CreateOrUpdate(did DID, verificationMethods []VerificationMethod, services []SqlService) (*DIDDocument, error)
	// Latest returns the latest version of a DID document
	// if notAfter is given, it will return the latest version before that time
	Latest(did did.DID, notAfter *time.Time) (*DIDDocument, error)
}

// SqlDIDDocumentManager is the implementation of the DIDDocumentManager interface
type SqlDIDDocumentManager struct {
	tx *gorm.DB
}

// NewDIDDocumentManager creates a new DIDDocumentManager for an open transaction
func NewDIDDocumentManager(tx *gorm.DB) *SqlDIDDocumentManager {
	return &SqlDIDDocumentManager{tx: tx}
}

func (s *SqlDIDDocumentManager) CreateOrUpdate(did DID, verificationMethods []VerificationMethod, services []SqlService) (*DIDDocument, error) {
	latest := DIDDocument{}
	err := s.tx.Preload("DID").Where("did = ?", did.ID).Order("version desc").First(&latest).Error
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	version := latest.Version + 1
	id := uuid.New().String()
	// update DIDDocumentID for all VMs and services
	for i := range verificationMethods {
		verificationMethods[i].DIDDocumentID = id
	}
	for i := range services {
		services[i].DIDDocumentID = id
	}
	now := time.Now().Unix()
	doc := DIDDocument{
		ID:                  id,
		DID:                 did,
		CreatedAt:           latest.CreatedAt,
		UpdatedAt:           now,
		Version:             version,
		VerificationMethods: verificationMethods,
		Services:            services,
	}
	// for future generations
	didDoc, _ := doc.generateDIDDocument()
	asJson, _ := json.Marshal(didDoc)
	doc.Raw = string(asJson)

	err = s.tx.Create(&doc).Error
	return &doc, err
}

func (s *SqlDIDDocumentManager) Latest(did did.DID, resolveTime *time.Time) (*DIDDocument, error) {
	doc := DIDDocument{}
	notAfter := time.Now().Add(time.Hour).Unix()
	if resolveTime != nil {
		notAfter = resolveTime.Unix()
	}
	err := s.tx.Preload("DID").Preload("DID.Aka").Preload("Services").Preload("VerificationMethods").Where("did = ? AND updated_at <= ?", did.String(), notAfter).Order("version desc").First(&doc).Error
	if err != nil {
		return nil, err
	}
	return &doc, err
}

func (sqlDoc DIDDocument) ToDIDDocument() (did.Document, error) {
	if len(sqlDoc.Raw) > 0 {
		document := did.Document{}
		err := json.Unmarshal([]byte(sqlDoc.Raw), &document)
		if err != nil {
			return did.Document{}, err
		}
		return document, nil
	}
	return sqlDoc.generateDIDDocument()
}

func (sqlDoc DIDDocument) generateDIDDocument() (did.Document, error) {
	id, _ := did.ParseDID(sqlDoc.DID.ID)
	others := make([]ssi.URI, 0)
	for _, alias := range sqlDoc.DID.Aka {
		uri, err := ssi.ParseURI(alias.ID)
		if err != nil {
			return did.Document{}, err
		}
		if id.String() != uri.String() {
			others = append(others, *uri)
		}
	}
	document := did.Document{
		AlsoKnownAs: others,
		Context: []interface{}{
			jsonld.JWS2020ContextV1URI(), did.DIDContextV1URI(),
		},
		ID: *id,
	}
	for _, sqlVM := range sqlDoc.VerificationMethods {
		verificationMethod := did.VerificationMethod{}
		err := json.Unmarshal(sqlVM.Data, &verificationMethod)
		if err != nil {
			return document, err
		}

		if AssertionMethodUsage.Is(DIDKeyFlags(sqlVM.KeyTypes)) {
			document.AddAssertionMethod(&verificationMethod)
		}
		if AuthenticationUsage.Is(DIDKeyFlags(sqlVM.KeyTypes)) {
			document.AddAuthenticationMethod(&verificationMethod)
		}
		if KeyAgreementUsage.Is(DIDKeyFlags(sqlVM.KeyTypes)) {
			document.AddKeyAgreement(&verificationMethod)
		}
		if CapabilityDelegationUsage.Is(DIDKeyFlags(sqlVM.KeyTypes)) {
			document.AddCapabilityDelegation(&verificationMethod)
		}
		if CapabilityInvocationUsage.Is(DIDKeyFlags(sqlVM.KeyTypes)) {
			document.AddCapabilityInvocation(&verificationMethod)
		}
	}
	for _, sqlService := range sqlDoc.Services {
		service := did.Service{}
		err := json.Unmarshal(sqlService.Data, &service)
		if err != nil {
			return document, err
		}
		document.Service = append(document.Service, service)
	}

	return document, nil
}
