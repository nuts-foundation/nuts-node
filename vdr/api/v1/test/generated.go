// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

const (
	JwtBearerAuthScopes = "jwtBearerAuth.Scopes"
)

// DIDCreateRequest defines model for DIDCreateRequest.
type DIDCreateRequest struct {
	// indicates if the generated key pair can be used for assertions.
	AssertionMethod *bool `json:"assertionMethod,omitempty"`

	// indicates if the generated key pair can be used for authentication.
	Authentication *bool `json:"authentication,omitempty"`

	// indicates if the generated key pair can be used for capability delegations.
	CapabilityDelegation *bool `json:"capabilityDelegation,omitempty"`

	// indicates if the generated key pair can be used for altering DID Documents.
	// In combination with selfControl = true, the key can be used to alter the new DID Document.
	// Defaults to true when not given.
	// default: true
	CapabilityInvocation *bool `json:"capabilityInvocation,omitempty"`

	// List of DIDs that can control the new DID Document. If selfControl = true and controllers is not empty,
	// the newly generated DID will be added to the list of controllers.
	Controllers *[]string `json:"controllers,omitempty"`

	// indicates if the generated key pair can be used for Key agreements.
	KeyAgreement *bool `json:"keyAgreement,omitempty"`

	// whether the generated DID Document can be altered with its own capabilityInvocation key.
	SelfControl *bool `json:"selfControl,omitempty"`
}

// A DID document according to the W3C spec following the Nuts Method rules as defined in [Nuts RFC006]
type DIDDocument struct {
	// The JSON-LD contexts that define the types used in this document. Can be a single string, or a list of strings.
	Context interface{} `json:"@context"`

	// List of KIDs that may sign JWTs, JWSs and VCs
	AssertionMethod *[]string `json:"assertionMethod,omitempty"`

	// List of KIDs that may alter DID documents that they control
	Authentication *[]string `json:"authentication,omitempty"`

	// List of KIDs that can be used to delegate capabilities that can be invoked using the DID document.
	CapabilityDelegation *[]string `json:"capabilityDelegation,omitempty"`

	// List of KIDs that can be used for signing
	CapabilityInvocation *[]string `json:"capabilityInvocation,omitempty"`

	// Single DID (as string) or List of DIDs that have control over the DID document
	Controller *interface{} `json:"controller,omitempty"`

	// DID according to Nuts specification
	Id string `json:"id"`

	// List of KIDs that can be used for encryption
	KeyAgreement *[]string `json:"keyAgreement,omitempty"`

	// List of supported services by the DID subject
	Service *[]Service `json:"service,omitempty"`

	// list of keys
	VerificationMethod *[]VerificationMethod `json:"verificationMethod,omitempty"`
}

// The DID document metadata.
type DIDDocumentMetadata struct {
	// Time when DID document was created in rfc3339 form.
	Created string `json:"created"`

	// Whether the DID document has been deactivated.
	Deactivated bool `json:"deactivated"`

	// Sha256 in hex form of the DID document contents.
	Hash string `json:"hash"`

	// Sha256 in hex form of the previous version of this DID document.
	PreviousHash *string `json:"previousHash,omitempty"`

	// txs lists the transaction(s) that created the current version of this DID Document.
	// If multiple transactions are listed, the DID Document is conflicted
	Txs []string `json:"txs"`

	// Time when DID document was updated in rfc3339 form.
	Updated *string `json:"updated,omitempty"`
}

// DIDResolutionResult defines model for DIDResolutionResult.
type DIDResolutionResult struct {
	// A DID document according to the W3C spec following the Nuts Method rules as defined in [Nuts RFC006]
	Document DIDDocument `json:"document"`

	// The DID document metadata.
	DocumentMetadata DIDDocumentMetadata `json:"documentMetadata"`
}

// DIDUpdateRequest defines model for DIDUpdateRequest.
type DIDUpdateRequest struct {
	// The hash of the document in hex format.
	CurrentHash string `json:"currentHash"`

	// A DID document according to the W3C spec following the Nuts Method rules as defined in [Nuts RFC006]
	Document DIDDocument `json:"document"`
}

// A service supported by a DID subject.
type Service struct {
	// ID of the service.
	Id string `json:"id"`

	// Either a URI or a complex object.
	ServiceEndpoint interface{} `json:"serviceEndpoint"`

	// The type of the endpoint.
	Type string `json:"type"`
}

// A public key in JWK form.
type VerificationMethod struct {
	// The DID subject this key belongs to.
	Controller string `json:"controller"`

	// The ID of the key, used as KID in various JWX technologies.
	Id string `json:"id"`

	// The public key formatted according rfc7517.
	PublicKeyJwk map[string]interface{} `json:"publicKeyJwk"`

	// The type of the key.
	Type string `json:"type"`
}

// CreateDIDJSONBody defines parameters for CreateDID.
type CreateDIDJSONBody = DIDCreateRequest

// GetDIDParams defines parameters for GetDID.
type GetDIDParams struct {
	// If a versionId parameter is provided, the DID resolution algorithm returns a specific version of the DID document.
	// The version is the Sha256 hash of the document.
	// The DID parameters versionId and versionTime are mutually exclusive.
	//
	// See [the did resolution spec about versioning](https://w3c-ccg.github.io/did-resolution/#versioning)
	VersionId *string `form:"versionId,omitempty" json:"versionId,omitempty"`

	// If a versionTime parameter is provided, the DID resolution algorithm returns a specific version of the DID document.
	// The DID parameters versionId and versionTime are mutually exclusive.
	//
	// See [the did resolution spec about versioning](https://w3c-ccg.github.io/did-resolution/#versioning)
	VersionTime *string `form:"versionTime,omitempty" json:"versionTime,omitempty"`
}

// UpdateDIDJSONBody defines parameters for UpdateDID.
type UpdateDIDJSONBody = DIDUpdateRequest

// CreateDIDJSONRequestBody defines body for CreateDID for application/json ContentType.
type CreateDIDJSONRequestBody = CreateDIDJSONBody

// UpdateDIDJSONRequestBody defines body for UpdateDID for application/json ContentType.
type UpdateDIDJSONRequestBody = UpdateDIDJSONBody
