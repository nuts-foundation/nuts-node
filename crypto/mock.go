// Code generated by MockGen. DO NOT EDIT.
// Source: crypto/interface.go

// Package crypto is a generated GoMock package.
package crypto

import (
	crypto "crypto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyCreator is a mock of KeyCreator interface.
type MockKeyCreator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyCreatorMockRecorder
}

// MockKeyCreatorMockRecorder is the mock recorder for MockKeyCreator.
type MockKeyCreatorMockRecorder struct {
	mock *MockKeyCreator
}

// NewMockKeyCreator creates a new mock instance.
func NewMockKeyCreator(ctrl *gomock.Controller) *MockKeyCreator {
	mock := &MockKeyCreator{ctrl: ctrl}
	mock.recorder = &MockKeyCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyCreator) EXPECT() *MockKeyCreatorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockKeyCreator) New(namingFunc KIDNamingFunc) (Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", namingFunc)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockKeyCreatorMockRecorder) New(namingFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockKeyCreator)(nil).New), namingFunc)
}

// MockKeyResolver is a mock of KeyResolver interface.
type MockKeyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockKeyResolverMockRecorder
}

// MockKeyResolverMockRecorder is the mock recorder for MockKeyResolver.
type MockKeyResolverMockRecorder struct {
	mock *MockKeyResolver
}

// NewMockKeyResolver creates a new mock instance.
func NewMockKeyResolver(ctrl *gomock.Controller) *MockKeyResolver {
	mock := &MockKeyResolver{ctrl: ctrl}
	mock.recorder = &MockKeyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyResolver) EXPECT() *MockKeyResolverMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockKeyResolver) Exists(kid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", kid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockKeyResolverMockRecorder) Exists(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockKeyResolver)(nil).Exists), kid)
}

// List mocks base method.
func (m *MockKeyResolver) List() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockKeyResolverMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeyResolver)(nil).List))
}

// Resolve mocks base method.
func (m *MockKeyResolver) Resolve(kid string) (Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", kid)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockKeyResolverMockRecorder) Resolve(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockKeyResolver)(nil).Resolve), kid)
}

// MockKeyStore is a mock of KeyStore interface.
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockKeyStore) Decrypt(kid string, ciphertext []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", kid, ciphertext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockKeyStoreMockRecorder) Decrypt(kid, ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKeyStore)(nil).Decrypt), kid, ciphertext)
}

// Exists mocks base method.
func (m *MockKeyStore) Exists(kid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", kid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockKeyStoreMockRecorder) Exists(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockKeyStore)(nil).Exists), kid)
}

// List mocks base method.
func (m *MockKeyStore) List() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockKeyStoreMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeyStore)(nil).List))
}

// New mocks base method.
func (m *MockKeyStore) New(namingFunc KIDNamingFunc) (Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", namingFunc)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockKeyStoreMockRecorder) New(namingFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockKeyStore)(nil).New), namingFunc)
}

// Resolve mocks base method.
func (m *MockKeyStore) Resolve(kid string) (Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", kid)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockKeyStoreMockRecorder) Resolve(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockKeyStore)(nil).Resolve), kid)
}

// SignJWS mocks base method.
func (m *MockKeyStore) SignJWS(payload []byte, headers map[string]interface{}, kid string, detached bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWS", payload, headers, kid, detached)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWS indicates an expected call of SignJWS.
func (mr *MockKeyStoreMockRecorder) SignJWS(payload, headers, kid, detached interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWS", reflect.TypeOf((*MockKeyStore)(nil).SignJWS), payload, headers, kid, detached)
}

// SignJWT mocks base method.
func (m *MockKeyStore) SignJWT(claims map[string]interface{}, kid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWT", claims, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWT indicates an expected call of SignJWT.
func (mr *MockKeyStoreMockRecorder) SignJWT(claims, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWT", reflect.TypeOf((*MockKeyStore)(nil).SignJWT), claims, kid)
}

// MockDecrypter is a mock of Decrypter interface.
type MockDecrypter struct {
	ctrl     *gomock.Controller
	recorder *MockDecrypterMockRecorder
}

// MockDecrypterMockRecorder is the mock recorder for MockDecrypter.
type MockDecrypterMockRecorder struct {
	mock *MockDecrypter
}

// NewMockDecrypter creates a new mock instance.
func NewMockDecrypter(ctrl *gomock.Controller) *MockDecrypter {
	mock := &MockDecrypter{ctrl: ctrl}
	mock.recorder = &MockDecrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecrypter) EXPECT() *MockDecrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDecrypter) Decrypt(kid string, ciphertext []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", kid, ciphertext)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecrypterMockRecorder) Decrypt(kid, ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecrypter)(nil).Decrypt), kid, ciphertext)
}

// MockJWTSigner is a mock of JWTSigner interface.
type MockJWTSigner struct {
	ctrl     *gomock.Controller
	recorder *MockJWTSignerMockRecorder
}

// MockJWTSignerMockRecorder is the mock recorder for MockJWTSigner.
type MockJWTSignerMockRecorder struct {
	mock *MockJWTSigner
}

// NewMockJWTSigner creates a new mock instance.
func NewMockJWTSigner(ctrl *gomock.Controller) *MockJWTSigner {
	mock := &MockJWTSigner{ctrl: ctrl}
	mock.recorder = &MockJWTSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTSigner) EXPECT() *MockJWTSignerMockRecorder {
	return m.recorder
}

// SignJWS mocks base method.
func (m *MockJWTSigner) SignJWS(payload []byte, headers map[string]interface{}, kid string, detached bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWS", payload, headers, kid, detached)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWS indicates an expected call of SignJWS.
func (mr *MockJWTSignerMockRecorder) SignJWS(payload, headers, kid, detached interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWS", reflect.TypeOf((*MockJWTSigner)(nil).SignJWS), payload, headers, kid, detached)
}

// SignJWT mocks base method.
func (m *MockJWTSigner) SignJWT(claims map[string]interface{}, kid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWT", claims, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWT indicates an expected call of SignJWT.
func (mr *MockJWTSignerMockRecorder) SignJWT(claims, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWT", reflect.TypeOf((*MockJWTSigner)(nil).SignJWT), claims, kid)
}

// MockKey is a mock of Key interface.
type MockKey struct {
	ctrl     *gomock.Controller
	recorder *MockKeyMockRecorder
}

// MockKeyMockRecorder is the mock recorder for MockKey.
type MockKeyMockRecorder struct {
	mock *MockKey
}

// NewMockKey creates a new mock instance.
func NewMockKey(ctrl *gomock.Controller) *MockKey {
	mock := &MockKey{ctrl: ctrl}
	mock.recorder = &MockKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKey) EXPECT() *MockKeyMockRecorder {
	return m.recorder
}

// KID mocks base method.
func (m *MockKey) KID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KID")
	ret0, _ := ret[0].(string)
	return ret0
}

// KID indicates an expected call of KID.
func (mr *MockKeyMockRecorder) KID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KID", reflect.TypeOf((*MockKey)(nil).KID))
}

// Public mocks base method.
func (m *MockKey) Public() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Public")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// Public indicates an expected call of Public.
func (mr *MockKeyMockRecorder) Public() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Public", reflect.TypeOf((*MockKey)(nil).Public))
}

// Signer mocks base method.
func (m *MockKey) Signer() crypto.Signer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signer")
	ret0, _ := ret[0].(crypto.Signer)
	return ret0
}

// Signer indicates an expected call of Signer.
func (mr *MockKeyMockRecorder) Signer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signer", reflect.TypeOf((*MockKey)(nil).Signer))
}
