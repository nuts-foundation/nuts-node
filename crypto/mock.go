// Code generated by MockGen. DO NOT EDIT.
// Source: crypto/interface.go

// Package crypto is a generated GoMock package.
package crypto

import (
	crypto "crypto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccessor is a mock of Accessor interface.
type MockAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAccessorMockRecorder
}

// MockAccessorMockRecorder is the mock recorder for MockAccessor.
type MockAccessorMockRecorder struct {
	mock *MockAccessor
}

// NewMockAccessor creates a new mock instance.
func NewMockAccessor(ctrl *gomock.Controller) *MockAccessor {
	mock := &MockAccessor{ctrl: ctrl}
	mock.recorder = &MockAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessor) EXPECT() *MockAccessorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockAccessor) New(namingFunc KIDNamingFunc) (crypto.PublicKey, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", namingFunc)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// New indicates an expected call of New.
func (mr *MockAccessorMockRecorder) New(namingFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockAccessor)(nil).New), namingFunc)
}

// PrivateKeyExists mocks base method.
func (m *MockAccessor) PrivateKeyExists(kid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKeyExists", kid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrivateKeyExists indicates an expected call of PrivateKeyExists.
func (mr *MockAccessorMockRecorder) PrivateKeyExists(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKeyExists", reflect.TypeOf((*MockAccessor)(nil).PrivateKeyExists), kid)
}

// SignJWS mocks base method.
func (m *MockAccessor) SignJWS(payload []byte, protectedHeaders map[string]interface{}, kid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWS", payload, protectedHeaders, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWS indicates an expected call of SignJWS.
func (mr *MockAccessorMockRecorder) SignJWS(payload, protectedHeaders, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWS", reflect.TypeOf((*MockAccessor)(nil).SignJWS), payload, protectedHeaders, kid)
}

// SignJWT mocks base method.
func (m *MockAccessor) SignJWT(claims map[string]interface{}, kid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWT", claims, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWT indicates an expected call of SignJWT.
func (mr *MockAccessorMockRecorder) SignJWT(claims, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWT", reflect.TypeOf((*MockAccessor)(nil).SignJWT), claims, kid)
}

// Signer mocks base method.
func (m *MockAccessor) Signer(kid string) (crypto.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signer", kid)
	ret0, _ := ret[0].(crypto.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signer indicates an expected call of Signer.
func (mr *MockAccessorMockRecorder) Signer(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signer", reflect.TypeOf((*MockAccessor)(nil).Signer), kid)
}

// MockJWSSigner is a mock of JWSSigner interface.
type MockJWSSigner struct {
	ctrl     *gomock.Controller
	recorder *MockJWSSignerMockRecorder
}

// MockJWSSignerMockRecorder is the mock recorder for MockJWSSigner.
type MockJWSSignerMockRecorder struct {
	mock *MockJWSSigner
}

// NewMockJWSSigner creates a new mock instance.
func NewMockJWSSigner(ctrl *gomock.Controller) *MockJWSSigner {
	mock := &MockJWSSigner{ctrl: ctrl}
	mock.recorder = &MockJWSSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWSSigner) EXPECT() *MockJWSSignerMockRecorder {
	return m.recorder
}

// SignJWS mocks base method.
func (m *MockJWSSigner) SignJWS(payload []byte, protectedHeaders map[string]interface{}, kid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWS", payload, protectedHeaders, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWS indicates an expected call of SignJWS.
func (mr *MockJWSSignerMockRecorder) SignJWS(payload, protectedHeaders, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWS", reflect.TypeOf((*MockJWSSigner)(nil).SignJWS), payload, protectedHeaders, kid)
}

// MockJWTSigner is a mock of JWTSigner interface.
type MockJWTSigner struct {
	ctrl     *gomock.Controller
	recorder *MockJWTSignerMockRecorder
}

// MockJWTSignerMockRecorder is the mock recorder for MockJWTSigner.
type MockJWTSignerMockRecorder struct {
	mock *MockJWTSigner
}

// NewMockJWTSigner creates a new mock instance.
func NewMockJWTSigner(ctrl *gomock.Controller) *MockJWTSigner {
	mock := &MockJWTSigner{ctrl: ctrl}
	mock.recorder = &MockJWTSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTSigner) EXPECT() *MockJWTSignerMockRecorder {
	return m.recorder
}

// SignJWT mocks base method.
func (m *MockJWTSigner) SignJWT(claims map[string]interface{}, kid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWT", claims, kid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWT indicates an expected call of SignJWT.
func (mr *MockJWTSignerMockRecorder) SignJWT(claims, kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWT", reflect.TypeOf((*MockJWTSigner)(nil).SignJWT), claims, kid)
}
