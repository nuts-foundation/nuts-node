// Code generated by MockGen. DO NOT EDIT.
// Source: crypto/storage/storage.go

// Package storage is a generated GoMock package.
package storage

import (
	crypto "crypto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetPrivateKey mocks base method.
func (m *MockStorage) GetPrivateKey(kid string) (crypto.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey", kid)
	ret0, _ := ret[0].(crypto.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockStorageMockRecorder) GetPrivateKey(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockStorage)(nil).GetPrivateKey), kid)
}

// ListPrivateKeys mocks base method.
func (m *MockStorage) ListPrivateKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListPrivateKeys indicates an expected call of ListPrivateKeys.
func (mr *MockStorageMockRecorder) ListPrivateKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateKeys", reflect.TypeOf((*MockStorage)(nil).ListPrivateKeys))
}

// PrivateKeyExists mocks base method.
func (m *MockStorage) PrivateKeyExists(kid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKeyExists", kid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrivateKeyExists indicates an expected call of PrivateKeyExists.
func (mr *MockStorageMockRecorder) PrivateKeyExists(kid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKeyExists", reflect.TypeOf((*MockStorage)(nil).PrivateKeyExists), kid)
}

// SavePrivateKey mocks base method.
func (m *MockStorage) SavePrivateKey(kid string, key crypto.PrivateKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePrivateKey", kid, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePrivateKey indicates an expected call of SavePrivateKey.
func (mr *MockStorageMockRecorder) SavePrivateKey(kid, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePrivateKey", reflect.TypeOf((*MockStorage)(nil).SavePrivateKey), kid, key)
}
