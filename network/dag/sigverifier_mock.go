// Code generated by MockGen. DO NOT EDIT.
// Source: network/dag/sigverifier.go

// Package dag is a generated GoMock package.
package dag

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionSignatureVerifier is a mock of TransactionSignatureVerifier interface.
type MockTransactionSignatureVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSignatureVerifierMockRecorder
}

// MockTransactionSignatureVerifierMockRecorder is the mock recorder for MockTransactionSignatureVerifier.
type MockTransactionSignatureVerifierMockRecorder struct {
	mock *MockTransactionSignatureVerifier
}

// NewMockTransactionSignatureVerifier creates a new mock instance.
func NewMockTransactionSignatureVerifier(ctrl *gomock.Controller) *MockTransactionSignatureVerifier {
	mock := &MockTransactionSignatureVerifier{ctrl: ctrl}
	mock.recorder = &MockTransactionSignatureVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionSignatureVerifier) EXPECT() *MockTransactionSignatureVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockTransactionSignatureVerifier) Verify(input Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockTransactionSignatureVerifierMockRecorder) Verify(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTransactionSignatureVerifier)(nil).Verify), input)
}
