// Code generated by MockGen. DO NOT EDIT.
// Source: network/dag/subscriber.go

// Package dag is a generated GoMock package.
package dag

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_stoabs "github.com/nuts-foundation/go-stoabs"
	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubscriber) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscriber)(nil).Close))
}

// Finished mocks base method.
func (m *MockSubscriber) Finished(hash hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finished indicates an expected call of Finished.
func (mr *MockSubscriberMockRecorder) Finished(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockSubscriber)(nil).Finished), hash)
}

// GetFailedJobs mocks base method.
func (m *MockSubscriber) GetFailedJobs() ([]Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedJobs")
	ret0, _ := ret[0].([]Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedJobs indicates an expected call of GetFailedJobs.
func (mr *MockSubscriberMockRecorder) GetFailedJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedJobs", reflect.TypeOf((*MockSubscriber)(nil).GetFailedJobs))
}

// Run mocks base method.
func (m *MockSubscriber) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSubscriberMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSubscriber)(nil).Run))
}

// Schedule mocks base method.
func (m *MockSubscriber) Schedule(tx go_stoabs.WriteTx, job Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", tx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockSubscriberMockRecorder) Schedule(tx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockSubscriber)(nil).Schedule), tx, job)
}
