// Code generated by MockGen. DO NOT EDIT.
// Source: network/dag/interface.go

// Package dag is a generated GoMock package.
package dag

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
)

// MockDAG is a mock of DAG interface.
type MockDAG struct {
	ctrl     *gomock.Controller
	recorder *MockDAGMockRecorder
}

// MockDAGMockRecorder is the mock recorder for MockDAG.
type MockDAGMockRecorder struct {
	mock *MockDAG
}

// NewMockDAG creates a new mock instance.
func NewMockDAG(ctrl *gomock.Controller) *MockDAG {
	mock := &MockDAG{ctrl: ctrl}
	mock.recorder = &MockDAGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAG) EXPECT() *MockDAGMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDAG) Add(documents ...Document) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range documents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDAGMockRecorder) Add(documents ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDAG)(nil).Add), documents...)
}

// All mocks base method.
func (m *MockDAG) All() ([]Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDAGMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDAG)(nil).All))
}

// Get mocks base method.
func (m *MockDAG) Get(ref hash.SHA256Hash) (Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ref)
	ret0, _ := ret[0].(Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDAGMockRecorder) Get(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDAG)(nil).Get), ref)
}

// GetByPayloadHash mocks base method.
func (m *MockDAG) GetByPayloadHash(payloadHash hash.SHA256Hash) ([]Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPayloadHash", payloadHash)
	ret0, _ := ret[0].([]Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPayloadHash indicates an expected call of GetByPayloadHash.
func (mr *MockDAGMockRecorder) GetByPayloadHash(payloadHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPayloadHash", reflect.TypeOf((*MockDAG)(nil).GetByPayloadHash), payloadHash)
}

// Heads mocks base method.
func (m *MockDAG) Heads() []hash.SHA256Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heads")
	ret0, _ := ret[0].([]hash.SHA256Hash)
	return ret0
}

// Heads indicates an expected call of Heads.
func (mr *MockDAGMockRecorder) Heads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heads", reflect.TypeOf((*MockDAG)(nil).Heads))
}

// IsPresent mocks base method.
func (m *MockDAG) IsPresent(ref hash.SHA256Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", ref)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPresent indicates an expected call of IsPresent.
func (mr *MockDAGMockRecorder) IsPresent(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockDAG)(nil).IsPresent), ref)
}

// MissingDocuments mocks base method.
func (m *MockDAG) MissingDocuments() []hash.SHA256Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MissingDocuments")
	ret0, _ := ret[0].([]hash.SHA256Hash)
	return ret0
}

// MissingDocuments indicates an expected call of MissingDocuments.
func (mr *MockDAGMockRecorder) MissingDocuments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MissingDocuments", reflect.TypeOf((*MockDAG)(nil).MissingDocuments))
}

// RegisterObserver mocks base method.
func (m *MockDAG) RegisterObserver(observer Observer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterObserver", observer)
}

// RegisterObserver indicates an expected call of RegisterObserver.
func (mr *MockDAGMockRecorder) RegisterObserver(observer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObserver", reflect.TypeOf((*MockDAG)(nil).RegisterObserver), observer)
}

// Root mocks base method.
func (m *MockDAG) Root() (hash.SHA256Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(hash.SHA256Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Root indicates an expected call of Root.
func (mr *MockDAGMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockDAG)(nil).Root))
}

// Walk mocks base method.
func (m *MockDAG) Walk(algo WalkerAlgorithm, visitor Visitor, startAt hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", algo, visitor, startAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockDAGMockRecorder) Walk(algo, visitor, startAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockDAG)(nil).Walk), algo, visitor, startAt)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPublisher) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockPublisherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPublisher)(nil).Start))
}

// Subscribe mocks base method.
func (m *MockPublisher) Subscribe(documentType string, receiver Receiver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", documentType, receiver)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPublisherMockRecorder) Subscribe(documentType, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublisher)(nil).Subscribe), documentType, receiver)
}

// MockWalkerAlgorithm is a mock of WalkerAlgorithm interface.
type MockWalkerAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockWalkerAlgorithmMockRecorder
}

// MockWalkerAlgorithmMockRecorder is the mock recorder for MockWalkerAlgorithm.
type MockWalkerAlgorithmMockRecorder struct {
	mock *MockWalkerAlgorithm
}

// NewMockWalkerAlgorithm creates a new mock instance.
func NewMockWalkerAlgorithm(ctrl *gomock.Controller) *MockWalkerAlgorithm {
	mock := &MockWalkerAlgorithm{ctrl: ctrl}
	mock.recorder = &MockWalkerAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalkerAlgorithm) EXPECT() *MockWalkerAlgorithmMockRecorder {
	return m.recorder
}

// walk mocks base method.
func (m *MockWalkerAlgorithm) walk(visitor Visitor, startAt hash.SHA256Hash, getFn func(hash.SHA256Hash) (Document, error), nextsFn func(hash.SHA256Hash) ([]hash.SHA256Hash, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "walk", visitor, startAt, getFn, nextsFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// walk indicates an expected call of walk.
func (mr *MockWalkerAlgorithmMockRecorder) walk(visitor, startAt, getFn, nextsFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "walk", reflect.TypeOf((*MockWalkerAlgorithm)(nil).walk), visitor, startAt, getFn, nextsFn)
}

// MockPayloadStore is a mock of PayloadStore interface.
type MockPayloadStore struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadStoreMockRecorder
}

// MockPayloadStoreMockRecorder is the mock recorder for MockPayloadStore.
type MockPayloadStoreMockRecorder struct {
	mock *MockPayloadStore
}

// NewMockPayloadStore creates a new mock instance.
func NewMockPayloadStore(ctrl *gomock.Controller) *MockPayloadStore {
	mock := &MockPayloadStore{ctrl: ctrl}
	mock.recorder = &MockPayloadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadStore) EXPECT() *MockPayloadStoreMockRecorder {
	return m.recorder
}

// IsPresent mocks base method.
func (m *MockPayloadStore) IsPresent(payloadHash hash.SHA256Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", payloadHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPresent indicates an expected call of IsPresent.
func (mr *MockPayloadStoreMockRecorder) IsPresent(payloadHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockPayloadStore)(nil).IsPresent), payloadHash)
}

// ReadPayload mocks base method.
func (m *MockPayloadStore) ReadPayload(payloadHash hash.SHA256Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPayload", payloadHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPayload indicates an expected call of ReadPayload.
func (mr *MockPayloadStoreMockRecorder) ReadPayload(payloadHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPayload", reflect.TypeOf((*MockPayloadStore)(nil).ReadPayload), payloadHash)
}

// RegisterObserver mocks base method.
func (m *MockPayloadStore) RegisterObserver(observer Observer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterObserver", observer)
}

// RegisterObserver indicates an expected call of RegisterObserver.
func (mr *MockPayloadStoreMockRecorder) RegisterObserver(observer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObserver", reflect.TypeOf((*MockPayloadStore)(nil).RegisterObserver), observer)
}

// WritePayload mocks base method.
func (m *MockPayloadStore) WritePayload(payloadHash hash.SHA256Hash, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePayload", payloadHash, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePayload indicates an expected call of WritePayload.
func (mr *MockPayloadStoreMockRecorder) WritePayload(payloadHash, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePayload", reflect.TypeOf((*MockPayloadStore)(nil).WritePayload), payloadHash, data)
}

// MockPayloadWriter is a mock of PayloadWriter interface.
type MockPayloadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadWriterMockRecorder
}

// MockPayloadWriterMockRecorder is the mock recorder for MockPayloadWriter.
type MockPayloadWriterMockRecorder struct {
	mock *MockPayloadWriter
}

// NewMockPayloadWriter creates a new mock instance.
func NewMockPayloadWriter(ctrl *gomock.Controller) *MockPayloadWriter {
	mock := &MockPayloadWriter{ctrl: ctrl}
	mock.recorder = &MockPayloadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadWriter) EXPECT() *MockPayloadWriterMockRecorder {
	return m.recorder
}

// WritePayload mocks base method.
func (m *MockPayloadWriter) WritePayload(payloadHash hash.SHA256Hash, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePayload", payloadHash, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePayload indicates an expected call of WritePayload.
func (mr *MockPayloadWriterMockRecorder) WritePayload(payloadHash, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePayload", reflect.TypeOf((*MockPayloadWriter)(nil).WritePayload), payloadHash, data)
}

// MockObservable is a mock of Observable interface.
type MockObservable struct {
	ctrl     *gomock.Controller
	recorder *MockObservableMockRecorder
}

// MockObservableMockRecorder is the mock recorder for MockObservable.
type MockObservableMockRecorder struct {
	mock *MockObservable
}

// NewMockObservable creates a new mock instance.
func NewMockObservable(ctrl *gomock.Controller) *MockObservable {
	mock := &MockObservable{ctrl: ctrl}
	mock.recorder = &MockObservableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObservable) EXPECT() *MockObservableMockRecorder {
	return m.recorder
}

// RegisterObserver mocks base method.
func (m *MockObservable) RegisterObserver(observer Observer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterObserver", observer)
}

// RegisterObserver indicates an expected call of RegisterObserver.
func (mr *MockObservableMockRecorder) RegisterObserver(observer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObserver", reflect.TypeOf((*MockObservable)(nil).RegisterObserver), observer)
}
