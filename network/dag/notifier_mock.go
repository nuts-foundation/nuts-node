// Code generated by MockGen. DO NOT EDIT.
// Source: network/dag/notifier.go

// Package dag is a generated GoMock package.
package dag

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_stoabs "github.com/nuts-foundation/go-stoabs"
	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNotifier) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNotifierMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNotifier)(nil).Close))
}

// Finished mocks base method.
func (m *MockNotifier) Finished(hash hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finished indicates an expected call of Finished.
func (mr *MockNotifierMockRecorder) Finished(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockNotifier)(nil).Finished), hash)
}

// GetFailedEvents mocks base method.
func (m *MockNotifier) GetFailedEvents() ([]Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedEvents")
	ret0, _ := ret[0].([]Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedEvents indicates an expected call of GetFailedEvents.
func (mr *MockNotifierMockRecorder) GetFailedEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedEvents", reflect.TypeOf((*MockNotifier)(nil).GetFailedEvents))
}

// Notify mocks base method.
func (m *MockNotifier) Notify(event Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", event)
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), event)
}

// Run mocks base method.
func (m *MockNotifier) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockNotifierMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNotifier)(nil).Run))
}

// Save mocks base method.
func (m *MockNotifier) Save(tx go_stoabs.WriteTx, event Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", tx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNotifierMockRecorder) Save(tx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNotifier)(nil).Save), tx, event)
}
