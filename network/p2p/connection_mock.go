// Code generated by MockGen. DO NOT EDIT.
// Source: network/p2p/connection.go

// Package p2p is a generated GoMock package.
package p2p

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
)

// MocksenderReceiver is a mock of senderReceiver interface.
type MocksenderReceiver struct {
	ctrl     *gomock.Controller
	recorder *MocksenderReceiverMockRecorder
}

// MocksenderReceiverMockRecorder is the mock recorder for MocksenderReceiver.
type MocksenderReceiverMockRecorder struct {
	mock *MocksenderReceiver
}

// NewMocksenderReceiver creates a new mock instance.
func NewMocksenderReceiver(ctrl *gomock.Controller) *MocksenderReceiver {
	mock := &MocksenderReceiver{ctrl: ctrl}
	mock.recorder = &MocksenderReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksenderReceiver) EXPECT() *MocksenderReceiverMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MocksenderReceiver) Recv() (*transport.NetworkMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*transport.NetworkMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MocksenderReceiverMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MocksenderReceiver)(nil).Recv))
}

// Send mocks base method.
func (m *MocksenderReceiver) Send(message *transport.NetworkMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MocksenderReceiverMockRecorder) Send(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MocksenderReceiver)(nil).Send), message)
}
