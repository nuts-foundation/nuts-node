// Code generated by MockGen. DO NOT EDIT.
// Source: network/p2p/connection.go

// Package p2p is a generated GoMock package.
package p2p

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
)

// MockgrpcMessenger is a mock of grpcMessenger interface.
type MockgrpcMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockgrpcMessengerMockRecorder
}

// MockgrpcMessengerMockRecorder is the mock recorder for MockgrpcMessenger.
type MockgrpcMessengerMockRecorder struct {
	mock *MockgrpcMessenger
}

// NewMockgrpcMessenger creates a new mock instance.
func NewMockgrpcMessenger(ctrl *gomock.Controller) *MockgrpcMessenger {
	mock := &MockgrpcMessenger{ctrl: ctrl}
	mock.recorder = &MockgrpcMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgrpcMessenger) EXPECT() *MockgrpcMessengerMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockgrpcMessenger) Recv() (*transport.NetworkMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*transport.NetworkMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockgrpcMessengerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockgrpcMessenger)(nil).Recv))
}

// Send mocks base method.
func (m *MockgrpcMessenger) Send(message *transport.NetworkMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockgrpcMessengerMockRecorder) Send(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockgrpcMessenger)(nil).Send), message)
}

// Mockconnection is a mock of connection interface.
type Mockconnection struct {
	ctrl     *gomock.Controller
	recorder *MockconnectionMockRecorder
}

// MockconnectionMockRecorder is the mock recorder for Mockconnection.
type MockconnectionMockRecorder struct {
	mock *Mockconnection
}

// NewMockconnection creates a new mock instance.
func NewMockconnection(ctrl *gomock.Controller) *Mockconnection {
	mock := &Mockconnection{ctrl: ctrl}
	mock.recorder = &MockconnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconnection) EXPECT() *MockconnectionMockRecorder {
	return m.recorder
}

// peer mocks base method.
func (m *Mockconnection) peer() Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "peer")
	ret0, _ := ret[0].(Peer)
	return ret0
}

// peer indicates an expected call of peer.
func (mr *MockconnectionMockRecorder) peer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "peer", reflect.TypeOf((*Mockconnection)(nil).peer))
}

// send mocks base method.
func (m *Mockconnection) send(message *transport.NetworkMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "send", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// send indicates an expected call of send.
func (mr *MockconnectionMockRecorder) send(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "send", reflect.TypeOf((*Mockconnection)(nil).send), message)
}

// sendAndReceive mocks base method.
func (m *Mockconnection) exchange(receivedMessages messageQueue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "exchange", receivedMessages)
}

// sendAndReceive indicates an expected call of sendAndReceive.
func (mr *MockconnectionMockRecorder) sendAndReceive(receivedMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exchange", reflect.TypeOf((*Mockconnection)(nil).exchange), receivedMessages)
}
