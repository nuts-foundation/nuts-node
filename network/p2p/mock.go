// Code generated by MockGen. DO NOT EDIT.
// Source: network/p2p/interface.go

// Package p2p is a generated GoMock package.
package p2p

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/nuts-foundation/nuts-node/core"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockInterface) Broadcast(message *transport.NetworkMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockInterfaceMockRecorder) Broadcast(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockInterface)(nil).Broadcast), message)
}

// Configure mocks base method.
func (m *MockInterface) Configure(config InterfaceConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockInterfaceMockRecorder) Configure(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockInterface)(nil).Configure), config)
}

// Configured mocks base method.
func (m *MockInterface) Configured() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configured")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Configured indicates an expected call of Configured.
func (mr *MockInterfaceMockRecorder) Configured() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configured", reflect.TypeOf((*MockInterface)(nil).Configured))
}

// ConnectToPeer mocks base method.
func (m *MockInterface) ConnectToPeer(address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToPeer", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConnectToPeer indicates an expected call of ConnectToPeer.
func (mr *MockInterfaceMockRecorder) ConnectToPeer(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToPeer", reflect.TypeOf((*MockInterface)(nil).ConnectToPeer), address)
}

// Diagnostics mocks base method.
func (m *MockInterface) Diagnostics() []core.DiagnosticResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diagnostics")
	ret0, _ := ret[0].([]core.DiagnosticResult)
	return ret0
}

// Diagnostics indicates an expected call of Diagnostics.
func (mr *MockInterfaceMockRecorder) Diagnostics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diagnostics", reflect.TypeOf((*MockInterface)(nil).Diagnostics))
}

// EventChannels mocks base method.
func (m *MockInterface) EventChannels() (chan Peer, chan Peer) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventChannels")
	ret0, _ := ret[0].(chan Peer)
	ret1, _ := ret[1].(chan Peer)
	return ret0, ret1
}

// EventChannels indicates an expected call of EventChannels.
func (mr *MockInterfaceMockRecorder) EventChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventChannels", reflect.TypeOf((*MockInterface)(nil).EventChannels))
}

// Peers mocks base method.
func (m *MockInterface) Peers() []Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]Peer)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockInterfaceMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockInterface)(nil).Peers))
}

// ReceivedMessages mocks base method.
func (m *MockInterface) ReceivedMessages() MessageQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedMessages")
	ret0, _ := ret[0].(MessageQueue)
	return ret0
}

// ReceivedMessages indicates an expected call of ReceivedMessages.
func (mr *MockInterfaceMockRecorder) ReceivedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedMessages", reflect.TypeOf((*MockInterface)(nil).ReceivedMessages))
}

// Send mocks base method.
func (m *MockInterface) Send(peer PeerID, message *transport.NetworkMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", peer, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockInterfaceMockRecorder) Send(peer, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInterface)(nil).Send), peer, message)
}

// Start mocks base method.
func (m *MockInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInterface)(nil).Stop))
}

// MockMessageQueue is a mock of MessageQueue interface.
type MockMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueMockRecorder
}

// MockMessageQueueMockRecorder is the mock recorder for MockMessageQueue.
type MockMessageQueueMockRecorder struct {
	mock *MockMessageQueue
}

// NewMockMessageQueue creates a new mock instance.
func NewMockMessageQueue(ctrl *gomock.Controller) *MockMessageQueue {
	mock := &MockMessageQueue{ctrl: ctrl}
	mock.recorder = &MockMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueue) EXPECT() *MockMessageQueueMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMessageQueue) Get() PeerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(PeerMessage)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockMessageQueueMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageQueue)(nil).Get))
}
