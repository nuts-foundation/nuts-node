/*
 * Copyright (C) 2021. Nuts community
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
syntax = "proto3";

option go_package = "github.com/nuts-foundation/nuts-node/network/transport";

package transport;

service Network {
    // Connect is used to setup a bidirectional streaming gRPC connection over which network messages can be sent.
    rpc Connect (stream NetworkMessage) returns (stream NetworkMessage) {
    }
}

// We multiplex all of our messages over a single super-message type, because we're using streams. If we did not do that,
// we'd need to open a stream per operation, which would make the number of required streams explode (since we're
// building a full mesh network).
message NetworkMessage {
    // Fields numbered 1-99 are reserved for protocol metadata
    reserved 1 to 99;

    // Below are the messages that can be sent/received using the NetworkMessage. A NetworkMessage MAY contain multiple
    // messages.
    oneof message {
        AdvertHashes advertHashes = 100;
        TransactionListQuery TransactionListQuery = 101;
        TransactionList TransactionList = 102;
        TransactionPayloadQuery transactionPayloadQuery = 103;
        TransactionPayload transactionPayload = 104;
        Diagnostics diagnosticsBroadcast = 105;
    }
}

// Headers contains protocol metadata.
message Header {
    // version contains the protocol version of the sent message.
    uint32 version = 1;
}

// AdvertHashes is a message broadcast for inform peers of the node's DAG state.
message AdvertHashes {
    // currentBlockDate contains a Unix timestamp at which the current block started (UTC).
    uint32 currentBlockDate = 1;
    // blocks contains the DAG blocks (as specified in RFC005) except the historic block. The historic block's hash
    // is specified in the `historicHash` field. In this `blocks` field the first entry is the oldest block (after the
    // historic block), the last entry is the current block.
    repeated BlockHashes blocks = 2;
    // historicHash contains the XOR of all head hashes leading up to (but not including) the first block.
    bytes historicHash = 3;
}

// BlockHashes contains the head's hashes of a block.
message BlockHashes {
    // hashes contains the hashes of the heads in this block.
    repeated bytes hashes = 1;
}

// TransactionListQuery is a message used to query a peer's TransactionList.
message TransactionListQuery {
    // blockDate specifies start date of the block (as Unix timestamp, in UTC) which is queried.
    uint32 blockDate = 1;
}

// TransactionList is the response message for TransactionListQuery.
message TransactionList {
    // blockDate specifies start date of the block (as Unix timestamp, in UTC) which the transactions belong to.
    uint32 blockDate = 1;
    // transactions contains the peer's transactions for the specified block.
    repeated Transaction transactions = 10;
}

// Transaction represents a transaction on the DAG.
message Transaction {
    // hash contains the reference of the transaction, as specified by RFC004.
    bytes hash = 1;
    // data contains the data of the transaction, which is a JWS as specified by RFC004.
    bytes data = 2;
}

// TransactionPayloadQuery is a message used to query the payload of a transaction.
message TransactionPayloadQuery {
    // payloadHash contains the SHA-256 hash of the payload which the node would like to receive, as specified by RFC004.
    bytes payloadHash = 1;
}

// TransactionPayload is the response message for TransactionPayloadQuery.
message TransactionPayload {
    // payloadHash contains the SHA-256 hash of the payload, as specified by RFC004.
    bytes payloadHash = 1;
    // data contains the actual payload.
    bytes data = 10;
}

// Diagnostics is a message to inform peers of the local node's state. All fields are optional.
message Diagnostics {
    // uptime contains the uptime (time since the node started) in seconds.
    uint32 uptime = 1;
    // peerID contains the ID of the node.
    string peerID = 2;
    // peers contains the peer IDs of the node's peers.
    repeated string peers = 3;
    // numberOfTransactions contains the total number of transactions on the node's DAG.
    uint32 numberOfTransactions = 4;
    // softwareVersion contains an indication of the software version of the node. It's recommended to use a (Git) commit ID that uniquely resolves to a code revision, alternatively a semantic version could be used (e.g. 1.2.5).
    string softwareVersion = 10;
    // softwareID contains an identification of the particular Nuts implementation of the node.
    // For open source implementations it's recommended to specify URL to the public, open source repository.
    // Proprietary implementations could specify the product or vendor's name.
    string softwareID = 11;
}