/*
 * Copyright (C) 2021. Nuts community
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
syntax = "proto3";

option go_package = "github.com/nuts-foundation/nuts-node/network/transport/v2";

package v2;

service Protocol {
  rpc Stream (stream Message) returns (stream Message) {
  }
}

message Message {
  oneof message {
      Gossip gossip = 100;
      State state = 101;
      TransactionSet transactionSet = 102;
      TransactionListQuery transactionListQuery = 103;
      TransactionRangeQuery transactionRangeQuery = 104;
      TransactionList transactionList = 105;
      HelloMessage hello = 1000;
  }
}

message HelloMessage {
}

// TransactionRef represents a transaction reference on the DAG.
message TransactionRef {
  // hash contains the reference of the transaction, as specified by RFC004.
  bytes hash = 1;
}

// Transaction represents a transaction on the DAG.
message Transaction {
  // hash contains the reference of the transaction, as specified by RFC004.
  TransactionRef hash = 1;
  // data contains the data of the transaction, which is a JWS as specified by RFC004.
  bytes data = 2;
  // payload contains the payload when it may be attached but wasn't so in the transaction already
  optional bytes payload = 3;
}

// Gossip is a message broadcast to inform peers of the node's DAG state and recent additions to it.
message Gossip {
  // XOR contains the XOR'ed value of all transaction references.
  bytes XOR = 1;
  // LC contains the highest transaction Lamport Clock value.
  uint32 LC = 2;
  // transactions is a list of transactions recently added to the DAG
  repeated TransactionRef transactions = 3;
}

// State is a request for the peer's DAG state up to the given LC value.
message State {
  // conversationID contains the token used to identify the response.
  bytes conversationID = 1;
  // XOR contains the XOR'ed value of all transaction references.
  bytes XOR = 2;
  // LC contains the highest transaction Lamport Clock value.
  uint32 LC = 3;
}

// TransactionSet contains an IBLT as a response to an State message
message TransactionSet {
  // conversationID contains the token used to identify the response.
  bytes conversationID = 1;
  // LC contains the highest transaction Lamport Clock value from the sender of this message.
  uint32 LC = 2;
  // LC_req contains the LC value that was sent in the State message
  uint32 LC_req = 3;
  // IBLT contains the serialized IBLT. The first byte indicates the serialization format of the IBLT.
  bytes IBLT = 4;
}

// TransactionListQuery is a request for transactions by references
message TransactionListQuery {
  // conversationID contains the token used to identify the response.
  bytes conversationID = 1;
  // refs is the list of requested transactions by reference
  repeated TransactionRef refs = 2;
}

// TransactionRangeQuery is a request for transactions by LC range
message TransactionRangeQuery {
  // conversationID contains the token used to identify the response.
  bytes conversationID = 1;
  // start indicates the start of the requested range (inclusive)
  uint32 start = 2;
  // end indicates the end of the requested range (exclusive)
  uint32 end = 3;
}

message TransactionList {
  // conversationID contains the token used to identify the response.
  bytes conversationID = 1;
  // transactions contains a list of transactions sorted by LC value
  repeated Transaction transactions = 2;
}
