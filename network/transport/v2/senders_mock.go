// Code generated by MockGen. DO NOT EDIT.
// Source: network/transport/v2/senders.go
//
// Generated by this command:
//
//	mockgen -destination=network/transport/v2/senders_mock.go -package=v2 -source=network/transport/v2/senders.go
//
// Package v2 is a generated GoMock package.
package v2

import (
	reflect "reflect"

	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
	tree "github.com/nuts-foundation/nuts-node/network/dag/tree"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
	grpc "github.com/nuts-foundation/nuts-node/network/transport/grpc"
	gomock "go.uber.org/mock/gomock"
)

// MockmessageSender is a mock of messageSender interface.
type MockmessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockmessageSenderMockRecorder
}

// MockmessageSenderMockRecorder is the mock recorder for MockmessageSender.
type MockmessageSenderMockRecorder struct {
	mock *MockmessageSender
}

// NewMockmessageSender creates a new mock instance.
func NewMockmessageSender(ctrl *gomock.Controller) *MockmessageSender {
	mock := &MockmessageSender{ctrl: ctrl}
	mock.recorder = &MockmessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageSender) EXPECT() *MockmessageSenderMockRecorder {
	return m.recorder
}

// broadcastDiagnostics mocks base method.
func (m *MockmessageSender) broadcastDiagnostics(diagnostics transport.Diagnostics) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "broadcastDiagnostics", diagnostics)
}

// broadcastDiagnostics indicates an expected call of broadcastDiagnostics.
func (mr *MockmessageSenderMockRecorder) broadcastDiagnostics(diagnostics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "broadcastDiagnostics", reflect.TypeOf((*MockmessageSender)(nil).broadcastDiagnostics), diagnostics)
}

// sendGossipMsg mocks base method.
func (m *MockmessageSender) sendGossipMsg(connection grpc.Connection, refs []hash.SHA256Hash, xor hash.SHA256Hash, clock uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendGossipMsg", connection, refs, xor, clock)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendGossipMsg indicates an expected call of sendGossipMsg.
func (mr *MockmessageSenderMockRecorder) sendGossipMsg(connection, refs, xor, clock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendGossipMsg", reflect.TypeOf((*MockmessageSender)(nil).sendGossipMsg), connection, refs, xor, clock)
}

// sendState mocks base method.
func (m *MockmessageSender) sendState(connection grpc.Connection, xor hash.SHA256Hash, clock uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendState", connection, xor, clock)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendState indicates an expected call of sendState.
func (mr *MockmessageSenderMockRecorder) sendState(connection, xor, clock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendState", reflect.TypeOf((*MockmessageSender)(nil).sendState), connection, xor, clock)
}

// sendTransactionList mocks base method.
func (m *MockmessageSender) sendTransactionList(connection grpc.Connection, conversationID conversationID, transactions []*Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionList", connection, conversationID, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionList indicates an expected call of sendTransactionList.
func (mr *MockmessageSenderMockRecorder) sendTransactionList(connection, conversationID, transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionList", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionList), connection, conversationID, transactions)
}

// sendTransactionListQuery mocks base method.
func (m *MockmessageSender) sendTransactionListQuery(connection grpc.Connection, refs []hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionListQuery", connection, refs)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionListQuery indicates an expected call of sendTransactionListQuery.
func (mr *MockmessageSenderMockRecorder) sendTransactionListQuery(connection, refs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionListQuery", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionListQuery), connection, refs)
}

// sendTransactionRangeQuery mocks base method.
func (m *MockmessageSender) sendTransactionRangeQuery(connection grpc.Connection, lcStart, lcEnd uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionRangeQuery", connection, lcStart, lcEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionRangeQuery indicates an expected call of sendTransactionRangeQuery.
func (mr *MockmessageSenderMockRecorder) sendTransactionRangeQuery(connection, lcStart, lcEnd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionRangeQuery", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionRangeQuery), connection, lcStart, lcEnd)
}

// sendTransactionSet mocks base method.
func (m *MockmessageSender) sendTransactionSet(connection grpc.Connection, conversationID conversationID, LCReq, LC uint32, iblt tree.Iblt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionSet", connection, conversationID, LCReq, LC, iblt)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionSet indicates an expected call of sendTransactionSet.
func (mr *MockmessageSenderMockRecorder) sendTransactionSet(connection, conversationID, LCReq, LC, iblt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionSet", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionSet), connection, conversationID, LCReq, LC, iblt)
}
