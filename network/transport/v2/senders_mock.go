// Code generated by MockGen. DO NOT EDIT.
// Source: network/transport/v2/senders.go

// Package v2 is a generated GoMock package.
package v2

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hash "github.com/nuts-foundation/nuts-node/crypto/hash"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
)

// MockmessageSender is a mock of messageSender interface.
type MockmessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockmessageSenderMockRecorder
}

// MockmessageSenderMockRecorder is the mock recorder for MockmessageSender.
type MockmessageSenderMockRecorder struct {
	mock *MockmessageSender
}

// NewMockmessageSender creates a new mock instance.
func NewMockmessageSender(ctrl *gomock.Controller) *MockmessageSender {
	mock := &MockmessageSender{ctrl: ctrl}
	mock.recorder = &MockmessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageSender) EXPECT() *MockmessageSenderMockRecorder {
	return m.recorder
}

// sendGossipMsg mocks base method.
func (m *MockmessageSender) sendGossipMsg(id transport.PeerID, refs []hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendGossipMsg", id, refs)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendGossipMsg indicates an expected call of sendGossipMsg.
func (mr *MockmessageSenderMockRecorder) sendGossipMsg(id, refs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendGossipMsg", reflect.TypeOf((*MockmessageSender)(nil).sendGossipMsg), id, refs)
}

// sendTransactionList mocks base method.
func (m *MockmessageSender) sendTransactionList(id transport.PeerID, conversationID conversationID, transactions []*Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionList", id, conversationID, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionList indicates an expected call of sendTransactionList.
func (mr *MockmessageSenderMockRecorder) sendTransactionList(id, conversationID, transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionList", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionList), id, conversationID, transactions)
}

// sendTransactionListQuery mocks base method.
func (m *MockmessageSender) sendTransactionListQuery(id transport.PeerID, refs []hash.SHA256Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionListQuery", id, refs)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionListQuery indicates an expected call of sendTransactionListQuery.
func (mr *MockmessageSenderMockRecorder) sendTransactionListQuery(id, refs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionListQuery", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionListQuery), id, refs)
}

// sendTransactionRangeQuery mocks base method.
func (m *MockmessageSender) sendTransactionRangeQuery(id transport.PeerID, conversationID conversationID, lcStart, lcEnd uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendTransactionRangeQuery", id, conversationID, lcStart, lcEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendTransactionRangeQuery indicates an expected call of sendTransactionRangeQuery.
func (mr *MockmessageSenderMockRecorder) sendTransactionRangeQuery(id, conversationID, lcStart, lcEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendTransactionRangeQuery", reflect.TypeOf((*MockmessageSender)(nil).sendTransactionRangeQuery), id, conversationID, lcStart, lcEnd)
}
