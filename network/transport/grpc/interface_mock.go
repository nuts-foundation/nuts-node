// Code generated by MockGen. DO NOT EDIT.
// Source: network/transport/grpc/interface.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
	grpc "google.golang.org/grpc"
)

// MockInboundStreamer is a mock of InboundStreamer interface.
type MockInboundStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockInboundStreamerMockRecorder
}

// MockInboundStreamerMockRecorder is the mock recorder for MockInboundStreamer.
type MockInboundStreamerMockRecorder struct {
	mock *MockInboundStreamer
}

// NewMockInboundStreamer creates a new mock instance.
func NewMockInboundStreamer(ctrl *gomock.Controller) *MockInboundStreamer {
	mock := &MockInboundStreamer{ctrl: ctrl}
	mock.recorder = &MockInboundStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInboundStreamer) EXPECT() *MockInboundStreamerMockRecorder {
	return m.recorder
}

// RegisterService mocks base method.
func (m *MockInboundStreamer) RegisterService(registrar grpc.ServiceRegistrar, acceptorCallback InboundStreamHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", registrar, acceptorCallback)
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockInboundStreamerMockRecorder) RegisterService(registrar, acceptorCallback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockInboundStreamer)(nil).RegisterService), registrar, acceptorCallback)
}

// MockOutboundStreamer is a mock of OutboundStreamer interface.
type MockOutboundStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockOutboundStreamerMockRecorder
}

// MockOutboundStreamerMockRecorder is the mock recorder for MockOutboundStreamer.
type MockOutboundStreamerMockRecorder struct {
	mock *MockOutboundStreamer
}

// NewMockOutboundStreamer creates a new mock instance.
func NewMockOutboundStreamer(ctrl *gomock.Controller) *MockOutboundStreamer {
	mock := &MockOutboundStreamer{ctrl: ctrl}
	mock.recorder = &MockOutboundStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboundStreamer) EXPECT() *MockOutboundStreamerMockRecorder {
	return m.recorder
}

// OpenStream mocks base method.
func (m *MockOutboundStreamer) OpenStream(arg0 context.Context, arg1 *grpc.ClientConn, arg2 func(grpc.ClientStream, string) (transport.Peer, error)) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenStream indicates an expected call of OpenStream.
func (mr *MockOutboundStreamerMockRecorder) OpenStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStream", reflect.TypeOf((*MockOutboundStreamer)(nil).OpenStream), arg0, arg1, arg2)
}

// MockStreamReceiver is a mock of StreamReceiver interface.
type MockStreamReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockStreamReceiverMockRecorder
}

// MockStreamReceiverMockRecorder is the mock recorder for MockStreamReceiver.
type MockStreamReceiverMockRecorder struct {
	mock *MockStreamReceiver
}

// NewMockStreamReceiver creates a new mock instance.
func NewMockStreamReceiver(ctrl *gomock.Controller) *MockStreamReceiver {
	mock := &MockStreamReceiver{ctrl: ctrl}
	mock.recorder = &MockStreamReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamReceiver) EXPECT() *MockStreamReceiverMockRecorder {
	return m.recorder
}

// RecvMsg mocks base method.
func (m_2 *MockStreamReceiver) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamReceiverMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamReceiver)(nil).RecvMsg), m)
}

// MockStreamSender is a mock of StreamSender interface.
type MockStreamSender struct {
	ctrl     *gomock.Controller
	recorder *MockStreamSenderMockRecorder
}

// MockStreamSenderMockRecorder is the mock recorder for MockStreamSender.
type MockStreamSenderMockRecorder struct {
	mock *MockStreamSender
}

// NewMockStreamSender creates a new mock instance.
func NewMockStreamSender(ctrl *gomock.Controller) *MockStreamSender {
	mock := &MockStreamSender{ctrl: ctrl}
	mock.recorder = &MockStreamSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamSender) EXPECT() *MockStreamSenderMockRecorder {
	return m.recorder
}

// SendMsg mocks base method.
func (m_2 *MockStreamSender) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamSenderMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamSender)(nil).SendMsg), m)
}
