// Code generated by MockGen. DO NOT EDIT.
// Source: network/transport/v1/p2p/interface.go

// Package p2p is a generated GoMock package.
package p2p

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transport "github.com/nuts-foundation/nuts-node/network/transport"
	grpc "github.com/nuts-foundation/nuts-node/network/transport/grpc"
	protobuf "github.com/nuts-foundation/nuts-node/network/transport/v1/protobuf"
	grpc0 "google.golang.org/grpc"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockAdapter) Broadcast(message *protobuf.NetworkMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockAdapterMockRecorder) Broadcast(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockAdapter)(nil).Broadcast), message)
}

// EventChannels mocks base method.
func (m *MockAdapter) EventChannels() (chan transport.Peer, chan transport.Peer) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventChannels")
	ret0, _ := ret[0].(chan transport.Peer)
	ret1, _ := ret[1].(chan transport.Peer)
	return ret0, ret1
}

// EventChannels indicates an expected call of EventChannels.
func (mr *MockAdapterMockRecorder) EventChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventChannels", reflect.TypeOf((*MockAdapter)(nil).EventChannels))
}

// OpenStream mocks base method.
func (m *MockAdapter) OpenStream(ctx context.Context, grpcConn *grpc0.ClientConn, conn func(grpc0.ClientStream, string) (transport.Peer, error)) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStream", ctx, grpcConn, conn)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenStream indicates an expected call of OpenStream.
func (mr *MockAdapterMockRecorder) OpenStream(ctx, grpcConn, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStream", reflect.TypeOf((*MockAdapter)(nil).OpenStream), ctx, grpcConn, conn)
}

// ReceivedMessages mocks base method.
func (m *MockAdapter) ReceivedMessages() MessageQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedMessages")
	ret0, _ := ret[0].(MessageQueue)
	return ret0
}

// ReceivedMessages indicates an expected call of ReceivedMessages.
func (mr *MockAdapterMockRecorder) ReceivedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedMessages", reflect.TypeOf((*MockAdapter)(nil).ReceivedMessages))
}

// RegisterService mocks base method.
func (m *MockAdapter) RegisterService(registrar grpc0.ServiceRegistrar, acceptorCallback grpc.InboundStreamHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", registrar, acceptorCallback)
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockAdapterMockRecorder) RegisterService(registrar, acceptorCallback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockAdapter)(nil).RegisterService), registrar, acceptorCallback)
}

// Send mocks base method.
func (m *MockAdapter) Send(peer transport.PeerID, message *protobuf.NetworkMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", peer, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAdapterMockRecorder) Send(peer, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAdapter)(nil).Send), peer, message)
}

// MockMessageQueue is a mock of MessageQueue interface.
type MockMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueMockRecorder
}

// MockMessageQueueMockRecorder is the mock recorder for MockMessageQueue.
type MockMessageQueueMockRecorder struct {
	mock *MockMessageQueue
}

// NewMockMessageQueue creates a new mock instance.
func NewMockMessageQueue(ctrl *gomock.Controller) *MockMessageQueue {
	mock := &MockMessageQueue{ctrl: ctrl}
	mock.recorder = &MockMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueue) EXPECT() *MockMessageQueueMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMessageQueue) Get() PeerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(PeerMessage)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockMessageQueueMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageQueue)(nil).Get))
}
