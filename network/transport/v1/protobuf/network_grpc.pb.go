// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClient interface {
	// Connect is used to setup a bidirectional streaming gRPC connection over which network messages can be sent.
	Connect(ctx context.Context, opts ...grpc.CallOption) (Network_ConnectClient, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Network_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Network_ServiceDesc.Streams[0], "/transport.Network/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkConnectClient{stream}
	return x, nil
}

type Network_ConnectClient interface {
	Send(*NetworkMessage) error
	Recv() (*NetworkMessage, error)
	grpc.ClientStream
}

type networkConnectClient struct {
	grpc.ClientStream
}

func (x *networkConnectClient) Send(m *NetworkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkConnectClient) Recv() (*NetworkMessage, error) {
	m := new(NetworkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkServer is the server API for Network service.
// All implementations should embed UnimplementedNetworkServer
// for forward compatibility
type NetworkServer interface {
	// Connect is used to setup a bidirectional streaming gRPC connection over which network messages can be sent.
	Connect(Network_ConnectServer) error
}

// UnimplementedNetworkServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (UnimplementedNetworkServer) Connect(Network_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServer will
// result in compilation errors.
type UnsafeNetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

func RegisterNetworkServer(s grpc.ServiceRegistrar, srv NetworkServer) {
	s.RegisterService(&Network_ServiceDesc, srv)
}

func _Network_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkServer).Connect(&networkConnectServer{stream})
}

type Network_ConnectServer interface {
	Send(*NetworkMessage) error
	Recv() (*NetworkMessage, error)
	grpc.ServerStream
}

type networkConnectServer struct {
	grpc.ServerStream
}

func (x *networkConnectServer) Send(m *NetworkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkConnectServer) Recv() (*NetworkMessage, error) {
	m := new(NetworkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Network_ServiceDesc is the grpc.ServiceDesc for Network service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Network_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Network_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport/v1/protobuf/network.proto",
}
