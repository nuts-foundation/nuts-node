// Code generated by MockGen. DO NOT EDIT.
// Source: events/interface.go

// Package events is a generated GoMock package.
package events

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// GetStream mocks base method.
func (m *MockEvent) GetStream(streamName string) Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream", streamName)
	ret0, _ := ret[0].(Stream)
	return ret0
}

// GetStream indicates an expected call of GetStream.
func (mr *MockEventMockRecorder) GetStream(streamName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockEvent)(nil).GetStream), streamName)
}

// Pool mocks base method.
func (m *MockEvent) Pool() ConnectionPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(ConnectionPool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockEventMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockEvent)(nil).Pool))
}
