openapi: "3.0.0"
info:
  title: Nuts Crypto Storage Abstraction API
  description: |
    API specification for a generic secret store HTTP server.
    It can be use to implement a secure store or a proxy to a storage solution such as 
    Hashicorp Vault or Azure key store. Usually the Nuts node will be the client.
  version: 1.0.0
  license:
    name: GPLv3
servers:
  - url: http://localhost:8210

tags:
  - name: health
    description: Health endpoint, can be used by Docker or a loadbalancer
    externalDocs:
      description: Read about Docker healthchecks
      url: https://docs.docker.com/engine/reference/builder/#healthcheck
  - name: secrets
    description: Interact with secrets
paths:
  /health:
    get:
      tags:
        - health
      operationId: healthCheck
      summary: Health check
      description: |
        This endpoint provides a healthcheck for the storage server.
        It can be used by clients to check the availability of the services or the proxied storage solution.
        The server should return a 200 status code if the service is available, and a 503 status code if the service is unavailable.
      responses:
        200:
          description: |
            The service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceStatus"
        503:
          description: |
            The service is not healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceStatus"
  /secrets:
    get:
      tags:
        - secrets
      operationId: listKeys
      summary: List all keys in the store
      description: |
        List all the keys available in the store.
        
        In case the store is used by the Nuts node for storing private keys from DID identities,
        the Nuts-node usually calls this endpoint during startup or during a key migration.
      responses:
        200:
          description: The response contains all the keys stored on this storage engine.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyList"
        500:
          description: The request failed. Check the error response for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /secrets/{key}:
    parameters:
      - name: key
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Key"
    get:
      tags:
        - secrets
      summary: Lookup the secret for the provided key
      operationId: LookupSecret
      responses:
        200:
          description: |
            The response on a successful lookup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        404:
          description: The lookup failed, the secret for the provided key could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: The lookup failed. Check the error response for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - secrets
      summary: Store a new secret under the provided key
      operationId: StoreSecret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreSecretRequest'
      responses:
        200:
          description: |
            The secret was successfully stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        400:
          description: The store operation failed. The request was not in the correct format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: The store operation failed. A secret for this key already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: The request failed. Check the error response for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - secrets
      operationId: DeleteSecret
      summary: Delete the secret for the provided key.
      responses:
        204:
          description: The deletion succeeded, the secret for the provided key has been deleted from the store.
        404:
          description: The deletion failed, the secret for the provided key could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: The deletion failed. Check the error response for more details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ServiceStatus:
      type: object
      description: |
        Response for the health check endpoint.
      required:
        - status
      properties:
        status:
          type: string
          description: |
            Indicates whether the service status is acceptable. Possible values are:
            * **pass**: healthy.
            * **fail**: unhealthy.
            * **warn**: healthy, with some concerns.
          enum:
            - pass
            - fail
            - warn
        details:
          type: string
          description: |
            Additional details about the service status.
    KeyList:
      description: |
        List of keys currently stored in the store.
        Note: If the client escaped these keys, they should be unescaped before using them.
      type: array
      items:
        $ref: "#/components/schemas/Key"
    Key:
      type: string
      description: |
        The key under which secrets can be stored or retrieved.
        
        The key should be considered opaque and no assumptions should be made about its value or format.
        Since the key is the last part of the URL path, slashes and hash symbols must be escaped.
      example: privatekeys-did%3Anuts%3A123%23key-1
    Secret:
      type: string
      description: The secret value stored under the provided key.
      example: "secret-value"
    StoreSecretRequest:
      description: Request body to store a secret value. The secret value must not be empty.
      type: object
      required:
        - secret
      properties:
        secret:
          $ref: "#/components/schemas/Secret"
    SecretResponse:
      description: Response object containing the secret value.
      required:
        - secret
      properties:
        secret:
          $ref: "#/components/schemas/Secret"
    ErrorResponse:
      type: object
      description: |
        The ErrorResponse contains the Problem Details for HTTP APIs as specified in [RFC7807](https://tools.ietf.org/html/rfc7807).
        
        It provides more details about problems occurred in the storage server.
        
        Return values contain the following members:
        - **title** (string) - A short, human-readable summary of the problem type.
        - **status** (number) - The HTTP status code generated by the origin server for this occurrence of the problem.
        - **backend** (string) The name of the storage backend. This can provide context to the error.
        - **detail** (string) - A human-readable explanation specific to this occurrence of the problem.
      required:
        - title
        - status
        - backend
        - detail
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem type.
          example: "Lookup failed. The backend returned an error."
        status:
          type: integer
          description: HTTP status-code
          example: 403
        backend:
          type: string
          description: The name of the storage backend. This can provide context to the error.
          example: "hashicorp-vault"
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: "permission denied"
