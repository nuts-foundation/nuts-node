openapi: 3.0.0
info:
  title: Auth v2 API (experimental)
  version: 0.0.0
servers:
  - url: "http://localhost:1323"
paths:
  /iam/{id}/did.json:
    parameters:
      - name: id
        in: path
        description: ID of DID.
        required: true
        example: EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic
        schema:
          type: string
    get:
      summary: "Returns the did:web version of a Nuts DID document"
      description: |
        Returns the did:web DID document, if it is owned by this node.
      operationId: "getWebDID"
      tags:
        - DID
      responses:
        "200":
          description: DID has been found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDDocument'
        "404":
          description: DID does not exist.
  "/iam/{id}/token":
    post:
      summary: Used by to request access- or refresh tokens.
      description: Specified by https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-token-endpoint
      operationId: handleTokenRequest
      tags:
        - oauth2
      parameters:
        - name: id
          in: path
          required: true
          description: the id part of the web DID
          schema:
            type: string
            example: EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - code
              properties:
                grant_type:
                  type: string
                  example: urn:ietf:params:oauth:grant-type:authorized_code
                code:
                  type: string
                  example: secret
              additionalProperties:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenResponse"
        "default":
          $ref: '../common/error_response.yaml'
  "/iam/{id}/authorize":
    get:
      summary: Used by resource owners to initiate the authorization code flow.
      description: Specified by https://datatracker.ietf.org/doc/html/rfc6749#section-3.1
      operationId: handleAuthorizeRequest
      tags:
        - oauth2
      parameters:
        - name: id
          in: path
          required: true
          description: the id part of the web DID
          schema:
            type: string
            example: EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic
        # Way to specify dynamic query parameters
        # See https://stackoverflow.com/questions/49582559/how-to-document-dynamic-query-parameter-names-in-openapi-swagger
        - in: query
          name: params
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
          explode: true
      responses:
        "200":
          description: Authorization request accepted, user is asked for consent.
          content:
            text/html:
              schema:
                type: string
        "302":
          description: >
            If an error occurs, the user-agent is redirected, the authorization server redirects the user-agent to the provided redirect URI.
          headers:
            Location:
              schema:
                type: string
                format: uri
  "/iam/{did}/presentation_definition":
    get:
      summary: Used by relying parties to obtain a presentation definition for desired scopes as specified by Nuts RFC021.
      description: |
        The presentation definition (specified by https://identity.foundation/presentation-exchange/spec/v2.0.0/) is a JSON object that describes the desired verifiable credentials and presentation formats.
        A presentation definition is matched against a wallet. If verifiable credentials matching the definition are found, 
        a presentation can created together with a presentation submission.
        The API returns an array of definitions, one per scope/backend combination if applicable.
      operationId: presentationDefinition
      tags:
        - oauth2
      parameters:
        - name: did
          in: path
          required: true
          schema:
            type: string
            example: did:nuts:123
        - name: scope
          in: query
          required: true
          schema:
            type: string
            description: | 
              The scope for which a presentation definition is requested. Multiple scopes can be specified by separating them with a space.
            example: usecase patient:x:read
      responses:
        "200":
          description: PresentationDefinition that matches scope is found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PresentationDefinition"
        "default":
          $ref: '../common/error_response.yaml'
  # TODO: What format to use? (codegenerator breaks on aliases)
  # See issue https://github.com/nuts-foundation/nuts-node/issues/2365
  # create aliases for the specced path
#  /iam/{did}/oauth-authorization-server:
#    $ref: '#/paths/~1.well-known~1oauth-authorization-server~1iam~1{did}'
#  /iam/{did}/.well-known/oauth-authorization-server:
#    $ref: '#/paths/~1.well-known~1oauth-authorization-server~1iam~1{did}'
  /.well-known/oauth-authorization-server/iam/{id}:
    get:
      tags:
        - well-known
      summary: Get the OAuth2 Authorization Server metadata
      description: >
        Specified by https://www.rfc-editor.org/info/rfc8414
        The well-known path is the default specified by https://www.rfc-editor.org/rfc/rfc8414.html#section-3
        
        error returns:
        * 400 - invalid input
        * 404 - did not found; possibly be non-existing, deactivated, or not managed by this node
        * 500 - internal server error
      operationId: OAuthAuthorizationServerMetadata
      parameters:
        - name: id
          in: path
          required: true
          description: the id part of the web DID
          schema:
            type: string
            example: EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OAuthAuthorizationServerMetadata"
        default:
          $ref: '../common/error_response.yaml'
  /iam/{id}/oauth-client:
    get:
      tags:
        - well-known
      summary: Get the OAuth2 Client metadata
      description: >
        Returns relevant OAuth Client metadata as defined in 
        https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml#client-metadata
        and other OpenID4VC specification set.
        
        error returns:
        * 400 - invalid input
        * 404 - did not found; possibly be non-existing, deactivated, or not managed by this node
        * 500 - internal server error
      operationId: OAuthClientMetadata
      parameters:
        - name: id
          in: path
          required: true
          schema:
            description: must be the key fingerprint identifying the did:web address
            type: string
            example: NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OAuthClientMetadata"
        default:
          $ref: '../common/error_response.yaml'
#  /internal/auth/v2/{did}/request-presentation:
#    post:
#      operationId: requestPresentation
#      summary: Requests a credential presentation using OAuth2 from a remote wallet through a user-agent.
#      description: |
#        Requests a credential presentation using OAuth2 from a remote wallet.
#        It will redirect the user-agent to the wallet, so the user can give consent.
#
#        error returns:
#        * 400 - one of the parameters has the wrong format
#        * 503 - the authorizer could not be reached or returned an error
#      tags:
#        - auth
#      parameters:
#        - name: did
#          in: path
#          required: true
#          schema:
#            type: string
#            example: did:nuts:123
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              required:
#                - wallet
#                - scope
#              properties:
#                wallet:
#                  type: string
#                # TODO: how should this be specified?
#                scope:
#                  type: string
#                  description: maps to the verifiable credentials to request
#      responses:
#        '200':
#          description: Request initiated, the response will contain a redirect URL to which the user-agent
#          content:
#            application/json:
#              schema:
#                required:
#                  - redirect_uri
#                properties:
#                  redirect_uri:
#                    type: string
#        default:
#          $ref: '../common/error_response.yaml'
  /internal/auth/v2/{did}/request-access-token:
    post:
      operationId: requestAccessToken
      summary: Requests an access token using the vp_token-bearer grant.
      description: |
        Initiates an OAuth2 flow to request an access token from a remote authorization server.
        This endpoint is only usable for a service 2 service flow.

        error returns:
        * 400 - one of the parameters has the wrong format
        * 412 - the organization wallet does not contain the correct credentials
        * 503 - the authorizer could not be reached or returned an error
      tags:
        - auth
      parameters:
        - name: did
          in: path
          required: true
          description: The DID of the requester, a Wallet owner at this node.
          schema:
            type: string
            example: did:nuts:123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - verifier
                - scope
              properties:
                verifier:
                  type: string
                  example: did:nuts:123
                scope:
                  type: string
                  description: The scope that will be The service for which this access token can be used.
                  example: eOverdracht-sender
      responses:
        '200':
          description: Successful request. Responds with an access token as described in rfc6749 section 5.1.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        default:
          $ref: '../common/error_response.yaml'
components:
  schemas:
    DIDDocument:
      $ref: '../common/ssi_types.yaml#/components/schemas/DIDDocument'
    TokenResponse:
      type: object
      description: |
        Token Responses are made as defined in (RFC6749)[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1]
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          description: |
            The access token issued by the authorization server.
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ"
        token_type:
          type: string
          description: |
            The type of the token issued as described in [RFC6749].
          example: "bearer"
        scope:
          type: string
        expires_in:
          type: integer
          description: |
            The lifetime in seconds of the access token.
          example: 3600
      example:
        {
          "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ",
          "token_type": "bearer",
          "expires_in": 3600,
        }
    OAuthAuthorizationServerMetadata:
      description: |
        OAuth2 Authorization Server Metadata
        Contain properties from several specifications and may grow over time
      type: object
    OAuthClientMetadata:
      description: |
        OAuth2 Client Metadata
        Contain properties from several specifications and may grow over time
      type: object
    PresentationDefinition:
      description: |
        A presentation definition is a JSON object that describes the desired verifiable credentials and presentation formats.
        Specified at https://identity.foundation/presentation-exchange/spec/v2.0.0/
