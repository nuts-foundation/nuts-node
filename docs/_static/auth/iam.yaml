openapi: 3.0.0
info:
  title: Auth v2 API (experimental)
  version: 0.0.0
servers:
  - url: http://localhost:8081
    description: For internal-facing endpoints.
  - url: http://localhost:8080
    description: For public-facing endpoints.
paths:
  /iam/{id}/did.json:
    parameters:
      - name: id
        in: path
        description: ID of DID.
        required: true
        example: EwVMYK2ugaMvRHUbGFBhuyF423JuNQbtpes35eHhkQic
        schema:
          type: string
    get:
      summary: Returns the did:web DID for the specified tenant.
      description: |
        Returns the did:web DID for the specified tenant, if it is owned by this node.
      operationId: "getTenantWebDID"
      tags:
        - DID
      responses:
        "200":
          description: DID has been found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDDocument'
        "404":
          description: DID does not exist.
  /.well-known/did.json:
    get:
      summary: Returns the root did:web DID of this domain.
      description: |
        Returns the root did:web DID of this domain, if it is owned by this node.
      operationId: "getRootWebDID"
      tags:
        - DID
      responses:
        "200":
          description: DID has been found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DIDDocument'
        "404":
          description: DID does not exist.
  "/oauth2/{did}/token":
    post:
      summary: Used by to request access- or refresh tokens.
      description: Specified by https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-token-endpoint
      operationId: handleTokenRequest
      tags:
        - oauth2
      parameters:
        - name: did
          in: path
          required: true
          description: DID that is the subject of the token request
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  example: urn:ietf:params:oauth:grant-type:authorized_code
                code:
                  type: string
                client_id:
                  type: string
                assertion:
                  type: string
                presentation_submission:
                  type: string
                scope:
                  type: string
                code_verifier:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenResponse"
        "default":
          description: Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/oauth2/{did}/authorize":
    get:
      summary: Used by resource owners to initiate the authorization code flow.
      description: Specified by https://datatracker.ietf.org/doc/html/rfc6749#section-3.1
      operationId: handleAuthorizeRequest
      tags:
        - oauth2
      parameters:
        - name: did
          in: path
          required: true
          description: DID that is the subject of the authorization request
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
        # Way to specify dynamic query parameters
        # See https://stackoverflow.com/questions/49582559/how-to-document-dynamic-query-parameter-names-in-openapi-swagger
        - in: query
          name: params
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
          explode: true
      responses:
        "200":
          description: Authorization request accepted, user is asked for consent.
          content:
            text/html:
              schema:
                type: string
        "302":
          description: >
            If an error occurs, the user-agent is redirected, the authorization server redirects the user-agent to the provided redirect URI.
          headers:
            Location:
              schema:
                type: string
                format: uri
  "/oauth2/{did}/callback":
    get:
      summary: The OAuth2 callback endpoint of the client.
      description: |
        When the OAuth2 flow is completed, the user-agent is redirected to this endpoint.
        This can be the result of a successful authorization request or an error.
        The result of this callback is a redirect back to the calling application.
      operationId: callback
      tags:
        - oauth2
      parameters:
        - name: did
          in: path
          required: true
          description: DID that is the subject of the callback
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
        - name: code
          in: query
          description: The authorization code received from the authorization server.
          schema:
            type: string
        - name: state
          in: query
          description: The client state.
          schema:
            type: string
        - name: error
          in: query
          description: The error code.
          schema:
            type: string
        - name: error_description
          in: query
          description: The error description.
          schema:
            type: string
      responses:
        "302":
          description: Redirect to the calling application.
          headers:
            Location:
              schema:
                type: string
                format: uri
        "default":
          $ref: '../common/error_response.yaml'
  "/oauth2/{did}/presentation_definition":
    get:
      summary: Used by relying parties to obtain a presentation definition for desired scopes as specified by Nuts RFC021.
      description: |
        The presentation definition (specified by https://identity.foundation/presentation-exchange/spec/v2.0.0/) is a JSON object that describes the desired verifiable credentials and presentation formats.
        A presentation definition is matched against a wallet. If verifiable credentials matching the definition are found, 
        a presentation can created together with a presentation submission.
        The API returns an array of definitions, one per scope/backend combination if applicable.
      operationId: presentationDefinition
      tags:
        - oauth2
      parameters:
        - name: did
          in: path
          required: true
          description: DID that holds the presentation definition.
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
        - name: scope
          in: query
          required: true
          schema:
            type: string
            description: | 
              The scope for which a presentation definition is requested. Multiple scopes can be specified by separating them with a space.
            example: usecase patient:x:read
        - name: wallet_owner_type
          in: query
          schema:
            $ref: '#/components/schemas/WalletOwnerType'
      responses:
        "200":
          description: PresentationDefinition that matches scope is found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PresentationDefinition"
        "default":
          $ref: '../common/error_response.yaml'
  "/oauth2/{did}/response":
    post:
      summary: Used by wallets to post the authorization response or error to.
      description: | 
        Specified by https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-response-mode-direct_postjw
        The response is either an error response with error, error_description and state filled or a submission with vp_token and presentation_submission filled.
        When an error is posted, the state is used to fetch the holder's callbackURI from the verifiers client state.
      operationId: handleAuthorizeResponse
      tags:
        - oauth2
      parameters:
        - name: did
          in: path
          required: true
          description: DID that is the subject of the authorization response
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                error:
                  description: error code as defined by the OAuth2 specification
                  type: string
                error_description:
                  description: error description as defined by the OAuth2 specification
                  type: string
                presentation_submission:
                  type: string
                state:
                  description: the client state for the verifier
                  type: string
                vp_token:
                  description: A Verifiable Presentation in either JSON-LD or JWT format.
                  type: string
      responses:
        "200":
          description: Authorization response with a redirect URL, also used for error returns if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectResponse'
  # TODO: What format to use? (codegenerator breaks on aliases)
  # See issue https://github.com/nuts-foundation/nuts-node/issues/2365
  # create aliases for the specced path
#  /iam/{did}/oauth-authorization-server:
#    $ref: '#/paths/~1.well-known~1oauth-authorization-server~1iam~1{did}'
#  /iam/{did}/.well-known/oauth-authorization-server:
#    $ref: '#/paths/~1.well-known~1oauth-authorization-server~1iam~1{did}'
  /.well-known/oauth-authorization-server/iam/{id}:
    get:
      tags:
        - well-known
      summary: Get the OAuth2 Authorization Server metadata for a did:web with a :iam:<id> path.
      description: >
        Specified by https://www.rfc-editor.org/info/rfc8414
        The well-known path is the default specified by https://www.rfc-editor.org/rfc/rfc8414.html#section-3

        error returns:
        * 400 - invalid input
        * 404 - did not found; possibly be non-existing, deactivated, or not managed by this node
        * 500 - internal server error
      operationId: OAuthAuthorizationServerMetadata
      parameters:
        - name: id
          in: path
          required: true
          description: ID of did:web DID that serves the metadata
          schema:
            type: string
            example: did:web:example.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OAuthAuthorizationServerMetadata"
        default:
          $ref: '../common/error_response.yaml'
  /.well-known/oauth-authorization-server:
    get:
      tags:
        - well-known
      summary: Get the OAuth2 Authorization Server metadata of a root did:web DID.
      description: >
        Specified by https://www.rfc-editor.org/info/rfc8414
        The well-known path is the default specified by https://www.rfc-editor.org/rfc/rfc8414.html#section-3

        error returns:
        * 400 - invalid input
        * 404 - did not found; possibly be non-existing, deactivated, or not managed by this node
        * 500 - internal server error
      operationId: RootOAuthAuthorizationServerMetadata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OAuthAuthorizationServerMetadata"
        default:
          $ref: '../common/error_response.yaml'
  /oauth2/{did}/oauth-client:
    get:
      tags:
        - well-known
      summary: Get the OAuth2 Client metadata
      description: >
        Returns relevant OAuth Client metadata as defined in 
        https://www.iana.org/assignments/oauth-parameters/oauth-parameters.xhtml#client-metadata
        and other OpenID4VC specification set.
        
        error returns:
        * 400 - invalid input
        * 404 - did not found; possibly be non-existing, deactivated, or not managed by this node
        * 500 - internal server error
      operationId: OAuthClientMetadata
      parameters:
        - name: did
          in: path
          required: true
          description: DID that serves the metadata
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OAuthClientMetadata"
        default:
          $ref: '../common/error_response.yaml'
#  /internal/auth/v2/{did}/request-presentation:
#    post:
#      operationId: requestPresentation
#      summary: Requests a credential presentation using OAuth2 from a remote wallet through a user-agent.
#      description: |
#        Requests a credential presentation using OAuth2 from a remote wallet.
#        It will redirect the user-agent to the wallet, so the user can give consent.
#
#        error returns:
#        * 400 - one of the parameters has the wrong format
#        * 503 - the authorizer could not be reached or returned an error
#      tags:
#        - auth
#      parameters:
#        - name: did
#          in: path
#          required: true
#          schema:
#            type: string
#            example: did:nuts:123
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              required:
#                - wallet
#                - scope
#              properties:
#                wallet:
#                  type: string
#                # TODO: how should this be specified?
#                scope:
#                  type: string
#                  description: maps to the verifiable credentials to request
#      responses:
#        '200':
#          description: Request initiated, the response will contain a redirect URL to which the user-agent
#          content:
#            application/json:
#              schema:
#                required:
#                  - redirect_uri
#                properties:
#                  redirect_uri:
#                    type: string
#        default:
#          $ref: '../common/error_response.yaml'
  /internal/auth/v2/{did}/request-service-access-token:
    post:
      operationId: requestServiceAccessToken
      summary: Start the authorization flow to get an access token from a remote authorization server.
      description: |
        Initiates an OAuth2 flow to request an access token from a remote authorization server.
        It'll initiate a s2s (RFC021) flow.

        error returns:
        * 400 - one of the parameters has the wrong format or an OAuth error occurred
        * 412 - the organization wallet does not contain the correct credentials
        * 503 - the authorizer could not be reached or returned an error
      tags:
        - auth
      parameters:
        - name: did
          in: path
          required: true
          description: The DID of the requester, a Wallet owner at this node.
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - verifier
                - scope
              properties:
                verifier:
                  type: string
                  example: did:web:example.com
                scope:
                  type: string
                  description: The scope that will be the service for which this access token can be used.
                  example: eOverdracht-sender
      responses:
        '200':
          description: Successful request. Responds with an access token as described in rfc6749 section 5.1.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        default:
          $ref: '../common/error_response.yaml'
  /internal/auth/v2/{did}/request-user-access-token:
    post:
      operationId: requestUserAccessToken
      summary: Start the authorization code flow to get an access token from a remote authorization server when user context is required.
      description: |
        Initiates an OAuth2 flow to request an access token from a remote authorization server. This call will initiate an OpenID4VP flow.
        The user must be authorized by the calling system and provided in the preauthorized_user field.
        The user's ID must be stable across sessions, as it's used to select the right ID Wallet.
        
        error returns:
        * 400 - one of the parameters has the wrong format or an OAuth error occurred
        * 412 - the organization wallet does not contain the correct credentials
        * 503 - the authorizer could not be reached or returned an error
      tags:
        - auth
      parameters:
        - name: did
          in: path
          required: true
          description: The DID of the requester, a wallet owner at this node.
          content:
            plain/text:
              schema:
                type: string
                example: did:web:example.com
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - redirect_uri
                - scope
                - verifier
              properties:
                verifier:
                  type: string
                  description: The DID of the verifier, the relying party for which this access token is requested.
                  example: did:web:example.com
                scope:
                  type: string
                  description: The scope that will be the service for which this access token can be used.
                  example: eOverdracht-sender
                redirect_uri:
                  type: string
                  description: |
                    The URL to which the user-agent will be redirected after the authorization request.
                    This is the URL of the calling application. 
                    The OAuth2 flow will finish at the /callback URL of the node and the node will redirect the user to this redirect_uri.
                preauthorized_user:
                  $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          description: | 
            Successful request. Responds with a redirect_uri for the user and a token for the calling application.
            The token can be used by the calling application to get the status of the session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectResponseWithID'
        default:
          $ref: '../common/error_response.yaml'
  /internal/auth/v2/accesstoken/{sessionID}:
    get:
      operationId: retrieveAccessToken
      summary: Get the access token from the Nuts node that was requested through /request-user-access-token.
      description: |
        If the OAuth2 flow has completed, this call will return the access token. 
        After returning the access token, the token used to retrieve the access token is no longer valid.
        If the flow hasn't completed yet, the response will contain the 'pending' status value.
        Therefore this API can be used to poll for the status of the OAuth2 flow.
      tags:
        - auth
      parameters:
        - name: sessionID
          in: path
          required: true
          description: This ID is given to the calling application as response to the request-user-access-token call.
          schema:
            type: string
            example: eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp
      responses:
        '200':
          description: | 
            Successful request. Responds with an access token as described in rfc6749 section 5.1 when available.
            If the OAuth2 flow hasn't completed yet, the response will only contain the 'pending' status value.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        default:
          $ref: '../common/error_response.yaml'
  /internal/auth/v2/accesstoken/introspect:
    post:
      operationId: introspectAccessToken
      summary: Introspection endpoint to retrieve information from an Access Token as described by RFC7662
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenIntrospectionRequest"
      responses:
        '200':
          description: |
            An Introspection response as described in RFC7662 section 2.2. The Irma, Dummy and Employee identity means all return 'username', 'initials',  'prefix', 'family_name' and 'assurance_level'.
            'username' should be used as unique identifier for the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenIntrospectionResponse"
        '401':
          description: |
            This is returned when an OAuth2 Client is unauthorized to talk to the introspection endpoint.
            Note: introspection of an invalid or malformed token returns a 200 where with field 'active'=false
  /statuslist/{did}/{page}:
    parameters:
      - name: did
        in: path
        required: true
        description: DID that owns the status list
        content:
          plain/text:
            schema:
              type: string
              example: did:web:example.com
      - name: page
        in: path
        required: true
        description: StatusListCredential page number for this DID
        schema:
          type: integer
          example: 1
    get:
      summary: Get the StatusList2021Credential for the given DID and page
      description: >
        Returns the StatusList2021Credential as specified in https://www.w3.org/TR/2023/WD-vc-status-list-20230427/
  
        error returns:
        * 404 - id or page not found; possibly be non-existing, deactivated, or not managed by this node
        * 500 - internal server error
      operationId: statusList
      responses:
        "200":
          description: OK, StatusList2021Credential found and returned
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifiableCredential"
        default:
          $ref: '../common/error_response.yaml'
components:
  schemas:
    DIDDocument:
      $ref: '../common/ssi_types.yaml#/components/schemas/DIDDocument'
    VerifiablePresentation:
      $ref: '../common/ssi_types.yaml#/components/schemas/VerifiablePresentation'
    RedirectResponse:
      type: object
      required:
        - redirect_uri
      properties:
        redirect_uri:
          type: string
          description: |
            The URL to which the user-agent will be redirected after the authorization request.
          example: "https://example.com/callback"
    RedirectResponseWithID:
      type: object
      required:
        - redirect_uri
        - session_id
      properties:
        redirect_uri:
          type: string
          description: The URL to which the user-agent will be redirected after the authorization request.
          example: "https://example.com/callback"
        session_id:
          type: string
          description: The session ID that can be used to retrieve the access token by the calling application.
          example: "eyJhbGciOiJSUzI1NiIsI"
    UserDetails:
      type: object
      description: |
        Claims about the authorized user.
      required:
        - name
        - id
        - role
      properties:
        name:
          type: string
          description: Human-readable name of the user.
          example: "John Doe"
        id:
          type: string
          description: Machine-readable identifier, uniquely identifying the user in the issuing system.
          example:
            - "jdoe"
            - "123456"
            - "jdoe@example.com"
        role:
          type: string
          description: Role of the user.
          example: "Verpleegkundige niveau 4"
    VerifiableCredential:
      $ref: '../common/ssi_types.yaml#/components/schemas/VerifiableCredential'
    TokenResponse:
      type: object
      description: |
        Token Responses are made as defined in (RFC6749)[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1]
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          description: |
            The access token issued by the authorization server.
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ"
        token_type:
          type: string
          description: |
            The type of the token issued as described in [RFC6749].
          example: "bearer"
        scope:
          type: string
        status:
          type: string
          description: |
            The status of the access token request. Can be 'pending' or 'active'.
            If the status is 'pending', the access token is not yet available.
            Only used when the access token is requested through /request-user-access-token.
          enum: [pending, active]
        expires_in:
          type: integer
          description: |
            The lifetime in seconds of the access token.
          example: 3600
      example:
        {
          "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6Ikp..sHQ",
          "token_type": "bearer",
          "expires_in": 3600,
        }
    OAuthAuthorizationServerMetadata:
      description: |
        OAuth2 Authorization Server Metadata
        Contain properties from several specifications and may grow over time
      type: object
    OAuthClientMetadata:
      description: |
        OAuth2 Client Metadata
        Contain properties from several specifications and may grow over time
      type: object
    PresentationDefinition:
      description: |
        A presentation definition is a JSON object that describes the desired verifiable credentials and presentation formats.
        Specified at https://identity.foundation/presentation-exchange/spec/v2.0.0/
      type: object
    PresentationSubmission:
      description: |
        A presentation submission is a JSON object that describes the mapping between the required verifiable credentials listed in the presentation definition and the supplied verifiable presentation.
        Specified at https://identity.foundation/presentation-exchange/spec/v2.0.0/
      type: object
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Code identifying the error that occurred.
          example: invalid_request
        error_description:
          type: string
          description: Human-readable description of the error.
          example: The request is missing a required parameter.
    TokenIntrospectionRequest:
      description: >
        Token introspection request as described in RFC7662 section 2.1
        
        Alongside the defined properties, it can return values (additionalProperties) from the Verifiable Credentials that resulted from the Presentation Exchange.
      required:
        - token
      properties:
        token:
          type: string
          example:
            eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhaWQiOiJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjIuNC42LjE6MDAwMDAwMDAiLCJleHAiOjE1ODE0MTI2NjcsImlhdCI6MTU4MTQxMTc2NywiaXNzIjoidXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4yLjQuNi4xOjAwMDAwMDAxIiwic2lkIjoidXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4yLjQuNi4zOjk5OTk5OTk5MCIsInN1YiI6IiJ9.OhniTJcPS45nhJVqXfxsngG5eYS_0BvqFg-96zaWFO90I_5_N9Eg_k7NmIF5eNZ9Xutl1aqSxlSp80EX07Gmk8uzZO9PEReo0YZxnNQV-Zeq1njCMmfdwusmiczFlwcBi5Bl1xYGmLrxP7NcAoljmDgMgmLH0xaKfP4VVim6snPkPHqBdSzAgSrrc-cgVDLl-9V2obPB1HiVsFMYfbHEIb4MPsnPRnSGavYHTxt34mHbRsS8BvoBy3v6VNYaewLr6yz-_Zstrnr4I_wxtYbSiPJUeVQHcD-a9Ck53BdjspnhVHZ4IFVvuNrpflVaB1A7P3A2xZ7G_a8gF_SHMynYSA
    TokenIntrospectionResponse:
      description: Token introspection response as described in RFC7662 section 2.2
      required:
        - active
      additionalProperties: {}
      properties:
        active:
          type: boolean
          description: True if the token is active, false if the token is expired, malformed etc. Required per RFC7662
        iss:
          type: string
          description: Contains the DID of the authorizer. Should be equal to 'sub'
          example: did:web:example.com:resource-owner
        sub:
          type: string
          description: Contains the DID of the resource owner
          example: did:web:example.com:resource-owner
        aud:
          type: string
          description: RFC7662 - Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].
          example: "https://target_token_endpoint"
        client_id:
          type: string
          description: The client (DID) the access token was issued to
          example: did:web:example.com:client
        exp:
          type: integer
          description: Expiration date in seconds since UNIX epoch
        iat:
          type: integer
          description: Issuance time in seconds since UNIX epoch
        scope:
          type: string
          description: granted scopes
        presentation_definition:
          type: object
          description: presentation definition, as described in presentation exchange specification, fulfilled to obtain the access token
          items:
            $ref: '#/components/schemas/PresentationDefinition'
        presentation_submission:
          type: object
          description: mapping of 'vps' contents to the 'presentation_definition'
        vps:
          type: array
          items:
            $ref: '#/components/schemas/VerifiablePresentation'
          description: The Verifiable Presentations that were used to request the access token using the same encoding as used in the access token request.
    WalletOwnerType:
      type: string
      description: |
        Wallet owner type that should fulfill the presentation definition.
        Can either be an organization wallet or a user (personal) wallet.
      enum:
        - organization
        - user
  securitySchemes:
    jwtBearerAuth:
      type: http
      scheme: bearer

security:
  - {}
  - jwtBearerAuth: []
