// PATCH: This template file was taken from pkg/codegen/templates/register.tmpl

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	Add(method string, path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

type Preprocessor interface {
    Preprocess(operationID string, context echo.Context)
}

type ErrorStatusCodeResolver interface {
	ResolveStatusCode(err error) int
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
    RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
{{if .}}
    wrapper := ServerInterfaceWrapper{
        Handler: si,
    }
{{end}}
// PATCH: This alteration wraps the call to the implementation in a function that sets the "OperationId" context parameter,
// so it can be used in error reporting middleware.
{{range .}}router.Add(http.Method{{.Method | lower | ucFirst}}, baseURL + "{{.Path | swaggerUriToEchoUri}}", func(context echo.Context) error {
        si.(Preprocessor).Preprocess("{{.OperationId}}", context)
        return wrapper.{{.OperationId}}(context)
    })
{{end}}
}
