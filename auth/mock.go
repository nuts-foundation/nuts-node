// Code generated by MockGen. DO NOT EDIT.
// Source: auth/interface.go

// Package auth is a generated GoMock package.
package auth

import (
	tls "crypto/tls"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	services "github.com/nuts-foundation/nuts-node/auth/services"
	oauth "github.com/nuts-foundation/nuts-node/auth/services/oauth"
)

// MockAuthenticationServices is a mock of AuthenticationServices interface.
type MockAuthenticationServices struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServicesMockRecorder
}

// MockAuthenticationServicesMockRecorder is the mock recorder for MockAuthenticationServices.
type MockAuthenticationServicesMockRecorder struct {
	mock *MockAuthenticationServices
}

// NewMockAuthenticationServices creates a new mock instance.
func NewMockAuthenticationServices(ctrl *gomock.Controller) *MockAuthenticationServices {
	mock := &MockAuthenticationServices{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationServices) EXPECT() *MockAuthenticationServicesMockRecorder {
	return m.recorder
}

// ContractNotary mocks base method.
func (m *MockAuthenticationServices) ContractNotary() services.ContractNotary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractNotary")
	ret0, _ := ret[0].(services.ContractNotary)
	return ret0
}

// ContractNotary indicates an expected call of ContractNotary.
func (mr *MockAuthenticationServicesMockRecorder) ContractNotary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractNotary", reflect.TypeOf((*MockAuthenticationServices)(nil).ContractNotary))
}

// HTTPTimeout mocks base method.
func (m *MockAuthenticationServices) HTTPTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// HTTPTimeout indicates an expected call of HTTPTimeout.
func (mr *MockAuthenticationServicesMockRecorder) HTTPTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPTimeout", reflect.TypeOf((*MockAuthenticationServices)(nil).HTTPTimeout))
}

// OAuthClient mocks base method.
func (m *MockAuthenticationServices) OAuthClient() oauth.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthClient")
	ret0, _ := ret[0].(oauth.Client)
	return ret0
}

// OAuthClient indicates an expected call of OAuthClient.
func (mr *MockAuthenticationServicesMockRecorder) OAuthClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthClient", reflect.TypeOf((*MockAuthenticationServices)(nil).OAuthClient))
}

// TLSConfig mocks base method.
func (m *MockAuthenticationServices) TLSConfig() *tls.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TLSConfig")
	ret0, _ := ret[0].(*tls.Config)
	return ret0
}

// TLSConfig indicates an expected call of TLSConfig.
func (mr *MockAuthenticationServicesMockRecorder) TLSConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TLSConfig", reflect.TypeOf((*MockAuthenticationServices)(nil).TLSConfig))
}
