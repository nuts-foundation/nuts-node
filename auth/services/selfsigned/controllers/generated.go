// Package controllers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package controllers

import (
	"context"
	"fmt"
	"io"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for EmployeeIDFormChoice.
const (
	Cancel  EmployeeIDFormChoice = "cancel"
	Confirm EmployeeIDFormChoice = "confirm"
)

// EmployeeIDForm defines model for EmployeeIDForm.
type EmployeeIDForm struct {
	// Choice The choice of the user to either confirm or cancel the signing of the contract.
	Choice EmployeeIDFormChoice `json:"choice"`

	// Secret The secret for this signing session.
	Secret string `json:"secret"`
}

// EmployeeIDFormChoice The choice of the user to either confirm or cancel the signing of the contract.
type EmployeeIDFormChoice string

// RenderEmployeeIDPageParams defines parameters for RenderEmployeeIDPage.
type RenderEmployeeIDPageParams struct {
	// Headless If true, the page will be rendered without the header and footer. This is useful for embedding the page in an iframe.
	Headless *bool `form:"headless,omitempty" json:"headless,omitempty"`
}

// HandleEmployeeIDFormParams defines parameters for HandleEmployeeIDForm.
type HandleEmployeeIDFormParams struct {
	// Headless If true, the page will be rendered without the header and footer. This is useful for embedding the page in an iframe.
	Headless *bool `form:"headless,omitempty" json:"headless,omitempty"`
}

// HandleEmployeeIDFormFormdataRequestBody defines body for HandleEmployeeIDForm for application/x-www-form-urlencoded ContentType.
type HandleEmployeeIDFormFormdataRequestBody = EmployeeIDForm

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Render the employee ID page
	// (GET /public/auth/v1/means/employeeid/{sessionID})
	RenderEmployeeIDPage(ctx echo.Context, sessionID string, params RenderEmployeeIDPageParams) error
	// Handle the employee ID form.
	// (POST /public/auth/v1/means/employeeid/{sessionID})
	HandleEmployeeIDForm(ctx echo.Context, sessionID string, params HandleEmployeeIDFormParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RenderEmployeeIDPage converts echo context to params.
func (w *ServerInterfaceWrapper) RenderEmployeeIDPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RenderEmployeeIDPageParams
	// ------------- Optional query parameter "headless" -------------

	err = runtime.BindQueryParameter("form", true, false, "headless", ctx.QueryParams(), &params.Headless)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter headless: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RenderEmployeeIDPage(ctx, sessionID, params)
	return err
}

// HandleEmployeeIDForm converts echo context to params.
func (w *ServerInterfaceWrapper) HandleEmployeeIDForm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleEmployeeIDFormParams
	// ------------- Optional query parameter "headless" -------------

	err = runtime.BindQueryParameter("form", true, false, "headless", ctx.QueryParams(), &params.Headless)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter headless: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HandleEmployeeIDForm(ctx, sessionID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/public/auth/v1/means/employeeid/:sessionID", wrapper.RenderEmployeeIDPage)
	router.POST(baseURL+"/public/auth/v1/means/employeeid/:sessionID", wrapper.HandleEmployeeIDForm)

}

type RenderEmployeeIDPageRequestObject struct {
	SessionID string `json:"sessionID"`
	Params    RenderEmployeeIDPageParams
}

type RenderEmployeeIDPageResponseObject interface {
	VisitRenderEmployeeIDPageResponse(w http.ResponseWriter) error
}

type RenderEmployeeIDPage200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response RenderEmployeeIDPage200TexthtmlResponse) VisitRenderEmployeeIDPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type RenderEmployeeIDPage404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response RenderEmployeeIDPage404TexthtmlResponse) VisitRenderEmployeeIDPageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type HandleEmployeeIDFormRequestObject struct {
	SessionID string `json:"sessionID"`
	Params    HandleEmployeeIDFormParams
	Body      *HandleEmployeeIDFormFormdataRequestBody
}

type HandleEmployeeIDFormResponseObject interface {
	VisitHandleEmployeeIDFormResponse(w http.ResponseWriter) error
}

type HandleEmployeeIDForm200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response HandleEmployeeIDForm200TexthtmlResponse) VisitHandleEmployeeIDFormResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type HandleEmployeeIDForm400TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response HandleEmployeeIDForm400TexthtmlResponse) VisitHandleEmployeeIDFormResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(400)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type HandleEmployeeIDForm404TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response HandleEmployeeIDForm404TexthtmlResponse) VisitHandleEmployeeIDFormResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(404)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Render the employee ID page
	// (GET /public/auth/v1/means/employeeid/{sessionID})
	RenderEmployeeIDPage(ctx context.Context, request RenderEmployeeIDPageRequestObject) (RenderEmployeeIDPageResponseObject, error)
	// Handle the employee ID form.
	// (POST /public/auth/v1/means/employeeid/{sessionID})
	HandleEmployeeIDForm(ctx context.Context, request HandleEmployeeIDFormRequestObject) (HandleEmployeeIDFormResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// RenderEmployeeIDPage operation middleware
func (sh *strictHandler) RenderEmployeeIDPage(ctx echo.Context, sessionID string, params RenderEmployeeIDPageParams) error {
	var request RenderEmployeeIDPageRequestObject

	request.SessionID = sessionID
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RenderEmployeeIDPage(ctx.Request().Context(), request.(RenderEmployeeIDPageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenderEmployeeIDPage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RenderEmployeeIDPageResponseObject); ok {
		return validResponse.VisitRenderEmployeeIDPageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// HandleEmployeeIDForm operation middleware
func (sh *strictHandler) HandleEmployeeIDForm(ctx echo.Context, sessionID string, params HandleEmployeeIDFormParams) error {
	var request HandleEmployeeIDFormRequestObject

	request.SessionID = sessionID
	request.Params = params

	if form, err := ctx.FormParams(); err == nil {
		var body HandleEmployeeIDFormFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleEmployeeIDForm(ctx.Request().Context(), request.(HandleEmployeeIDFormRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleEmployeeIDForm")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleEmployeeIDFormResponseObject); ok {
		return validResponse.VisitHandleEmployeeIDFormResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
