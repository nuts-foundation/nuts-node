// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package web

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for EmployeeIDFormChoice.
const (
	Cancel  EmployeeIDFormChoice = "cancel"
	Confirm EmployeeIDFormChoice = "confirm"
)

// EmployeeIDForm defines model for EmployeeIDForm.
type EmployeeIDForm struct {
	// Choice The choice of the user to either confirm or cancel the signing of the contract.
	Choice EmployeeIDFormChoice `json:"choice"`

	// Secret The secret for this signing session.
	Secret string `json:"secret"`
}

// EmployeeIDFormChoice The choice of the user to either confirm or cancel the signing of the contract.
type EmployeeIDFormChoice string

// SessionID defines model for sessionID.
type SessionID = string

// HandleEmployeeIDFormFormdataRequestBody defines body for HandleEmployeeIDForm for application/x-www-form-urlencoded ContentType.
type HandleEmployeeIDFormFormdataRequestBody = EmployeeIDForm

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Render the employee ID page
	// (GET /public/auth/v1/means/employeeid/{sessionID})
	RenderEmployeeIDPage(ctx echo.Context, sessionID SessionID) error
	// Handle the employee ID form.
	// (POST /public/auth/v1/means/employeeid/{sessionID})
	HandleEmployeeIDForm(ctx echo.Context, sessionID SessionID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RenderEmployeeIDPage converts echo context to params.
func (w *ServerInterfaceWrapper) RenderEmployeeIDPage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID SessionID

	err = runtime.BindStyledParameterWithOptions("simple", "sessionID", ctx.Param("sessionID"), &sessionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RenderEmployeeIDPage(ctx, sessionID)
	return err
}

// HandleEmployeeIDForm converts echo context to params.
func (w *ServerInterfaceWrapper) HandleEmployeeIDForm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID SessionID

	err = runtime.BindStyledParameterWithOptions("simple", "sessionID", ctx.Param("sessionID"), &sessionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleEmployeeIDForm(ctx, sessionID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/public/auth/v1/means/employeeid/:sessionID", wrapper.RenderEmployeeIDPage)
	router.POST(baseURL+"/public/auth/v1/means/employeeid/:sessionID", wrapper.HandleEmployeeIDForm)

}
