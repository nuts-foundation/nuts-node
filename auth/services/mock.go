// Code generated by MockGen. DO NOT EDIT.
// Source: auth/services/services.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	did "github.com/nuts-foundation/go-did/did"
	vc "github.com/nuts-foundation/go-did/vc"
	contract "github.com/nuts-foundation/nuts-node/auth/contract"
)

// MockSignedToken is a mock of SignedToken interface.
type MockSignedToken struct {
	ctrl     *gomock.Controller
	recorder *MockSignedTokenMockRecorder
}

// MockSignedTokenMockRecorder is the mock recorder for MockSignedToken.
type MockSignedTokenMockRecorder struct {
	mock *MockSignedToken
}

// NewMockSignedToken creates a new mock instance.
func NewMockSignedToken(ctrl *gomock.Controller) *MockSignedToken {
	mock := &MockSignedToken{ctrl: ctrl}
	mock.recorder = &MockSignedTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignedToken) EXPECT() *MockSignedTokenMockRecorder {
	return m.recorder
}

// Contract mocks base method.
func (m *MockSignedToken) Contract() contract.Contract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contract")
	ret0, _ := ret[0].(contract.Contract)
	return ret0
}

// Contract indicates an expected call of Contract.
func (mr *MockSignedTokenMockRecorder) Contract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contract", reflect.TypeOf((*MockSignedToken)(nil).Contract))
}

// SignerAttributes mocks base method.
func (m *MockSignedToken) SignerAttributes() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignerAttributes")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignerAttributes indicates an expected call of SignerAttributes.
func (mr *MockSignedTokenMockRecorder) SignerAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignerAttributes", reflect.TypeOf((*MockSignedToken)(nil).SignerAttributes))
}

// MockVPProofValueParser is a mock of VPProofValueParser interface.
type MockVPProofValueParser struct {
	ctrl     *gomock.Controller
	recorder *MockVPProofValueParserMockRecorder
}

// MockVPProofValueParserMockRecorder is the mock recorder for MockVPProofValueParser.
type MockVPProofValueParserMockRecorder struct {
	mock *MockVPProofValueParser
}

// NewMockVPProofValueParser creates a new mock instance.
func NewMockVPProofValueParser(ctrl *gomock.Controller) *MockVPProofValueParser {
	mock := &MockVPProofValueParser{ctrl: ctrl}
	mock.recorder = &MockVPProofValueParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPProofValueParser) EXPECT() *MockVPProofValueParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockVPProofValueParser) Parse(rawAuthToken string) (SignedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", rawAuthToken)
	ret0, _ := ret[0].(SignedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockVPProofValueParserMockRecorder) Parse(rawAuthToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockVPProofValueParser)(nil).Parse), rawAuthToken)
}

// Verify mocks base method.
func (m *MockVPProofValueParser) Verify(token SignedToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockVPProofValueParserMockRecorder) Verify(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVPProofValueParser)(nil).Verify), token)
}

// MockContractNotary is a mock of ContractNotary interface.
type MockContractNotary struct {
	ctrl     *gomock.Controller
	recorder *MockContractNotaryMockRecorder
}

// MockContractNotaryMockRecorder is the mock recorder for MockContractNotary.
type MockContractNotaryMockRecorder struct {
	mock *MockContractNotary
}

// NewMockContractNotary creates a new mock instance.
func NewMockContractNotary(ctrl *gomock.Controller) *MockContractNotary {
	mock := &MockContractNotary{ctrl: ctrl}
	mock.recorder = &MockContractNotaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractNotary) EXPECT() *MockContractNotaryMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockContractNotary) Configure() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure")
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockContractNotaryMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockContractNotary)(nil).Configure))
}

// CreateSigningSession mocks base method.
func (m *MockContractNotary) CreateSigningSession(sessionRequest CreateSessionRequest) (contract.SessionPointer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSigningSession", sessionRequest)
	ret0, _ := ret[0].(contract.SessionPointer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSigningSession indicates an expected call of CreateSigningSession.
func (mr *MockContractNotaryMockRecorder) CreateSigningSession(sessionRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSigningSession", reflect.TypeOf((*MockContractNotary)(nil).CreateSigningSession), sessionRequest)
}

// DrawUpContract mocks base method.
func (m *MockContractNotary) DrawUpContract(ctx context.Context, template contract.Template, orgID did.DID, validFrom time.Time, validDuration time.Duration, organizationCredential *vc.VerifiableCredential) (*contract.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawUpContract", ctx, template, orgID, validFrom, validDuration, organizationCredential)
	ret0, _ := ret[0].(*contract.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrawUpContract indicates an expected call of DrawUpContract.
func (mr *MockContractNotaryMockRecorder) DrawUpContract(ctx, template, orgID, validFrom, validDuration, organizationCredential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawUpContract", reflect.TypeOf((*MockContractNotary)(nil).DrawUpContract), ctx, template, orgID, validFrom, validDuration, organizationCredential)
}

// HandlerFunc mocks base method.
func (m *MockContractNotary) HandlerFunc() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerFunc")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// HandlerFunc indicates an expected call of HandlerFunc.
func (mr *MockContractNotaryMockRecorder) HandlerFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerFunc", reflect.TypeOf((*MockContractNotary)(nil).HandlerFunc))
}

// SigningSessionStatus mocks base method.
func (m *MockContractNotary) SigningSessionStatus(sessionID string) (contract.SigningSessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SigningSessionStatus", sessionID)
	ret0, _ := ret[0].(contract.SigningSessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SigningSessionStatus indicates an expected call of SigningSessionStatus.
func (mr *MockContractNotaryMockRecorder) SigningSessionStatus(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigningSessionStatus", reflect.TypeOf((*MockContractNotary)(nil).SigningSessionStatus), sessionID)
}

// Start mocks base method.
func (m *MockContractNotary) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockContractNotaryMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContractNotary)(nil).Start), ctx)
}

// VerifyVP mocks base method.
func (m *MockContractNotary) VerifyVP(vp vc.VerifiablePresentation, checkTime *time.Time) (contract.VPVerificationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyVP", vp, checkTime)
	ret0, _ := ret[0].(contract.VPVerificationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVP indicates an expected call of VerifyVP.
func (mr *MockContractNotaryMockRecorder) VerifyVP(vp, checkTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVP", reflect.TypeOf((*MockContractNotary)(nil).VerifyVP), vp, checkTime)
}
