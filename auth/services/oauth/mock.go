// Code generated by MockGen. DO NOT EDIT.
// Source: auth/services/oauth/interface.go
//
// Generated by this command:
//
//	mockgen -destination=auth/services/oauth/mock.go -package=oauth -source=auth/services/oauth/interface.go
//

// Package oauth is a generated GoMock package.
package oauth

import (
	context "context"
	url "net/url"
	reflect "reflect"

	oauth "github.com/nuts-foundation/nuts-node/auth/oauth"
	services "github.com/nuts-foundation/nuts-node/auth/services"
	gomock "go.uber.org/mock/gomock"
)

// MockRelyingParty is a mock of RelyingParty interface.
type MockRelyingParty struct {
	ctrl     *gomock.Controller
	recorder *MockRelyingPartyMockRecorder
}

// MockRelyingPartyMockRecorder is the mock recorder for MockRelyingParty.
type MockRelyingPartyMockRecorder struct {
	mock *MockRelyingParty
}

// NewMockRelyingParty creates a new mock instance.
func NewMockRelyingParty(ctrl *gomock.Controller) *MockRelyingParty {
	mock := &MockRelyingParty{ctrl: ctrl}
	mock.recorder = &MockRelyingPartyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelyingParty) EXPECT() *MockRelyingPartyMockRecorder {
	return m.recorder
}

// CreateJwtGrant mocks base method.
func (m *MockRelyingParty) CreateJwtGrant(ctx context.Context, request services.CreateJwtGrantRequest) (*services.JwtBearerTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJwtGrant", ctx, request)
	ret0, _ := ret[0].(*services.JwtBearerTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJwtGrant indicates an expected call of CreateJwtGrant.
func (mr *MockRelyingPartyMockRecorder) CreateJwtGrant(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJwtGrant", reflect.TypeOf((*MockRelyingParty)(nil).CreateJwtGrant), ctx, request)
}

// RequestRFC003AccessToken mocks base method.
func (m *MockRelyingParty) RequestRFC003AccessToken(ctx context.Context, jwtGrantToken string, authServerEndpoint url.URL) (*oauth.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestRFC003AccessToken", ctx, jwtGrantToken, authServerEndpoint)
	ret0, _ := ret[0].(*oauth.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestRFC003AccessToken indicates an expected call of RequestRFC003AccessToken.
func (mr *MockRelyingPartyMockRecorder) RequestRFC003AccessToken(ctx, jwtGrantToken, authServerEndpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRFC003AccessToken", reflect.TypeOf((*MockRelyingParty)(nil).RequestRFC003AccessToken), ctx, jwtGrantToken, authServerEndpoint)
}

// MockAuthorizationServer is a mock of AuthorizationServer interface.
type MockAuthorizationServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServerMockRecorder
}

// MockAuthorizationServerMockRecorder is the mock recorder for MockAuthorizationServer.
type MockAuthorizationServerMockRecorder struct {
	mock *MockAuthorizationServer
}

// NewMockAuthorizationServer creates a new mock instance.
func NewMockAuthorizationServer(ctrl *gomock.Controller) *MockAuthorizationServer {
	mock := &MockAuthorizationServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationServer) EXPECT() *MockAuthorizationServerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockAuthorizationServer) Configure(clockSkewInMilliseconds int, secureMode bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", clockSkewInMilliseconds, secureMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockAuthorizationServerMockRecorder) Configure(clockSkewInMilliseconds, secureMode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockAuthorizationServer)(nil).Configure), clockSkewInMilliseconds, secureMode)
}

// CreateAccessToken mocks base method.
func (m *MockAuthorizationServer) CreateAccessToken(ctx context.Context, request services.CreateAccessTokenRequest) (*oauth.TokenResponse, *oauth.OAuth2Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", ctx, request)
	ret0, _ := ret[0].(*oauth.TokenResponse)
	ret1, _ := ret[1].(*oauth.OAuth2Error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockAuthorizationServerMockRecorder) CreateAccessToken(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockAuthorizationServer)(nil).CreateAccessToken), ctx, request)
}

// IntrospectAccessToken mocks base method.
func (m *MockAuthorizationServer) IntrospectAccessToken(ctx context.Context, token string) (*services.NutsAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectAccessToken", ctx, token)
	ret0, _ := ret[0].(*services.NutsAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrospectAccessToken indicates an expected call of IntrospectAccessToken.
func (mr *MockAuthorizationServerMockRecorder) IntrospectAccessToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectAccessToken", reflect.TypeOf((*MockAuthorizationServer)(nil).IntrospectAccessToken), ctx, token)
}
