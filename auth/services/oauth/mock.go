// Code generated by MockGen. DO NOT EDIT.
// Source: auth/services/oauth/interface.go

// Package oauth is a generated GoMock package.
package oauth

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	did "github.com/nuts-foundation/go-did/did"
	services "github.com/nuts-foundation/nuts-node/auth/services"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockClient) Configure(clockSkewInMilliseconds int, secureMode bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", clockSkewInMilliseconds, secureMode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockClientMockRecorder) Configure(clockSkewInMilliseconds, secureMode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockClient)(nil).Configure), clockSkewInMilliseconds, secureMode)
}

// CreateAccessToken mocks base method.
func (m *MockClient) CreateAccessToken(request services.CreateAccessTokenRequest) (*services.AccessTokenResult, *ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", request)
	ret0, _ := ret[0].(*services.AccessTokenResult)
	ret1, _ := ret[1].(*ErrorResponse)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockClientMockRecorder) CreateAccessToken(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockClient)(nil).CreateAccessToken), request)
}

// CreateJwtGrant mocks base method.
func (m *MockClient) CreateJwtGrant(request services.CreateJwtGrantRequest) (*services.JwtBearerTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJwtGrant", request)
	ret0, _ := ret[0].(*services.JwtBearerTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJwtGrant indicates an expected call of CreateJwtGrant.
func (mr *MockClientMockRecorder) CreateJwtGrant(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJwtGrant", reflect.TypeOf((*MockClient)(nil).CreateJwtGrant), request)
}

// GetOAuthEndpointURL mocks base method.
func (m *MockClient) GetOAuthEndpointURL(service string, authorizer did.DID) (url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthEndpointURL", service, authorizer)
	ret0, _ := ret[0].(url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthEndpointURL indicates an expected call of GetOAuthEndpointURL.
func (mr *MockClientMockRecorder) GetOAuthEndpointURL(service, authorizer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthEndpointURL", reflect.TypeOf((*MockClient)(nil).GetOAuthEndpointURL), service, authorizer)
}

// IntrospectAccessToken mocks base method.
func (m *MockClient) IntrospectAccessToken(token string) (*services.NutsAccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectAccessToken", token)
	ret0, _ := ret[0].(*services.NutsAccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrospectAccessToken indicates an expected call of IntrospectAccessToken.
func (mr *MockClientMockRecorder) IntrospectAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectAccessToken", reflect.TypeOf((*MockClient)(nil).IntrospectAccessToken), token)
}
