// Code generated by MockGen. DO NOT EDIT.
// Source: auth/api/iam/jar.go
//
// Generated by this command:
//
//	mockgen -destination=auth/api/iam/jar_mock.go -package=iam -source=auth/api/iam/jar.go
//

// Package iam is a generated GoMock package.
package iam

import (
	context "context"
	url "net/url"
	reflect "reflect"

	did "github.com/nuts-foundation/go-did/did"
	gomock "go.uber.org/mock/gomock"
)

// MockJAR is a mock of JAR interface.
type MockJAR struct {
	ctrl     *gomock.Controller
	recorder *MockJARMockRecorder
}

// MockJARMockRecorder is the mock recorder for MockJAR.
type MockJARMockRecorder struct {
	mock *MockJAR
}

// NewMockJAR creates a new mock instance.
func NewMockJAR(ctrl *gomock.Controller) *MockJAR {
	mock := &MockJAR{ctrl: ctrl}
	mock.recorder = &MockJARMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJAR) EXPECT() *MockJARMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJAR) Create(client did.DID, server *did.DID, modifier requestObjectModifier) jarRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", client, server, modifier)
	ret0, _ := ret[0].(jarRequest)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJARMockRecorder) Create(client, server, modifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJAR)(nil).Create), client, server, modifier)
}

// Parse mocks base method.
func (m *MockJAR) Parse(ctx context.Context, ownDID did.DID, q url.Values) (oauthParameters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, ownDID, q)
	ret0, _ := ret[0].(oauthParameters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockJARMockRecorder) Parse(ctx, ownDID, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockJAR)(nil).Parse), ctx, ownDID, q)
}

// Sign mocks base method.
func (m *MockJAR) Sign(ctx context.Context, claims oauthParameters) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockJARMockRecorder) Sign(ctx, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockJAR)(nil).Sign), ctx, claims)
}
