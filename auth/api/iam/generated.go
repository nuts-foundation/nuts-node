// Package iam provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package iam

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	JwtBearerAuthScopes = "jwtBearerAuth.Scopes"
)

// RedirectResponseWithID defines model for RedirectResponseWithID.
type RedirectResponseWithID struct {
	// RedirectUri The URL to which the user-agent will be redirected after the authorization request.
	RedirectUri string `json:"redirect_uri"`

	// SessionId The session ID that can be used to retrieve the access token by the calling application.
	SessionId string `json:"session_id"`
}

// TokenIntrospectionRequest Token introspection request as described in RFC7662 section 2.1
// Alongside the defined properties, it can return values (additionalProperties) from the Verifiable Credentials that resulted from the Presentation Exchange.
type TokenIntrospectionRequest struct {
	Token string `json:"token"`
}

// TokenIntrospectionResponse Token introspection response as described in RFC7662 section 2.2
type TokenIntrospectionResponse struct {
	// Active True if the token is active, false if the token is expired, malformed etc. Required per RFC7662
	Active bool `json:"active"`

	// Aud RFC7662 - Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].
	Aud *string `json:"aud,omitempty"`

	// ClientId The client (DID) the access token was issued to
	ClientId *string `json:"client_id,omitempty"`

	// Exp Expiration date in seconds since UNIX epoch
	Exp *int `json:"exp,omitempty"`

	// Iat Issuance time in seconds since UNIX epoch
	Iat *int `json:"iat,omitempty"`

	// Iss Contains the DID of the authorizer. Should be equal to 'sub'
	Iss *string `json:"iss,omitempty"`

	// PresentationDefinition presentation definition, as described in presentation exchange specification, fulfilled to obtain the access token
	PresentationDefinition *map[string]interface{} `json:"presentation_definition,omitempty"`

	// PresentationSubmission mapping of 'vps' contents to the 'presentation_definition'
	PresentationSubmission *map[string]interface{} `json:"presentation_submission,omitempty"`

	// Scope granted scopes
	Scope *string `json:"scope,omitempty"`

	// Sub Contains the DID of the resource owner
	Sub *string `json:"sub,omitempty"`

	// Vps The Verifiable Presentations that were used to request the access token using the same encoding as used in the access token request.
	Vps                  *[]VerifiablePresentation `json:"vps,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// UserDetails Claims about the authorized user.
type UserDetails struct {
	// Id Machine-readable identifier, uniquely identifying the user in the issuing system.
	Id string `json:"id"`

	// Name Human-readable name of the user.
	Name string `json:"name"`

	// Role Role of the user.
	Role string `json:"role"`
}

// RequestServiceAccessTokenJSONBody defines parameters for RequestServiceAccessToken.
type RequestServiceAccessTokenJSONBody struct {
	// Scope The scope that will be the service for which this access token can be used.
	Scope    string `json:"scope"`
	Verifier string `json:"verifier"`
}

// RequestUserAccessTokenJSONBody defines parameters for RequestUserAccessToken.
type RequestUserAccessTokenJSONBody struct {
	// PreauthorizedUser Claims about the authorized user.
	PreauthorizedUser *UserDetails `json:"preauthorized_user,omitempty"`

	// RedirectUri The URL to which the user-agent will be redirected after the authorization request.
	// This is the URL of the calling application.
	// The OAuth2 flow will finish at the /callback URL of the node and the node will redirect the user to this redirect_uri.
	RedirectUri string `json:"redirect_uri"`

	// Scope The scope that will be the service for which this access token can be used.
	Scope string `json:"scope"`

	// Verifier The DID of the verifier, the relying party for which this access token is requested.
	Verifier string `json:"verifier"`
}

// HandleAuthorizeRequestParams defines parameters for HandleAuthorizeRequest.
type HandleAuthorizeRequestParams struct {
	Params *map[string]string `form:"params,omitempty" json:"params,omitempty"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// Code The authorization code received from the authorization server.
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// State The client state.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Error The error code.
	Error *string `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription The error description.
	ErrorDescription *string `form:"error_description,omitempty" json:"error_description,omitempty"`
}

// PresentationDefinitionParams defines parameters for PresentationDefinition.
type PresentationDefinitionParams struct {
	Scope           string           `form:"scope" json:"scope"`
	WalletOwnerType *WalletOwnerType `form:"wallet_owner_type,omitempty" json:"wallet_owner_type,omitempty"`
}

// HandleAuthorizeResponseFormdataBody defines parameters for HandleAuthorizeResponse.
type HandleAuthorizeResponseFormdataBody struct {
	// Error error code as defined by the OAuth2 specification
	Error *string `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription error description as defined by the OAuth2 specification
	ErrorDescription       *string `form:"error_description,omitempty" json:"error_description,omitempty"`
	PresentationSubmission *string `form:"presentation_submission,omitempty" json:"presentation_submission,omitempty"`

	// State the client state for the verifier
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// VpToken A Verifiable Presentation in either JSON-LD or JWT format.
	VpToken *string `form:"vp_token,omitempty" json:"vp_token,omitempty"`
}

// HandleTokenRequestFormdataBody defines parameters for HandleTokenRequest.
type HandleTokenRequestFormdataBody struct {
	Assertion              *string `form:"assertion,omitempty" json:"assertion,omitempty"`
	ClientId               *string `form:"client_id,omitempty" json:"client_id,omitempty"`
	Code                   *string `form:"code,omitempty" json:"code,omitempty"`
	CodeVerifier           *string `form:"code_verifier,omitempty" json:"code_verifier,omitempty"`
	GrantType              string  `form:"grant_type" json:"grant_type"`
	PresentationSubmission *string `form:"presentation_submission,omitempty" json:"presentation_submission,omitempty"`
	Scope                  *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// IntrospectAccessTokenFormdataRequestBody defines body for IntrospectAccessToken for application/x-www-form-urlencoded ContentType.
type IntrospectAccessTokenFormdataRequestBody = TokenIntrospectionRequest

// RequestServiceAccessTokenJSONRequestBody defines body for RequestServiceAccessToken for application/json ContentType.
type RequestServiceAccessTokenJSONRequestBody RequestServiceAccessTokenJSONBody

// RequestUserAccessTokenJSONRequestBody defines body for RequestUserAccessToken for application/json ContentType.
type RequestUserAccessTokenJSONRequestBody RequestUserAccessTokenJSONBody

// HandleAuthorizeResponseFormdataRequestBody defines body for HandleAuthorizeResponse for application/x-www-form-urlencoded ContentType.
type HandleAuthorizeResponseFormdataRequestBody HandleAuthorizeResponseFormdataBody

// HandleTokenRequestFormdataRequestBody defines body for HandleTokenRequest for application/x-www-form-urlencoded ContentType.
type HandleTokenRequestFormdataRequestBody HandleTokenRequestFormdataBody

// Getter for additional properties for TokenIntrospectionResponse. Returns the specified
// element and whether it was found
func (a TokenIntrospectionResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TokenIntrospectionResponse
func (a *TokenIntrospectionResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TokenIntrospectionResponse to handle AdditionalProperties
func (a *TokenIntrospectionResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["active"]; found {
		err = json.Unmarshal(raw, &a.Active)
		if err != nil {
			return fmt.Errorf("error reading 'active': %w", err)
		}
		delete(object, "active")
	}

	if raw, found := object["aud"]; found {
		err = json.Unmarshal(raw, &a.Aud)
		if err != nil {
			return fmt.Errorf("error reading 'aud': %w", err)
		}
		delete(object, "aud")
	}

	if raw, found := object["client_id"]; found {
		err = json.Unmarshal(raw, &a.ClientId)
		if err != nil {
			return fmt.Errorf("error reading 'client_id': %w", err)
		}
		delete(object, "client_id")
	}

	if raw, found := object["exp"]; found {
		err = json.Unmarshal(raw, &a.Exp)
		if err != nil {
			return fmt.Errorf("error reading 'exp': %w", err)
		}
		delete(object, "exp")
	}

	if raw, found := object["iat"]; found {
		err = json.Unmarshal(raw, &a.Iat)
		if err != nil {
			return fmt.Errorf("error reading 'iat': %w", err)
		}
		delete(object, "iat")
	}

	if raw, found := object["iss"]; found {
		err = json.Unmarshal(raw, &a.Iss)
		if err != nil {
			return fmt.Errorf("error reading 'iss': %w", err)
		}
		delete(object, "iss")
	}

	if raw, found := object["presentation_definition"]; found {
		err = json.Unmarshal(raw, &a.PresentationDefinition)
		if err != nil {
			return fmt.Errorf("error reading 'presentation_definition': %w", err)
		}
		delete(object, "presentation_definition")
	}

	if raw, found := object["presentation_submission"]; found {
		err = json.Unmarshal(raw, &a.PresentationSubmission)
		if err != nil {
			return fmt.Errorf("error reading 'presentation_submission': %w", err)
		}
		delete(object, "presentation_submission")
	}

	if raw, found := object["scope"]; found {
		err = json.Unmarshal(raw, &a.Scope)
		if err != nil {
			return fmt.Errorf("error reading 'scope': %w", err)
		}
		delete(object, "scope")
	}

	if raw, found := object["sub"]; found {
		err = json.Unmarshal(raw, &a.Sub)
		if err != nil {
			return fmt.Errorf("error reading 'sub': %w", err)
		}
		delete(object, "sub")
	}

	if raw, found := object["vps"]; found {
		err = json.Unmarshal(raw, &a.Vps)
		if err != nil {
			return fmt.Errorf("error reading 'vps': %w", err)
		}
		delete(object, "vps")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TokenIntrospectionResponse to handle AdditionalProperties
func (a TokenIntrospectionResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["active"], err = json.Marshal(a.Active)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'active': %w", err)
	}

	if a.Aud != nil {
		object["aud"], err = json.Marshal(a.Aud)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aud': %w", err)
		}
	}

	if a.ClientId != nil {
		object["client_id"], err = json.Marshal(a.ClientId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'client_id': %w", err)
		}
	}

	if a.Exp != nil {
		object["exp"], err = json.Marshal(a.Exp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'exp': %w", err)
		}
	}

	if a.Iat != nil {
		object["iat"], err = json.Marshal(a.Iat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iat': %w", err)
		}
	}

	if a.Iss != nil {
		object["iss"], err = json.Marshal(a.Iss)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iss': %w", err)
		}
	}

	if a.PresentationDefinition != nil {
		object["presentation_definition"], err = json.Marshal(a.PresentationDefinition)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presentation_definition': %w", err)
		}
	}

	if a.PresentationSubmission != nil {
		object["presentation_submission"], err = json.Marshal(a.PresentationSubmission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presentation_submission': %w", err)
		}
	}

	if a.Scope != nil {
		object["scope"], err = json.Marshal(a.Scope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scope': %w", err)
		}
	}

	if a.Sub != nil {
		object["sub"], err = json.Marshal(a.Sub)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sub': %w", err)
		}
	}

	if a.Vps != nil {
		object["vps"], err = json.Marshal(a.Vps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vps': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the root did:web DID of this domain.
	// (GET /.well-known/did.json)
	GetRootWebDID(ctx echo.Context) error
	// Get the OAuth2 Authorization Server metadata of a root did:web DID.
	// (GET /.well-known/oauth-authorization-server)
	RootOAuthAuthorizationServerMetadata(ctx echo.Context) error
	// Get the OAuth2 Authorization Server metadata for a did:web with a :iam:<id> path.
	// (GET /.well-known/oauth-authorization-server/iam/{id})
	OAuthAuthorizationServerMetadata(ctx echo.Context, id string) error
	// Returns the did:web DID for the specified tenant.
	// (GET /iam/{id}/did.json)
	GetTenantWebDID(ctx echo.Context, id string) error
	// Introspection endpoint to retrieve information from an Access Token as described by RFC7662
	// (POST /internal/auth/v2/accesstoken/introspect)
	IntrospectAccessToken(ctx echo.Context) error
	// Get the access token from the Nuts node that was requested through /request-user-access-token.
	// (GET /internal/auth/v2/accesstoken/{sessionID})
	RetrieveAccessToken(ctx echo.Context, sessionID string) error
	// Start the authorization flow to get an access token from a remote authorization server.
	// (POST /internal/auth/v2/{did}/request-service-access-token)
	RequestServiceAccessToken(ctx echo.Context, did string) error
	// Start the authorization code flow to get an access token from a remote authorization server when user context is required.
	// (POST /internal/auth/v2/{did}/request-user-access-token)
	RequestUserAccessToken(ctx echo.Context, did string) error
	// Used by resource owners to initiate the authorization code flow.
	// (GET /oauth2/{did}/authorize)
	HandleAuthorizeRequest(ctx echo.Context, did string, params HandleAuthorizeRequestParams) error
	// The OAuth2 callback endpoint of the client.
	// (GET /oauth2/{did}/callback)
	Callback(ctx echo.Context, did string, params CallbackParams) error
	// Get the OAuth2 Client metadata
	// (GET /oauth2/{did}/oauth-client)
	OAuthClientMetadata(ctx echo.Context, did string) error
	// Used by relying parties to obtain a presentation definition for desired scopes as specified by Nuts RFC021.
	// (GET /oauth2/{did}/presentation_definition)
	PresentationDefinition(ctx echo.Context, did string, params PresentationDefinitionParams) error
	// Used by wallets to post the authorization response or error to.
	// (POST /oauth2/{did}/response)
	HandleAuthorizeResponse(ctx echo.Context, did string) error
	// Used by to request access- or refresh tokens.
	// (POST /oauth2/{did}/token)
	HandleTokenRequest(ctx echo.Context, did string) error
	// Get the StatusList2021Credential for the given DID and page
	// (GET /statuslist/{did}/{page})
	StatusList(ctx echo.Context, did string, page int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRootWebDID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRootWebDID(ctx echo.Context) error {
	var err error

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRootWebDID(ctx)
	return err
}

// RootOAuthAuthorizationServerMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) RootOAuthAuthorizationServerMetadata(ctx echo.Context) error {
	var err error

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RootOAuthAuthorizationServerMetadata(ctx)
	return err
}

// OAuthAuthorizationServerMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthAuthorizationServerMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthAuthorizationServerMetadata(ctx, id)
	return err
}

// GetTenantWebDID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenantWebDID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenantWebDID(ctx, id)
	return err
}

// IntrospectAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) IntrospectAccessToken(ctx echo.Context) error {
	var err error

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntrospectAccessToken(ctx)
	return err
}

// RetrieveAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithOptions("simple", "sessionID", ctx.Param("sessionID"), &sessionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveAccessToken(ctx, sessionID)
	return err
}

// RequestServiceAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestServiceAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestServiceAccessToken(ctx, did)
	return err
}

// RequestUserAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestUserAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestUserAccessToken(ctx, did)
	return err
}

// HandleAuthorizeRequest converts echo context to params.
func (w *ServerInterfaceWrapper) HandleAuthorizeRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleAuthorizeRequestParams
	// ------------- Optional query parameter "params" -------------

	err = runtime.BindQueryParameter("form", true, false, "params", ctx.QueryParams(), &params.Params)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter params: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleAuthorizeRequest(ctx, did, params)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", ctx.QueryParams(), &params.Error)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error: %s", err))
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", ctx.QueryParams(), &params.ErrorDescription)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error_description: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Callback(ctx, did, params)
	return err
}

// OAuthClientMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthClientMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthClientMetadata(ctx, did)
	return err
}

// PresentationDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) PresentationDefinition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PresentationDefinitionParams
	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "wallet_owner_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "wallet_owner_type", ctx.QueryParams(), &params.WalletOwnerType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter wallet_owner_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PresentationDefinition(ctx, did, params)
	return err
}

// HandleAuthorizeResponse converts echo context to params.
func (w *ServerInterfaceWrapper) HandleAuthorizeResponse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleAuthorizeResponse(ctx, did)
	return err
}

// HandleTokenRequest converts echo context to params.
func (w *ServerInterfaceWrapper) HandleTokenRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleTokenRequest(ctx, did)
	return err
}

// StatusList converts echo context to params.
func (w *ServerInterfaceWrapper) StatusList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	did = ctx.Param("did")

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithOptions("simple", "page", ctx.Param("page"), &page, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StatusList(ctx, did, page)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/.well-known/did.json", wrapper.GetRootWebDID)
	router.GET(baseURL+"/.well-known/oauth-authorization-server", wrapper.RootOAuthAuthorizationServerMetadata)
	router.GET(baseURL+"/.well-known/oauth-authorization-server/iam/:id", wrapper.OAuthAuthorizationServerMetadata)
	router.GET(baseURL+"/iam/:id/did.json", wrapper.GetTenantWebDID)
	router.POST(baseURL+"/internal/auth/v2/accesstoken/introspect", wrapper.IntrospectAccessToken)
	router.GET(baseURL+"/internal/auth/v2/accesstoken/:sessionID", wrapper.RetrieveAccessToken)
	router.POST(baseURL+"/internal/auth/v2/:did/request-service-access-token", wrapper.RequestServiceAccessToken)
	router.POST(baseURL+"/internal/auth/v2/:did/request-user-access-token", wrapper.RequestUserAccessToken)
	router.GET(baseURL+"/oauth2/:did/authorize", wrapper.HandleAuthorizeRequest)
	router.GET(baseURL+"/oauth2/:did/callback", wrapper.Callback)
	router.GET(baseURL+"/oauth2/:did/oauth-client", wrapper.OAuthClientMetadata)
	router.GET(baseURL+"/oauth2/:did/presentation_definition", wrapper.PresentationDefinition)
	router.POST(baseURL+"/oauth2/:did/response", wrapper.HandleAuthorizeResponse)
	router.POST(baseURL+"/oauth2/:did/token", wrapper.HandleTokenRequest)
	router.GET(baseURL+"/statuslist/:did/:page", wrapper.StatusList)

}

type GetRootWebDIDRequestObject struct {
}

type GetRootWebDIDResponseObject interface {
	VisitGetRootWebDIDResponse(w http.ResponseWriter) error
}

type GetRootWebDID200JSONResponse DIDDocument

func (response GetRootWebDID200JSONResponse) VisitGetRootWebDIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRootWebDID404Response struct {
}

func (response GetRootWebDID404Response) VisitGetRootWebDIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RootOAuthAuthorizationServerMetadataRequestObject struct {
}

type RootOAuthAuthorizationServerMetadataResponseObject interface {
	VisitRootOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error
}

type RootOAuthAuthorizationServerMetadata200JSONResponse OAuthAuthorizationServerMetadata

func (response RootOAuthAuthorizationServerMetadata200JSONResponse) VisitRootOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RootOAuthAuthorizationServerMetadatadefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RootOAuthAuthorizationServerMetadatadefaultApplicationProblemPlusJSONResponse) VisitRootOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthAuthorizationServerMetadataRequestObject struct {
	Id string `json:"id"`
}

type OAuthAuthorizationServerMetadataResponseObject interface {
	VisitOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error
}

type OAuthAuthorizationServerMetadata200JSONResponse OAuthAuthorizationServerMetadata

func (response OAuthAuthorizationServerMetadata200JSONResponse) VisitOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthAuthorizationServerMetadatadefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response OAuthAuthorizationServerMetadatadefaultApplicationProblemPlusJSONResponse) VisitOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTenantWebDIDRequestObject struct {
	Id string `json:"id"`
}

type GetTenantWebDIDResponseObject interface {
	VisitGetTenantWebDIDResponse(w http.ResponseWriter) error
}

type GetTenantWebDID200JSONResponse DIDDocument

func (response GetTenantWebDID200JSONResponse) VisitGetTenantWebDIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenantWebDID404Response struct {
}

func (response GetTenantWebDID404Response) VisitGetTenantWebDIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type IntrospectAccessTokenRequestObject struct {
	Body *IntrospectAccessTokenFormdataRequestBody
}

type IntrospectAccessTokenResponseObject interface {
	VisitIntrospectAccessTokenResponse(w http.ResponseWriter) error
}

type IntrospectAccessToken200JSONResponse TokenIntrospectionResponse

func (response IntrospectAccessToken200JSONResponse) VisitIntrospectAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IntrospectAccessToken401Response struct {
}

func (response IntrospectAccessToken401Response) VisitIntrospectAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RetrieveAccessTokenRequestObject struct {
	SessionID string `json:"sessionID"`
}

type RetrieveAccessTokenResponseObject interface {
	VisitRetrieveAccessTokenResponse(w http.ResponseWriter) error
}

type RetrieveAccessToken200JSONResponse TokenResponse

func (response RetrieveAccessToken200JSONResponse) VisitRetrieveAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveAccessTokendefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RetrieveAccessTokendefaultApplicationProblemPlusJSONResponse) VisitRetrieveAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestServiceAccessTokenRequestObject struct {
	Did  string `json:"did"`
	Body *RequestServiceAccessTokenJSONRequestBody
}

type RequestServiceAccessTokenResponseObject interface {
	VisitRequestServiceAccessTokenResponse(w http.ResponseWriter) error
}

type RequestServiceAccessToken200JSONResponse TokenResponse

func (response RequestServiceAccessToken200JSONResponse) VisitRequestServiceAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestServiceAccessTokendefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RequestServiceAccessTokendefaultApplicationProblemPlusJSONResponse) VisitRequestServiceAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestUserAccessTokenRequestObject struct {
	Did  string `json:"did"`
	Body *RequestUserAccessTokenJSONRequestBody
}

type RequestUserAccessTokenResponseObject interface {
	VisitRequestUserAccessTokenResponse(w http.ResponseWriter) error
}

type RequestUserAccessToken200JSONResponse RedirectResponseWithID

func (response RequestUserAccessToken200JSONResponse) VisitRequestUserAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestUserAccessTokendefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RequestUserAccessTokendefaultApplicationProblemPlusJSONResponse) VisitRequestUserAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HandleAuthorizeRequestRequestObject struct {
	Did    string `json:"did"`
	Params HandleAuthorizeRequestParams
}

type HandleAuthorizeRequestResponseObject interface {
	VisitHandleAuthorizeRequestResponse(w http.ResponseWriter) error
}

type HandleAuthorizeRequest200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response HandleAuthorizeRequest200TexthtmlResponse) VisitHandleAuthorizeRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type HandleAuthorizeRequest302ResponseHeaders struct {
	Location string
}

type HandleAuthorizeRequest302Response struct {
	Headers HandleAuthorizeRequest302ResponseHeaders
}

func (response HandleAuthorizeRequest302Response) VisitHandleAuthorizeRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type CallbackRequestObject struct {
	Did    string `json:"did"`
	Params CallbackParams
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback302ResponseHeaders struct {
	Location string
}

type Callback302Response struct {
	Headers Callback302ResponseHeaders
}

func (response Callback302Response) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type CallbackdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response CallbackdefaultApplicationProblemPlusJSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type OAuthClientMetadataRequestObject struct {
	Did string `json:"did"`
}

type OAuthClientMetadataResponseObject interface {
	VisitOAuthClientMetadataResponse(w http.ResponseWriter) error
}

type OAuthClientMetadata200JSONResponse OAuthClientMetadata

func (response OAuthClientMetadata200JSONResponse) VisitOAuthClientMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthClientMetadatadefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response OAuthClientMetadatadefaultApplicationProblemPlusJSONResponse) VisitOAuthClientMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PresentationDefinitionRequestObject struct {
	Did    string `json:"did"`
	Params PresentationDefinitionParams
}

type PresentationDefinitionResponseObject interface {
	VisitPresentationDefinitionResponse(w http.ResponseWriter) error
}

type PresentationDefinition200JSONResponse PresentationDefinition

func (response PresentationDefinition200JSONResponse) VisitPresentationDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PresentationDefinitiondefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response PresentationDefinitiondefaultApplicationProblemPlusJSONResponse) VisitPresentationDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HandleAuthorizeResponseRequestObject struct {
	Did  string `json:"did"`
	Body *HandleAuthorizeResponseFormdataRequestBody
}

type HandleAuthorizeResponseResponseObject interface {
	VisitHandleAuthorizeResponseResponse(w http.ResponseWriter) error
}

type HandleAuthorizeResponse200JSONResponse RedirectResponse

func (response HandleAuthorizeResponse200JSONResponse) VisitHandleAuthorizeResponseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HandleTokenRequestRequestObject struct {
	Did  string `json:"did"`
	Body *HandleTokenRequestFormdataRequestBody
}

type HandleTokenRequestResponseObject interface {
	VisitHandleTokenRequestResponse(w http.ResponseWriter) error
}

type HandleTokenRequest200JSONResponse TokenResponse

func (response HandleTokenRequest200JSONResponse) VisitHandleTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HandleTokenRequestdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response HandleTokenRequestdefaultJSONResponse) VisitHandleTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type StatusListRequestObject struct {
	Did  string `json:"did"`
	Page int    `json:"page"`
}

type StatusListResponseObject interface {
	VisitStatusListResponse(w http.ResponseWriter) error
}

type StatusList200JSONResponse VerifiableCredential

func (response StatusList200JSONResponse) VisitStatusListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusListdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response StatusListdefaultApplicationProblemPlusJSONResponse) VisitStatusListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns the root did:web DID of this domain.
	// (GET /.well-known/did.json)
	GetRootWebDID(ctx context.Context, request GetRootWebDIDRequestObject) (GetRootWebDIDResponseObject, error)
	// Get the OAuth2 Authorization Server metadata of a root did:web DID.
	// (GET /.well-known/oauth-authorization-server)
	RootOAuthAuthorizationServerMetadata(ctx context.Context, request RootOAuthAuthorizationServerMetadataRequestObject) (RootOAuthAuthorizationServerMetadataResponseObject, error)
	// Get the OAuth2 Authorization Server metadata for a did:web with a :iam:<id> path.
	// (GET /.well-known/oauth-authorization-server/iam/{id})
	OAuthAuthorizationServerMetadata(ctx context.Context, request OAuthAuthorizationServerMetadataRequestObject) (OAuthAuthorizationServerMetadataResponseObject, error)
	// Returns the did:web DID for the specified tenant.
	// (GET /iam/{id}/did.json)
	GetTenantWebDID(ctx context.Context, request GetTenantWebDIDRequestObject) (GetTenantWebDIDResponseObject, error)
	// Introspection endpoint to retrieve information from an Access Token as described by RFC7662
	// (POST /internal/auth/v2/accesstoken/introspect)
	IntrospectAccessToken(ctx context.Context, request IntrospectAccessTokenRequestObject) (IntrospectAccessTokenResponseObject, error)
	// Get the access token from the Nuts node that was requested through /request-user-access-token.
	// (GET /internal/auth/v2/accesstoken/{sessionID})
	RetrieveAccessToken(ctx context.Context, request RetrieveAccessTokenRequestObject) (RetrieveAccessTokenResponseObject, error)
	// Start the authorization flow to get an access token from a remote authorization server.
	// (POST /internal/auth/v2/{did}/request-service-access-token)
	RequestServiceAccessToken(ctx context.Context, request RequestServiceAccessTokenRequestObject) (RequestServiceAccessTokenResponseObject, error)
	// Start the authorization code flow to get an access token from a remote authorization server when user context is required.
	// (POST /internal/auth/v2/{did}/request-user-access-token)
	RequestUserAccessToken(ctx context.Context, request RequestUserAccessTokenRequestObject) (RequestUserAccessTokenResponseObject, error)
	// Used by resource owners to initiate the authorization code flow.
	// (GET /oauth2/{did}/authorize)
	HandleAuthorizeRequest(ctx context.Context, request HandleAuthorizeRequestRequestObject) (HandleAuthorizeRequestResponseObject, error)
	// The OAuth2 callback endpoint of the client.
	// (GET /oauth2/{did}/callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)
	// Get the OAuth2 Client metadata
	// (GET /oauth2/{did}/oauth-client)
	OAuthClientMetadata(ctx context.Context, request OAuthClientMetadataRequestObject) (OAuthClientMetadataResponseObject, error)
	// Used by relying parties to obtain a presentation definition for desired scopes as specified by Nuts RFC021.
	// (GET /oauth2/{did}/presentation_definition)
	PresentationDefinition(ctx context.Context, request PresentationDefinitionRequestObject) (PresentationDefinitionResponseObject, error)
	// Used by wallets to post the authorization response or error to.
	// (POST /oauth2/{did}/response)
	HandleAuthorizeResponse(ctx context.Context, request HandleAuthorizeResponseRequestObject) (HandleAuthorizeResponseResponseObject, error)
	// Used by to request access- or refresh tokens.
	// (POST /oauth2/{did}/token)
	HandleTokenRequest(ctx context.Context, request HandleTokenRequestRequestObject) (HandleTokenRequestResponseObject, error)
	// Get the StatusList2021Credential for the given DID and page
	// (GET /statuslist/{did}/{page})
	StatusList(ctx context.Context, request StatusListRequestObject) (StatusListResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetRootWebDID operation middleware
func (sh *strictHandler) GetRootWebDID(ctx echo.Context) error {
	var request GetRootWebDIDRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRootWebDID(ctx.Request().Context(), request.(GetRootWebDIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRootWebDID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRootWebDIDResponseObject); ok {
		return validResponse.VisitGetRootWebDIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RootOAuthAuthorizationServerMetadata operation middleware
func (sh *strictHandler) RootOAuthAuthorizationServerMetadata(ctx echo.Context) error {
	var request RootOAuthAuthorizationServerMetadataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RootOAuthAuthorizationServerMetadata(ctx.Request().Context(), request.(RootOAuthAuthorizationServerMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RootOAuthAuthorizationServerMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RootOAuthAuthorizationServerMetadataResponseObject); ok {
		return validResponse.VisitRootOAuthAuthorizationServerMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthAuthorizationServerMetadata operation middleware
func (sh *strictHandler) OAuthAuthorizationServerMetadata(ctx echo.Context, id string) error {
	var request OAuthAuthorizationServerMetadataRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthAuthorizationServerMetadata(ctx.Request().Context(), request.(OAuthAuthorizationServerMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthAuthorizationServerMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthAuthorizationServerMetadataResponseObject); ok {
		return validResponse.VisitOAuthAuthorizationServerMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTenantWebDID operation middleware
func (sh *strictHandler) GetTenantWebDID(ctx echo.Context, id string) error {
	var request GetTenantWebDIDRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenantWebDID(ctx.Request().Context(), request.(GetTenantWebDIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenantWebDID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTenantWebDIDResponseObject); ok {
		return validResponse.VisitGetTenantWebDIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// IntrospectAccessToken operation middleware
func (sh *strictHandler) IntrospectAccessToken(ctx echo.Context) error {
	var request IntrospectAccessTokenRequestObject

	if form, err := ctx.FormParams(); err == nil {
		var body IntrospectAccessTokenFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IntrospectAccessToken(ctx.Request().Context(), request.(IntrospectAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IntrospectAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IntrospectAccessTokenResponseObject); ok {
		return validResponse.VisitIntrospectAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RetrieveAccessToken operation middleware
func (sh *strictHandler) RetrieveAccessToken(ctx echo.Context, sessionID string) error {
	var request RetrieveAccessTokenRequestObject

	request.SessionID = sessionID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrieveAccessToken(ctx.Request().Context(), request.(RetrieveAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrieveAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RetrieveAccessTokenResponseObject); ok {
		return validResponse.VisitRetrieveAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestServiceAccessToken operation middleware
func (sh *strictHandler) RequestServiceAccessToken(ctx echo.Context, did string) error {
	var request RequestServiceAccessTokenRequestObject

	request.Did = did

	var body RequestServiceAccessTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestServiceAccessToken(ctx.Request().Context(), request.(RequestServiceAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestServiceAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestServiceAccessTokenResponseObject); ok {
		return validResponse.VisitRequestServiceAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestUserAccessToken operation middleware
func (sh *strictHandler) RequestUserAccessToken(ctx echo.Context, did string) error {
	var request RequestUserAccessTokenRequestObject

	request.Did = did

	var body RequestUserAccessTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestUserAccessToken(ctx.Request().Context(), request.(RequestUserAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestUserAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestUserAccessTokenResponseObject); ok {
		return validResponse.VisitRequestUserAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HandleAuthorizeRequest operation middleware
func (sh *strictHandler) HandleAuthorizeRequest(ctx echo.Context, did string, params HandleAuthorizeRequestParams) error {
	var request HandleAuthorizeRequestRequestObject

	request.Did = did
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleAuthorizeRequest(ctx.Request().Context(), request.(HandleAuthorizeRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleAuthorizeRequest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleAuthorizeRequestResponseObject); ok {
		return validResponse.VisitHandleAuthorizeRequestResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Callback operation middleware
func (sh *strictHandler) Callback(ctx echo.Context, did string, params CallbackParams) error {
	var request CallbackRequestObject

	request.Did = did
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx.Request().Context(), request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		return validResponse.VisitCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthClientMetadata operation middleware
func (sh *strictHandler) OAuthClientMetadata(ctx echo.Context, did string) error {
	var request OAuthClientMetadataRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthClientMetadata(ctx.Request().Context(), request.(OAuthClientMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthClientMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthClientMetadataResponseObject); ok {
		return validResponse.VisitOAuthClientMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PresentationDefinition operation middleware
func (sh *strictHandler) PresentationDefinition(ctx echo.Context, did string, params PresentationDefinitionParams) error {
	var request PresentationDefinitionRequestObject

	request.Did = did
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PresentationDefinition(ctx.Request().Context(), request.(PresentationDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PresentationDefinition")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PresentationDefinitionResponseObject); ok {
		return validResponse.VisitPresentationDefinitionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HandleAuthorizeResponse operation middleware
func (sh *strictHandler) HandleAuthorizeResponse(ctx echo.Context, did string) error {
	var request HandleAuthorizeResponseRequestObject

	request.Did = did

	if form, err := ctx.FormParams(); err == nil {
		var body HandleAuthorizeResponseFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleAuthorizeResponse(ctx.Request().Context(), request.(HandleAuthorizeResponseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleAuthorizeResponse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleAuthorizeResponseResponseObject); ok {
		return validResponse.VisitHandleAuthorizeResponseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HandleTokenRequest operation middleware
func (sh *strictHandler) HandleTokenRequest(ctx echo.Context, did string) error {
	var request HandleTokenRequestRequestObject

	request.Did = did

	if form, err := ctx.FormParams(); err == nil {
		var body HandleTokenRequestFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleTokenRequest(ctx.Request().Context(), request.(HandleTokenRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleTokenRequest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleTokenRequestResponseObject); ok {
		return validResponse.VisitHandleTokenRequestResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StatusList operation middleware
func (sh *strictHandler) StatusList(ctx echo.Context, did string, page int) error {
	var request StatusListRequestObject

	request.Did = did
	request.Page = page

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StatusList(ctx.Request().Context(), request.(StatusListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StatusListResponseObject); ok {
		return validResponse.VisitStatusListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
