// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOIDCProviderMeta request
	GetOIDCProviderMeta(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOIDCIssuerMeta request
	GetOIDCIssuerMeta(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReceiveCredentialOffer request
	ReceiveCredentialOffer(ctx context.Context, did string, params *ReceiveCredentialOfferParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCredential request with any body
	GetCredentialWithBody(ctx context.Context, did string, params *GetCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCredential(ctx context.Context, did string, params *GetCredentialParams, body GetCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestAccessToken request with any body
	RequestAccessTokenWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestAccessTokenWithFormdataBody(ctx context.Context, did string, body RequestAccessTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOIDCProviderMeta(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOIDCProviderMetaRequest(c.Server, did)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOIDCIssuerMeta(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOIDCIssuerMetaRequest(c.Server, did)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReceiveCredentialOffer(ctx context.Context, did string, params *ReceiveCredentialOfferParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReceiveCredentialOfferRequest(c.Server, did, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredentialWithBody(ctx context.Context, did string, params *GetCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCredentialRequestWithBody(c.Server, did, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredential(ctx context.Context, did string, params *GetCredentialParams, body GetCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCredentialRequest(c.Server, did, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAccessTokenWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAccessTokenRequestWithBody(c.Server, did, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAccessTokenWithFormdataBody(ctx context.Context, did string, body RequestAccessTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestAccessTokenRequestWithFormdataBody(c.Server, did, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOIDCProviderMetaRequest generates requests for GetOIDCProviderMeta
func NewGetOIDCProviderMetaRequest(server string, did string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity/%s/.well-known/openid-configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOIDCIssuerMetaRequest generates requests for GetOIDCIssuerMeta
func NewGetOIDCIssuerMetaRequest(server string, did string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity/%s/.well-known/openid-credential-issuer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReceiveCredentialOfferRequest generates requests for ReceiveCredentialOffer
func NewReceiveCredentialOfferRequest(server string, did string, params *ReceiveCredentialOfferParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity/%s/holder/oidc4vci/credential_offer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "credential_offer", runtime.ParamLocationQuery, params.CredentialOffer); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCredentialRequest calls the generic GetCredential builder with application/json body
func NewGetCredentialRequest(server string, did string, params *GetCredentialParams, body GetCredentialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCredentialRequestWithBody(server, did, params, "application/json", bodyReader)
}

// NewGetCredentialRequestWithBody generates requests for GetCredential with any type of body
func NewGetCredentialRequestWithBody(server string, did string, params *GetCredentialParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity/%s/issuer/oidc4vci/credential", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Authorization != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)
	}

	return req, nil
}

// NewRequestAccessTokenRequestWithFormdataBody calls the generic RequestAccessToken builder with application/x-www-form-urlencoded body
func NewRequestAccessTokenRequestWithFormdataBody(server string, did string, body RequestAccessTokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRequestAccessTokenRequestWithBody(server, did, "application/x-www-form-urlencoded", bodyReader)
}

// NewRequestAccessTokenRequestWithBody generates requests for RequestAccessToken with any type of body
func NewRequestAccessTokenRequestWithBody(server string, did string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity/%s/oidc/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOIDCProviderMeta request
	GetOIDCProviderMetaWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetOIDCProviderMetaResponse, error)

	// GetOIDCIssuerMeta request
	GetOIDCIssuerMetaWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetOIDCIssuerMetaResponse, error)

	// ReceiveCredentialOffer request
	ReceiveCredentialOfferWithResponse(ctx context.Context, did string, params *ReceiveCredentialOfferParams, reqEditors ...RequestEditorFn) (*ReceiveCredentialOfferResponse, error)

	// GetCredential request with any body
	GetCredentialWithBodyWithResponse(ctx context.Context, did string, params *GetCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCredentialResponse, error)

	GetCredentialWithResponse(ctx context.Context, did string, params *GetCredentialParams, body GetCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCredentialResponse, error)

	// RequestAccessToken request with any body
	RequestAccessTokenWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error)

	RequestAccessTokenWithFormdataBodyWithResponse(ctx context.Context, did string, body RequestAccessTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error)
}

type GetOIDCProviderMetaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OIDCProviderMetadata
}

// Status returns HTTPResponse.Status
func (r GetOIDCProviderMetaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOIDCProviderMetaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOIDCIssuerMetaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OIDCProviderMetadata
}

// Status returns HTTPResponse.Status
func (r GetOIDCIssuerMetaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOIDCIssuerMetaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReceiveCredentialOfferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReceiveCredentialOfferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReceiveCredentialOfferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialResponse
}

// Status returns HTTPResponse.Status
func (r GetCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OIDCTokenResponse
}

// Status returns HTTPResponse.Status
func (r RequestAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOIDCProviderMetaWithResponse request returning *GetOIDCProviderMetaResponse
func (c *ClientWithResponses) GetOIDCProviderMetaWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetOIDCProviderMetaResponse, error) {
	rsp, err := c.GetOIDCProviderMeta(ctx, did, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOIDCProviderMetaResponse(rsp)
}

// GetOIDCIssuerMetaWithResponse request returning *GetOIDCIssuerMetaResponse
func (c *ClientWithResponses) GetOIDCIssuerMetaWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetOIDCIssuerMetaResponse, error) {
	rsp, err := c.GetOIDCIssuerMeta(ctx, did, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOIDCIssuerMetaResponse(rsp)
}

// ReceiveCredentialOfferWithResponse request returning *ReceiveCredentialOfferResponse
func (c *ClientWithResponses) ReceiveCredentialOfferWithResponse(ctx context.Context, did string, params *ReceiveCredentialOfferParams, reqEditors ...RequestEditorFn) (*ReceiveCredentialOfferResponse, error) {
	rsp, err := c.ReceiveCredentialOffer(ctx, did, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReceiveCredentialOfferResponse(rsp)
}

// GetCredentialWithBodyWithResponse request with arbitrary body returning *GetCredentialResponse
func (c *ClientWithResponses) GetCredentialWithBodyWithResponse(ctx context.Context, did string, params *GetCredentialParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCredentialResponse, error) {
	rsp, err := c.GetCredentialWithBody(ctx, did, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCredentialResponse(rsp)
}

func (c *ClientWithResponses) GetCredentialWithResponse(ctx context.Context, did string, params *GetCredentialParams, body GetCredentialJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCredentialResponse, error) {
	rsp, err := c.GetCredential(ctx, did, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCredentialResponse(rsp)
}

// RequestAccessTokenWithBodyWithResponse request with arbitrary body returning *RequestAccessTokenResponse
func (c *ClientWithResponses) RequestAccessTokenWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error) {
	rsp, err := c.RequestAccessTokenWithBody(ctx, did, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) RequestAccessTokenWithFormdataBodyWithResponse(ctx context.Context, did string, body RequestAccessTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*RequestAccessTokenResponse, error) {
	rsp, err := c.RequestAccessTokenWithFormdataBody(ctx, did, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestAccessTokenResponse(rsp)
}

// ParseGetOIDCProviderMetaResponse parses an HTTP response from a GetOIDCProviderMetaWithResponse call
func ParseGetOIDCProviderMetaResponse(rsp *http.Response) (*GetOIDCProviderMetaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOIDCProviderMetaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OIDCProviderMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOIDCIssuerMetaResponse parses an HTTP response from a GetOIDCIssuerMetaWithResponse call
func ParseGetOIDCIssuerMetaResponse(rsp *http.Response) (*GetOIDCIssuerMetaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOIDCIssuerMetaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OIDCProviderMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReceiveCredentialOfferResponse parses an HTTP response from a ReceiveCredentialOfferWithResponse call
func ParseReceiveCredentialOfferResponse(rsp *http.Response) (*ReceiveCredentialOfferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReceiveCredentialOfferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCredentialResponse parses an HTTP response from a GetCredentialWithResponse call
func ParseGetCredentialResponse(rsp *http.Response) (*GetCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRequestAccessTokenResponse parses an HTTP response from a RequestAccessTokenWithResponse call
func ParseRequestAccessTokenResponse(rsp *http.Response) (*RequestAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OIDCTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
