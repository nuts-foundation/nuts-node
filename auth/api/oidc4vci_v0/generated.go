// Package oidc4vci_v0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oidc4vci_v0

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// CredentialOffer defines model for CredentialOffer.
type CredentialOffer struct {
	CredentialIssuer string                   `json:"credential_issuer"`
	Credentials      []map[string]interface{} `json:"credentials"`
	Grants           map[string]interface{}   `json:"grants"`
}

// CredentialRequest defines model for CredentialRequest.
type CredentialRequest struct {
	// CredentialDefinition JSON object containing (and isolating) the detailed description of the credential type. This object MUST be processed using full JSON-LD processing
	CredentialDefinition *map[string]interface{} `json:"credential_definition,omitempty"`
	Format               string                  `json:"format"`
	Proof                *struct {
		// Jwt String with a JWS [RFC7515] as proof of possession.
		//
		// The fields of the JWT may look like this:
		//
		// {
		//   "alg": "ES256",
		//   "kid":"did:nuts:ebfeb1f712ebc6f1c276e12ec21/keys/1"
		// }.
		// {
		//   "iss": "s6BhdRkqt3",
		//   "aud": "https://credential-issuer.example.com",
		//   "iat": 1659145924,
		//   "nonce": "tZignsnFbp"
		// }
		Jwt       string `json:"jwt"`
		ProofType string `json:"proof_type"`
	} `json:"proof,omitempty"`
}

// CredentialResponse defines model for CredentialResponse.
type CredentialResponse struct {
	CNonce     *string                 `json:"c_nonce,omitempty"`
	Credential *map[string]interface{} `json:"credential,omitempty"`
	Format     *string                 `json:"format,omitempty"`
}

// OIDCProviderMetadata The OIDC Provider Metadata combines meta data from the OIDC provider and the OIDC4VCI issuer.
// This way a client can discover all the information it needs in one request.
type OIDCProviderMetadata struct {
	CredentialEndpoint *string `json:"credential_endpoint,omitempty"`

	// CredentialIssuer The Credential Issuer's identifier
	CredentialIssuer *string `json:"credential_issuer,omitempty"`

	// CredentialsSupported A JSON array containing a list of JSON objects, each of them representing metadata about a separate credential type that the Credential Issuer can issue.
	CredentialsSupported *[]map[string]interface{} `json:"credentials_supported,omitempty"`

	// Issuer The authorization server's issuer identifier, which is
	// a URL that uses the "https" scheme and has no query or fragment
	// components.
	Issuer *string `json:"issuer,omitempty"`

	// TokenEndpoint URL of the authorization server's token endpoint [RFC6749].
	TokenEndpoint *string `json:"token_endpoint,omitempty"`
}

// OIDCTokenResponse Token Responses are made as defined in [RFC6749] with additional fields as described in OIDC4VCI.
type OIDCTokenResponse struct {
	// AccessToken The access token issued by the authorization server.
	AccessToken string `json:"access_token"`

	// CNonce JSON string containing a nonce to be used to create a proof of possession of key material when requesting a Credential. When received, the Wallet MUST use this nonce value for its subsequent credential requests until the Credential Issuer provides a fresh nonce.
	CNonce *string `json:"c_nonce,omitempty"`

	// ExpiresIn The lifetime in seconds of the access token.
	ExpiresIn *int `json:"expires_in,omitempty"`

	// TokenType The type of the token issued as described in [RFC6749].
	TokenType string `json:"token_type"`
}

// ReceiveCredentialOfferParams defines parameters for ReceiveCredentialOffer.
type ReceiveCredentialOfferParams struct {
	// CredentialOffer Contains the url encoded credential_offer object.
	CredentialOffer string `form:"credential_offer" json:"credential_offer"`
}

// GetCredentialParams defines parameters for GetCredential.
type GetCredentialParams struct {
	Authorization *string `json:"Authorization,omitempty"`
}

// RequestAccessTokenFormdataBody defines parameters for RequestAccessToken.
type RequestAccessTokenFormdataBody struct {
	GrantType         string `json:"grant_type"`
	PreAuthorizedCode string `json:"pre-authorized_code"`
}

// GetCredentialJSONRequestBody defines body for GetCredential for application/json ContentType.
type GetCredentialJSONRequestBody = CredentialRequest

// RequestAccessTokenFormdataRequestBody defines body for RequestAccessToken for application/x-www-form-urlencoded ContentType.
type RequestAccessTokenFormdataRequestBody RequestAccessTokenFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get OIDC provider meta data
	// (GET /identity/{did}/.well-known/openid-configuration)
	GetOIDCProviderMeta(ctx echo.Context, did string) error
	// get OIDC credential issuer meta data
	// (GET /identity/{did}/.well-known/openid-credential-issuer)
	GetOIDCIssuerMeta(ctx echo.Context, did string) error
	// Credential offer (OIDC4VCI) endpoint
	// (GET /identity/{did}/holder/oidc4vci/credential_offer)
	ReceiveCredentialOffer(ctx echo.Context, did string, params ReceiveCredentialOfferParams) error
	// Credential endpoint
	// (POST /identity/{did}/issuer/oidc4vci/credential)
	GetCredential(ctx echo.Context, did string, params GetCredentialParams) error
	// Token endpoint
	// (POST /identity/{did}/oidc/token)
	RequestAccessToken(ctx echo.Context, did string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOIDCProviderMeta converts echo context to params.
func (w *ServerInterfaceWrapper) GetOIDCProviderMeta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOIDCProviderMeta(ctx, did)
	return err
}

// GetOIDCIssuerMeta converts echo context to params.
func (w *ServerInterfaceWrapper) GetOIDCIssuerMeta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOIDCIssuerMeta(ctx, did)
	return err
}

// ReceiveCredentialOffer converts echo context to params.
func (w *ServerInterfaceWrapper) ReceiveCredentialOffer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReceiveCredentialOfferParams
	// ------------- Required query parameter "credential_offer" -------------

	err = runtime.BindQueryParameter("form", true, true, "credential_offer", ctx.QueryParams(), &params.CredentialOffer)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credential_offer: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReceiveCredentialOffer(ctx, did, params)
	return err
}

// GetCredential converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCredentialParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = &Authorization
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredential(ctx, did, params)
	return err
}

// RequestAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestAccessToken(ctx, did)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/identity/:did/.well-known/openid-configuration", wrapper.GetOIDCProviderMeta)
	router.GET(baseURL+"/identity/:did/.well-known/openid-credential-issuer", wrapper.GetOIDCIssuerMeta)
	router.GET(baseURL+"/identity/:did/holder/oidc4vci/credential_offer", wrapper.ReceiveCredentialOffer)
	router.POST(baseURL+"/identity/:did/issuer/oidc4vci/credential", wrapper.GetCredential)
	router.POST(baseURL+"/identity/:did/oidc/token", wrapper.RequestAccessToken)

}

type GetOIDCProviderMetaRequestObject struct {
	Did string `json:"did"`
}

type GetOIDCProviderMetaResponseObject interface {
	VisitGetOIDCProviderMetaResponse(w http.ResponseWriter) error
}

type GetOIDCProviderMeta200JSONResponse OIDCProviderMetadata

func (response GetOIDCProviderMeta200JSONResponse) VisitGetOIDCProviderMetaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOIDCIssuerMetaRequestObject struct {
	Did string `json:"did"`
}

type GetOIDCIssuerMetaResponseObject interface {
	VisitGetOIDCIssuerMetaResponse(w http.ResponseWriter) error
}

type GetOIDCIssuerMeta200JSONResponse OIDCProviderMetadata

func (response GetOIDCIssuerMeta200JSONResponse) VisitGetOIDCIssuerMetaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReceiveCredentialOfferRequestObject struct {
	Did    string `json:"did"`
	Params ReceiveCredentialOfferParams
}

type ReceiveCredentialOfferResponseObject interface {
	VisitReceiveCredentialOfferResponse(w http.ResponseWriter) error
}

type ReceiveCredentialOffer202TextResponse string

func (response ReceiveCredentialOffer202TextResponse) VisitReceiveCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(202)

	_, err := w.Write([]byte(response))
	return err
}

type GetCredentialRequestObject struct {
	Did    string `json:"did"`
	Params GetCredentialParams
	Body   *GetCredentialJSONRequestBody
}

type GetCredentialResponseObject interface {
	VisitGetCredentialResponse(w http.ResponseWriter) error
}

type GetCredential200JSONResponse CredentialResponse

func (response GetCredential200JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestAccessTokenRequestObject struct {
	Did  string `json:"did"`
	Body *RequestAccessTokenFormdataRequestBody
}

type RequestAccessTokenResponseObject interface {
	VisitRequestAccessTokenResponse(w http.ResponseWriter) error
}

type RequestAccessToken200JSONResponse OIDCTokenResponse

func (response RequestAccessToken200JSONResponse) VisitRequestAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// get OIDC provider meta data
	// (GET /identity/{did}/.well-known/openid-configuration)
	GetOIDCProviderMeta(ctx context.Context, request GetOIDCProviderMetaRequestObject) (GetOIDCProviderMetaResponseObject, error)
	// get OIDC credential issuer meta data
	// (GET /identity/{did}/.well-known/openid-credential-issuer)
	GetOIDCIssuerMeta(ctx context.Context, request GetOIDCIssuerMetaRequestObject) (GetOIDCIssuerMetaResponseObject, error)
	// Credential offer (OIDC4VCI) endpoint
	// (GET /identity/{did}/holder/oidc4vci/credential_offer)
	ReceiveCredentialOffer(ctx context.Context, request ReceiveCredentialOfferRequestObject) (ReceiveCredentialOfferResponseObject, error)
	// Credential endpoint
	// (POST /identity/{did}/issuer/oidc4vci/credential)
	GetCredential(ctx context.Context, request GetCredentialRequestObject) (GetCredentialResponseObject, error)
	// Token endpoint
	// (POST /identity/{did}/oidc/token)
	RequestAccessToken(ctx context.Context, request RequestAccessTokenRequestObject) (RequestAccessTokenResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetOIDCProviderMeta operation middleware
func (sh *strictHandler) GetOIDCProviderMeta(ctx echo.Context, did string) error {
	var request GetOIDCProviderMetaRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOIDCProviderMeta(ctx.Request().Context(), request.(GetOIDCProviderMetaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOIDCProviderMeta")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOIDCProviderMetaResponseObject); ok {
		return validResponse.VisitGetOIDCProviderMetaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetOIDCIssuerMeta operation middleware
func (sh *strictHandler) GetOIDCIssuerMeta(ctx echo.Context, did string) error {
	var request GetOIDCIssuerMetaRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOIDCIssuerMeta(ctx.Request().Context(), request.(GetOIDCIssuerMetaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOIDCIssuerMeta")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOIDCIssuerMetaResponseObject); ok {
		return validResponse.VisitGetOIDCIssuerMetaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ReceiveCredentialOffer operation middleware
func (sh *strictHandler) ReceiveCredentialOffer(ctx echo.Context, did string, params ReceiveCredentialOfferParams) error {
	var request ReceiveCredentialOfferRequestObject

	request.Did = did
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReceiveCredentialOffer(ctx.Request().Context(), request.(ReceiveCredentialOfferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReceiveCredentialOffer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReceiveCredentialOfferResponseObject); ok {
		return validResponse.VisitReceiveCredentialOfferResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCredential operation middleware
func (sh *strictHandler) GetCredential(ctx echo.Context, did string, params GetCredentialParams) error {
	var request GetCredentialRequestObject

	request.Did = did
	request.Params = params

	var body GetCredentialJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredential(ctx.Request().Context(), request.(GetCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCredentialResponseObject); ok {
		return validResponse.VisitGetCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RequestAccessToken operation middleware
func (sh *strictHandler) RequestAccessToken(ctx echo.Context, did string) error {
	var request RequestAccessTokenRequestObject

	request.Did = did

	if form, err := ctx.FormParams(); err == nil {
		var body RequestAccessTokenFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestAccessToken(ctx.Request().Context(), request.(RequestAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestAccessTokenResponseObject); ok {
		return validResponse.VisitRequestAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
