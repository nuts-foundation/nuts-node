// Code generated by MockGen. DO NOT EDIT.
// Source: credential/interface.go

// Package credential is a generated GoMock package.
package credential

import (
	gomock "github.com/golang/mock/gomock"
	go_did "github.com/nuts-foundation/go-did"
	concept "github.com/nuts-foundation/nuts-node/credential/concept"
	reflect "reflect"
	time "time"
)

// MockIssuer is a mock of Issuer interface
type MockIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockIssuerMockRecorder
}

// MockIssuerMockRecorder is the mock recorder for MockIssuer
type MockIssuerMockRecorder struct {
	mock *MockIssuer
}

// NewMockIssuer creates a new mock instance
func NewMockIssuer(ctrl *gomock.Controller) *MockIssuer {
	mock := &MockIssuer{ctrl: ctrl}
	mock.recorder = &MockIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIssuer) EXPECT() *MockIssuerMockRecorder {
	return m.recorder
}

// Issue mocks base method
func (m *MockIssuer) Issue(issuer, subject go_did.DID, vcType string, credentialSubject interface{}, expirationDate *time.Time) (go_did.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", issuer, subject, vcType, credentialSubject, expirationDate)
	ret0, _ := ret[0].(go_did.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue
func (mr *MockIssuerMockRecorder) Issue(issuer, subject, vcType, credentialSubject, expirationDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockIssuer)(nil).Issue), issuer, subject, vcType, credentialSubject, expirationDate)
}

// MockVCWriter is a mock of VCWriter interface
type MockVCWriter struct {
	ctrl     *gomock.Controller
	recorder *MockVCWriterMockRecorder
}

// MockVCWriterMockRecorder is the mock recorder for MockVCWriter
type MockVCWriterMockRecorder struct {
	mock *MockVCWriter
}

// NewMockVCWriter creates a new mock instance
func NewMockVCWriter(ctrl *gomock.Controller) *MockVCWriter {
	mock := &MockVCWriter{ctrl: ctrl}
	mock.recorder = &MockVCWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVCWriter) EXPECT() *MockVCWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockVCWriter) Write(vc go_did.VerifiableCredential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", vc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockVCWriterMockRecorder) Write(vc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockVCWriter)(nil).Write), vc)
}

// MockVCReader is a mock of VCReader interface
type MockVCReader struct {
	ctrl     *gomock.Controller
	recorder *MockVCReaderMockRecorder
}

// MockVCReaderMockRecorder is the mock recorder for MockVCReader
type MockVCReaderMockRecorder struct {
	mock *MockVCReader
}

// NewMockVCReader creates a new mock instance
func NewMockVCReader(ctrl *gomock.Controller) *MockVCReader {
	mock := &MockVCReader{ctrl: ctrl}
	mock.recorder = &MockVCReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVCReader) EXPECT() *MockVCReaderMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockVCReader) Search(query concept.Query) ([]go_did.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]go_did.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockVCReaderMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVCReader)(nil).Search), query)
}

// Resolve mocks base method
func (m *MockVCReader) Resolve(ID string) (go_did.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ID)
	ret0, _ := ret[0].(go_did.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockVCReaderMockRecorder) Resolve(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockVCReader)(nil).Resolve), ID)
}

// Verify mocks base method
func (m *MockVCReader) Verify(vc go_did.VerifiableCredential, credentialSubject interface{}, at time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", vc, credentialSubject, at)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockVCReaderMockRecorder) Verify(vc, credentialSubject, at interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVCReader)(nil).Verify), vc, credentialSubject, at)
}

// Registry mocks base method
func (m *MockVCReader) Registry() concept.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(concept.Registry)
	return ret0
}

// Registry indicates an expected call of Registry
func (mr *MockVCReaderMockRecorder) Registry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockVCReader)(nil).Registry))
}

// MockCredential is a mock of Credential interface
type MockCredential struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialMockRecorder
}

// MockCredentialMockRecorder is the mock recorder for MockCredential
type MockCredentialMockRecorder struct {
	mock *MockCredential
}

// NewMockCredential creates a new mock instance
func NewMockCredential(ctrl *gomock.Controller) *MockCredential {
	mock := &MockCredential{ctrl: ctrl}
	mock.recorder = &MockCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCredential) EXPECT() *MockCredentialMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockCredential) Search(query concept.Query) ([]go_did.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]go_did.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockCredentialMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCredential)(nil).Search), query)
}

// Resolve mocks base method
func (m *MockCredential) Resolve(ID string) (go_did.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ID)
	ret0, _ := ret[0].(go_did.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockCredentialMockRecorder) Resolve(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockCredential)(nil).Resolve), ID)
}

// Verify mocks base method
func (m *MockCredential) Verify(vc go_did.VerifiableCredential, credentialSubject interface{}, at time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", vc, credentialSubject, at)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockCredentialMockRecorder) Verify(vc, credentialSubject, at interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCredential)(nil).Verify), vc, credentialSubject, at)
}

// Registry mocks base method
func (m *MockCredential) Registry() concept.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(concept.Registry)
	return ret0
}

// Registry indicates an expected call of Registry
func (mr *MockCredentialMockRecorder) Registry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockCredential)(nil).Registry))
}

// Reader mocks base method
func (m *MockCredential) Reader() VCReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(VCReader)
	return ret0
}

// Reader indicates an expected call of Reader
func (mr *MockCredentialMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockCredential)(nil).Reader))
}
